
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f2c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080071c4  080071c4  000171c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007204  08007204  00017204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d0  24000000  0800720c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00061b9c  240000d0  080072dc  000200d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24061c6c  080072dc  00021c6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001505b  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002350  00000000  00000000  0003519c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000fd8  00000000  00000000  000374f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000c71  00000000  00000000  000384c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036ad6  00000000  00000000  00039139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015b23  00000000  00000000  0006fc0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00162148  00000000  00000000  00085732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000043c8  00000000  00000000  001e787c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001ebc44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080071ac 	.word	0x080071ac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080071ac 	.word	0x080071ac

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <setToCenter>:
	va_end(arglist);
	if (nby < 0) { nby = sizeof(st)-1; } //print truncated string in case too long
	if (nby) HAL_UART_Transmit(&huart3,st,nby,10);
}

void setToCenter(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	if(loop_num == 1){
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <setToCenter+0x4c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d105      	bne.n	80005ec <setToCenter+0x18>
	  pulseCount++;
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <setToCenter+0x50>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <setToCenter+0x50>)
 80005e8:	6013      	str	r3, [r2, #0]
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4); // Stop PWM
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_SET);
			// HAL_Delay(5000);
		}
	}
}
 80005ea:	e016      	b.n	800061a <setToCenter+0x46>
	} else if(loop_num == 2){
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <setToCenter+0x4c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d112      	bne.n	800061a <setToCenter+0x46>
		total_pulses--;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <setToCenter+0x54>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <setToCenter+0x54>)
 80005fc:	6013      	str	r3, [r2, #0]
		if(total_pulses == 0){
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <setToCenter+0x54>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d109      	bne.n	800061a <setToCenter+0x46>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4); // Stop PWM
 8000606:	210c      	movs	r1, #12
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <setToCenter+0x58>)
 800060a:	f004 f9cb 	bl	80049a4 <HAL_TIM_PWM_Stop>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000614:	4806      	ldr	r0, [pc, #24]	; (8000630 <setToCenter+0x5c>)
 8000616:	f001 f97f 	bl	8001918 <HAL_GPIO_WritePin>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	240001d4 	.word	0x240001d4
 8000624:	240001d0 	.word	0x240001d0
 8000628:	240001cc 	.word	0x240001cc
 800062c:	240000ec 	.word	0x240000ec
 8000630:	58021800 	.word	0x58021800
 8000634:	00000000 	.word	0x00000000

08000638 <accelerationProcess>:


void accelerationProcess(uint32_t maxFreq){
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	 if(isPressed  == 1){
 8000640:	4b77      	ldr	r3, [pc, #476]	; (8000820 <accelerationProcess+0x1e8>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b01      	cmp	r3, #1
 8000648:	f040 80e2 	bne.w	8000810 <accelerationProcess+0x1d8>
		if(pulseCount < maxPulses){
 800064c:	4b75      	ldr	r3, [pc, #468]	; (8000824 <accelerationProcess+0x1ec>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b75      	ldr	r3, [pc, #468]	; (8000828 <accelerationProcess+0x1f0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	429a      	cmp	r2, r3
 8000656:	d245      	bcs.n	80006e4 <accelerationProcess+0xac>
			// Get current time and elapsetime during a pulse
			 uint32_t currentTime = HAL_GetTick();
 8000658:	f000 fe4a 	bl	80012f0 <HAL_GetTick>
 800065c:	6178      	str	r0, [r7, #20]
			 uint32_t elapseTime = currentTime - lastTime;
 800065e:	4b73      	ldr	r3, [pc, #460]	; (800082c <accelerationProcess+0x1f4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	697a      	ldr	r2, [r7, #20]
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	613b      	str	r3, [r7, #16]
			 // curR represent latest frequency
			 // I need to initialize the array here so that it could store all the required value,
			 // If I put this array after I update curR, I won't come back to the initial period.
			 freqArray[pulseCount] = curR;	// Using a array to store the latest frequency
 8000668:	4b6e      	ldr	r3, [pc, #440]	; (8000824 <accelerationProcess+0x1ec>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a70      	ldr	r2, [pc, #448]	; (8000830 <accelerationProcess+0x1f8>)
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	4970      	ldr	r1, [pc, #448]	; (8000834 <accelerationProcess+0x1fc>)
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//			 curElapseTime = elapseTime;
			 // POSSIBLE BUG: Since curR is a integer, the initial value could become 1066, which could
			 // lead 64e6 / 1066 become 60037, a bit of different with 60000, and finally the period will
			 // recover to this value.

			 curR = curR + ((Rs - R0) * elapseTime) / constantT;	// Update formula
 8000676:	4b70      	ldr	r3, [pc, #448]	; (8000838 <accelerationProcess+0x200>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4b70      	ldr	r3, [pc, #448]	; (800083c <accelerationProcess+0x204>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	693a      	ldr	r2, [r7, #16]
 8000682:	fb03 f202 	mul.w	r2, r3, r2
 8000686:	4b6e      	ldr	r3, [pc, #440]	; (8000840 <accelerationProcess+0x208>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	fbb2 f2f3 	udiv	r2, r2, r3
 800068e:	4b68      	ldr	r3, [pc, #416]	; (8000830 <accelerationProcess+0x1f8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	4a66      	ldr	r2, [pc, #408]	; (8000830 <accelerationProcess+0x1f8>)
 8000696:	6013      	str	r3, [r2, #0]
			 if(curR > maxFreq){
 8000698:	4b65      	ldr	r3, [pc, #404]	; (8000830 <accelerationProcess+0x1f8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d202      	bcs.n	80006a8 <accelerationProcess+0x70>
				 curR = maxFreq;
 80006a2:	4a63      	ldr	r2, [pc, #396]	; (8000830 <accelerationProcess+0x1f8>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6013      	str	r3, [r2, #0]
			 }
			 uint32_t newPeriod = 64e6 / curR ;	// Update the new period and duty cycle
 80006a8:	4b61      	ldr	r3, [pc, #388]	; (8000830 <accelerationProcess+0x1f8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	ee07 3a90 	vmov	s15, r3
 80006b0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80006b4:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8000818 <accelerationProcess+0x1e0>
 80006b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80006bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006c0:	ee17 3a90 	vmov	r3, s15
 80006c4:	60fb      	str	r3, [r7, #12]

			 TIM2->ARR = newPeriod;
 80006c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	62d3      	str	r3, [r2, #44]	; 0x2c
			 TIM2->CCR4 = newPeriod / 2;
 80006ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	085b      	lsrs	r3, r3, #1
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
			 pulseCount++;
 80006d8:	4b52      	ldr	r3, [pc, #328]	; (8000824 <accelerationProcess+0x1ec>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	4a51      	ldr	r2, [pc, #324]	; (8000824 <accelerationProcess+0x1ec>)
 80006e0:	6013      	str	r3, [r2, #0]
//			 	DEBUG VARIABLE
//			   kk++;
			}
		}
	 }
}
 80006e2:	e095      	b.n	8000810 <accelerationProcess+0x1d8>
		} else if(pulseCount >= maxPulses && pulseCount < (uint32_t) (maxPulses * 1.5)){
 80006e4:	4b4f      	ldr	r3, [pc, #316]	; (8000824 <accelerationProcess+0x1ec>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <accelerationProcess+0x1f0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d32c      	bcc.n	800074a <accelerationProcess+0x112>
 80006f0:	4b4d      	ldr	r3, [pc, #308]	; (8000828 <accelerationProcess+0x1f0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	ee07 3a90 	vmov	s15, r3
 80006f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80006fc:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8000700:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee17 2a90 	vmov	r2, s15
 800070c:	4b45      	ldr	r3, [pc, #276]	; (8000824 <accelerationProcess+0x1ec>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d91a      	bls.n	800074a <accelerationProcess+0x112>
			pulseCount++;
 8000714:	4b43      	ldr	r3, [pc, #268]	; (8000824 <accelerationProcess+0x1ec>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a42      	ldr	r2, [pc, #264]	; (8000824 <accelerationProcess+0x1ec>)
 800071c:	6013      	str	r3, [r2, #0]
			if(pulseCount == (uint32_t) (maxPulses * 1.5)){
 800071e:	4b42      	ldr	r3, [pc, #264]	; (8000828 <accelerationProcess+0x1f0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	ee07 3a90 	vmov	s15, r3
 8000726:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800072a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800072e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000732:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000736:	ee17 2a90 	vmov	r2, s15
 800073a:	4b3a      	ldr	r3, [pc, #232]	; (8000824 <accelerationProcess+0x1ec>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	429a      	cmp	r2, r3
 8000740:	d166      	bne.n	8000810 <accelerationProcess+0x1d8>
				isDecelerating = 1;
 8000742:	4b40      	ldr	r3, [pc, #256]	; (8000844 <accelerationProcess+0x20c>)
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]
			if(pulseCount == (uint32_t) (maxPulses * 1.5)){
 8000748:	e062      	b.n	8000810 <accelerationProcess+0x1d8>
		} else if(isDecelerating && decelerateCount <= maxPulses){
 800074a:	4b3e      	ldr	r3, [pc, #248]	; (8000844 <accelerationProcess+0x20c>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d05d      	beq.n	8000810 <accelerationProcess+0x1d8>
 8000754:	4b3c      	ldr	r3, [pc, #240]	; (8000848 <accelerationProcess+0x210>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b33      	ldr	r3, [pc, #204]	; (8000828 <accelerationProcess+0x1f0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	429a      	cmp	r2, r3
 800075e:	d857      	bhi.n	8000810 <accelerationProcess+0x1d8>
			if(decelerateCount < maxPulses){
 8000760:	4b39      	ldr	r3, [pc, #228]	; (8000848 <accelerationProcess+0x210>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b30      	ldr	r3, [pc, #192]	; (8000828 <accelerationProcess+0x1f0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	429a      	cmp	r2, r3
 800076a:	d229      	bcs.n	80007c0 <accelerationProcess+0x188>
				uint32_t newPeriod = 64e6 / freqArray[maxPulses - decelerateCount - 1];
 800076c:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <accelerationProcess+0x1f0>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b35      	ldr	r3, [pc, #212]	; (8000848 <accelerationProcess+0x210>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	3b01      	subs	r3, #1
 8000778:	4a2e      	ldr	r2, [pc, #184]	; (8000834 <accelerationProcess+0x1fc>)
 800077a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800077e:	ee07 3a90 	vmov	s15, r3
 8000782:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000786:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8000818 <accelerationProcess+0x1e0>
 800078a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800078e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000792:	ee17 3a90 	vmov	r3, s15
 8000796:	61bb      	str	r3, [r7, #24]
			    TIM2->ARR = newPeriod;
 8000798:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	62d3      	str	r3, [r2, #44]	; 0x2c
			    TIM2->CCR4 = newPeriod / 2;
 80007a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	085b      	lsrs	r3, r3, #1
 80007a8:	6413      	str	r3, [r2, #64]	; 0x40
			    decelerateCount++;
 80007aa:	4b27      	ldr	r3, [pc, #156]	; (8000848 <accelerationProcess+0x210>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	4a25      	ldr	r2, [pc, #148]	; (8000848 <accelerationProcess+0x210>)
 80007b2:	6013      	str	r3, [r2, #0]
			    pulseCount++;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <accelerationProcess+0x1ec>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	4a1a      	ldr	r2, [pc, #104]	; (8000824 <accelerationProcess+0x1ec>)
 80007bc:	6013      	str	r3, [r2, #0]
}
 80007be:	e027      	b.n	8000810 <accelerationProcess+0x1d8>
				isDecelerating = 0;
 80007c0:	4b20      	ldr	r3, [pc, #128]	; (8000844 <accelerationProcess+0x20c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
				pulseCount = 0;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <accelerationProcess+0x1ec>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
				decelerateCount = 0;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <accelerationProcess+0x210>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
				curR = R0;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <accelerationProcess+0x204>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a16      	ldr	r2, [pc, #88]	; (8000830 <accelerationProcess+0x1f8>)
 80007d8:	6013      	str	r3, [r2, #0]
				GPIO_PinState curDirection = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10);
 80007da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007de:	481b      	ldr	r0, [pc, #108]	; (800084c <accelerationProcess+0x214>)
 80007e0:	f001 f882 	bl	80018e8 <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	77fb      	strb	r3, [r7, #31]
				GPIO_PinState newDirection = (curDirection == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 80007e8:	7ffb      	ldrb	r3, [r7, #31]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	bf14      	ite	ne
 80007ee:	2301      	movne	r3, #1
 80007f0:	2300      	moveq	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	77bb      	strb	r3, [r7, #30]
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, newDirection);
 80007f6:	7fbb      	ldrb	r3, [r7, #30]
 80007f8:	461a      	mov	r2, r3
 80007fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fe:	4813      	ldr	r0, [pc, #76]	; (800084c <accelerationProcess+0x214>)
 8000800:	f001 f88a 	bl	8001918 <HAL_GPIO_WritePin>
				curNoteIndex++;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <accelerationProcess+0x218>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	4a11      	ldr	r2, [pc, #68]	; (8000850 <accelerationProcess+0x218>)
 800080c:	6013      	str	r3, [r2, #0]
}
 800080e:	e7ff      	b.n	8000810 <accelerationProcess+0x1d8>
 8000810:	bf00      	nop
 8000812:	3720      	adds	r7, #32
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	00000000 	.word	0x00000000
 800081c:	418e8480 	.word	0x418e8480
 8000820:	24061c60 	.word	0x24061c60
 8000824:	240001d0 	.word	0x240001d0
 8000828:	24000000 	.word	0x24000000
 800082c:	240001d8 	.word	0x240001d8
 8000830:	24000010 	.word	0x24000010
 8000834:	240001dc 	.word	0x240001dc
 8000838:	2400000c 	.word	0x2400000c
 800083c:	24000008 	.word	0x24000008
 8000840:	24000004 	.word	0x24000004
 8000844:	24061c61 	.word	0x24061c61
 8000848:	24061c5c 	.word	0x24061c5c
 800084c:	58020c00 	.word	0x58020c00
 8000850:	24061c64 	.word	0x24061c64

08000854 <playTheSong>:

void playTheSong(uint32_t curFreq){
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	uint32_t prevPulse = curFreq;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	60fb      	str	r3, [r7, #12]
	accelerationProcess(curFreq);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff fee9 	bl	8000638 <accelerationProcess>
	if(curFreq != prevPulse){
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	429a      	cmp	r2, r3
 800086c:	d00a      	beq.n	8000884 <playTheSong+0x30>
		HAL_TIM_PWM_Stop_IT(&htim2,TIM_CHANNEL_4);
 800086e:	210c      	movs	r1, #12
 8000870:	4806      	ldr	r0, [pc, #24]	; (800088c <playTheSong+0x38>)
 8000872:	f004 fa87 	bl	8004d84 <HAL_TIM_PWM_Stop_IT>
		HAL_Delay(100);
 8000876:	2064      	movs	r0, #100	; 0x64
 8000878:	f000 fd46 	bl	8001308 <HAL_Delay>
		HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_4);
 800087c:	210c      	movs	r1, #12
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <playTheSong+0x38>)
 8000880:	f004 f926 	bl	8004ad0 <HAL_TIM_PWM_Start_IT>
	}
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	240000ec 	.word	0x240000ec

08000890 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef *htim){
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	 if (htim == &htim2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d11e      	bne.n	80008de <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
	 {
		 // The following function is used for calibrate
		  setToCenter();
 80008a0:	f7ff fe98 	bl	80005d4 <setToCenter>
		 // accelerationProcess(maxPulses);

		 // PLAYING MUSIC CODE
		  // HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_4);
		 // If I press the user button here, it begins running
		 playTheSong(noteFrequencies[curNoteIndex]); // Play the current note
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 80008aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ffd0 	bl	8000854 <playTheSong>
		 // curNoteIndex++;	// Increase the note index

		 // If it already reach the limit, reset all the values.
		 if(curNoteIndex == noteSize){
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d109      	bne.n	80008d4 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
			curNoteIndex = 0;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
			isPressed = 0;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop_IT(&htim2,TIM_CHANNEL_4);
 80008cc:	210c      	movs	r1, #12
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80008d0:	f004 fa58 	bl	8004d84 <HAL_TIM_PWM_Stop_IT>
		 }

		 lastTime = HAL_GetTick();
 80008d4:	f000 fd0c 	bl	80012f0 <HAL_GetTick>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 80008dc:	6013      	str	r3, [r2, #0]
	 }
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	240000ec 	.word	0x240000ec
 80008ec:	24061c64 	.word	0x24061c64
 80008f0:	24000014 	.word	0x24000014
 80008f4:	240000bc 	.word	0x240000bc
 80008f8:	24061c60 	.word	0x24061c60
 80008fc:	240001d8 	.word	0x240001d8

08000900 <HAL_GPIO_EXTI_Callback>:

//int a = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13){
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000910:	d102      	bne.n	8000918 <HAL_GPIO_EXTI_Callback+0x18>
//        // Simple software debouncing: check if the button is still pressed after a delay
//      HAL_Delay(50); // 50 ms for debouncing delay
        isPressed = 1;
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <HAL_GPIO_EXTI_Callback+0x24>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
//		curNoteIndex = 0;
//      HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_4);
    }
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	24061c60 	.word	0x24061c60

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f000 fc59 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f887 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f000 f9b1 	bl	8000c9c <MX_GPIO_Init>
  MX_TIM2_Init();
 800093a:	f000 f8ed 	bl	8000b18 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800093e:	f000 f961 	bl	8000c04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000948:	4835      	ldr	r0, [pc, #212]	; (8000a20 <main+0xf8>)
 800094a:	f000 ffe5 	bl	8001918 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000954:	4833      	ldr	r0, [pc, #204]	; (8000a24 <main+0xfc>)
 8000956:	f000 ffdf 	bl	8001918 <HAL_GPIO_WritePin>

  // Maximum: 12000, minimum: 60000
   uint16_t period = 60000;
 800095a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800095e:	80fb      	strh	r3, [r7, #6]
   TIM2->ARR = period; // first period
 8000960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	62d3      	str	r3, [r2, #44]	; 0x2c
   TIM2->CCR4 = period / 2; // first duty cycle (50%)
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	085b      	lsrs	r3, r3, #1
 800096c:	b29a      	uxth	r2, r3
 800096e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000972:	641a      	str	r2, [r3, #64]	; 0x40
   HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097a:	482b      	ldr	r0, [pc, #172]	; (8000a28 <main+0x100>)
 800097c:	f000 ffcc 	bl	8001918 <HAL_GPIO_WritePin>
   HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_4);
 8000980:	210c      	movs	r1, #12
 8000982:	482a      	ldr	r0, [pc, #168]	; (8000a2c <main+0x104>)
 8000984:	f004 f8a4 	bl	8004ad0 <HAL_TIM_PWM_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t leftState = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11);
 8000988:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800098c:	4828      	ldr	r0, [pc, #160]	; (8000a30 <main+0x108>)
 800098e:	f000 ffab 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000992:	4603      	mov	r3, r0
 8000994:	717b      	strb	r3, [r7, #5]
	  uint8_t rightState = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3);
 8000996:	2108      	movs	r1, #8
 8000998:	4826      	ldr	r0, [pc, #152]	; (8000a34 <main+0x10c>)
 800099a:	f000 ffa5 	bl	80018e8 <HAL_GPIO_ReadPin>
 800099e:	4603      	mov	r3, r0
 80009a0:	713b      	strb	r3, [r7, #4]

	  if(!leftState || !rightState){
 80009a2:	797b      	ldrb	r3, [r7, #5]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <main+0x86>
 80009a8:	793b      	ldrb	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d134      	bne.n	8000a18 <main+0xf0>
		  // Increase the count of current loop
		  loop_num++;
 80009ae:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <main+0x110>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <main+0x110>)
 80009b8:	701a      	strb	r2, [r3, #0]
		  if(loop_num == 2)	total_pulses = pulseCount / 2;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <main+0x110>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d104      	bne.n	80009cc <main+0xa4>
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <main+0x114>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	085b      	lsrs	r3, r3, #1
 80009c8:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <main+0x118>)
 80009ca:	6013      	str	r3, [r2, #0]
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4); // Stop PWM
 80009cc:	210c      	movs	r1, #12
 80009ce:	4817      	ldr	r0, [pc, #92]	; (8000a2c <main+0x104>)
 80009d0:	f003 ffe8 	bl	80049a4 <HAL_TIM_PWM_Stop>

		  GPIO_PinState curDirection = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10);
 80009d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d8:	4812      	ldr	r0, [pc, #72]	; (8000a24 <main+0xfc>)
 80009da:	f000 ff85 	bl	80018e8 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	70fb      	strb	r3, [r7, #3]
		  GPIO_PinState newDirection = (curDirection == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 80009e2:	78fb      	ldrb	r3, [r7, #3]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	bf14      	ite	ne
 80009e8:	2301      	movne	r3, #1
 80009ea:	2300      	moveq	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	70bb      	strb	r3, [r7, #2]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, newDirection);
 80009f0:	78bb      	ldrb	r3, [r7, #2]
 80009f2:	461a      	mov	r2, r3
 80009f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f8:	480a      	ldr	r0, [pc, #40]	; (8000a24 <main+0xfc>)
 80009fa:	f000 ff8d 	bl	8001918 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80009fe:	2064      	movs	r0, #100	; 0x64
 8000a00:	f000 fc82 	bl	8001308 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a0a:	4807      	ldr	r0, [pc, #28]	; (8000a28 <main+0x100>)
 8000a0c:	f000 ff84 	bl	8001918 <HAL_GPIO_WritePin>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000a10:	210c      	movs	r1, #12
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <main+0x104>)
 8000a14:	f003 feb8 	bl	8004788 <HAL_TIM_PWM_Start>
	 }
	HAL_Delay(200);
 8000a18:	20c8      	movs	r0, #200	; 0xc8
 8000a1a:	f000 fc75 	bl	8001308 <HAL_Delay>
  {
 8000a1e:	e7b3      	b.n	8000988 <main+0x60>
 8000a20:	58020800 	.word	0x58020800
 8000a24:	58020c00 	.word	0x58020c00
 8000a28:	58021800 	.word	0x58021800
 8000a2c:	240000ec 	.word	0x240000ec
 8000a30:	58021000 	.word	0x58021000
 8000a34:	58021400 	.word	0x58021400
 8000a38:	240001d4 	.word	0x240001d4
 8000a3c:	240001d0 	.word	0x240001d0
 8000a40:	240001cc 	.word	0x240001cc

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b09c      	sub	sp, #112	; 0x70
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	224c      	movs	r2, #76	; 0x4c
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f006 fb7e 	bl	8007154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2220      	movs	r2, #32
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f006 fb78 	bl	8007154 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a64:	2002      	movs	r0, #2
 8000a66:	f000 ff8b 	bl	8001980 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a72:	4a27      	ldr	r2, [pc, #156]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a74:	f023 0301 	bic.w	r3, r3, #1
 8000a78:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a7a:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a8c:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa0:	bf00      	nop
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <SystemClock_Config+0xd0>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aae:	d1f8      	bne.n	8000aa2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab8:	2340      	movs	r3, #64	; 0x40
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 ff95 	bl	80019f4 <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ad0:	f000 f9b2 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad4:	233f      	movs	r3, #63	; 0x3f
 8000ad6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ae8:	2340      	movs	r3, #64	; 0x40
 8000aea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2101      	movs	r1, #1
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 fbd5 	bl	80022a8 <HAL_RCC_ClockConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b04:	f000 f998 	bl	8000e38 <Error_Handler>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	3770      	adds	r7, #112	; 0x70
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	58000400 	.word	0x58000400
 8000b14:	58024800 	.word	0x58024800

08000b18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08e      	sub	sp, #56	; 0x38
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]
 8000b46:	615a      	str	r2, [r3, #20]
 8000b48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b52:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400 - 1;
 8000b5e:	4b28      	ldr	r3, [pc, #160]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b60:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000b64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b66:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b72:	4823      	ldr	r0, [pc, #140]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b74:	f003 fd50 	bl	8004618 <HAL_TIM_Base_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b7e:	f000 f95b 	bl	8000e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481c      	ldr	r0, [pc, #112]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b90:	f004 fbf8 	bl	8005384 <HAL_TIM_ConfigClockSource>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b9a:	f000 f94d 	bl	8000e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b9e:	4818      	ldr	r0, [pc, #96]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000ba0:	f003 fd91 	bl	80046c6 <HAL_TIM_PWM_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000baa:	f000 f945 	bl	8000e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4810      	ldr	r0, [pc, #64]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000bbe:	f005 f941 	bl	8005e44 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000bc8:	f000 f936 	bl	8000e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bcc:	2360      	movs	r3, #96	; 0x60
 8000bce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	220c      	movs	r2, #12
 8000be0:	4619      	mov	r1, r3
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000be4:	f004 faba 	bl	800515c <HAL_TIM_PWM_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000bee:	f000 f923 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000bf4:	f000 f966 	bl	8000ec4 <HAL_TIM_MspPostInit>

}
 8000bf8:	bf00      	nop
 8000bfa:	3738      	adds	r7, #56	; 0x38
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	240000ec 	.word	0x240000ec

08000c04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c0a:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <MX_USART3_UART_Init+0x94>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c4c:	4811      	ldr	r0, [pc, #68]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c4e:	f005 f9a5 	bl	8005f9c <HAL_UART_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c58:	f000 f8ee 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	480d      	ldr	r0, [pc, #52]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c60:	f006 f9ad 	bl	8006fbe <HAL_UARTEx_SetTxFifoThreshold>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c6a:	f000 f8e5 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4808      	ldr	r0, [pc, #32]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c72:	f006 f9e2 	bl	800703a <HAL_UARTEx_SetRxFifoThreshold>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c7c:	f000 f8dc 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_USART3_UART_Init+0x90>)
 8000c82:	f006 f963 	bl	8006f4c <HAL_UARTEx_DisableFifoMode>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c8c:	f000 f8d4 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	24000138 	.word	0x24000138
 8000c98:	40004800 	.word	0x40004800

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08c      	sub	sp, #48	; 0x30
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b5b      	ldr	r3, [pc, #364]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	4a59      	ldr	r2, [pc, #356]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc2:	4b57      	ldr	r3, [pc, #348]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
 8000cce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd0:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	4a52      	ldr	r2, [pc, #328]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000cd8:	f043 0320 	orr.w	r3, r3, #32
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce0:	4b4f      	ldr	r3, [pc, #316]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	f003 0320 	and.w	r3, r3, #32
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b4c      	ldr	r3, [pc, #304]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	4a4a      	ldr	r2, [pc, #296]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfe:	4b48      	ldr	r3, [pc, #288]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0c:	4b44      	ldr	r3, [pc, #272]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	4a43      	ldr	r2, [pc, #268]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000d14:	f043 0310 	orr.w	r3, r3, #16
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1c:	4b40      	ldr	r3, [pc, #256]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	4a3b      	ldr	r2, [pc, #236]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3a:	4b39      	ldr	r3, [pc, #228]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d48:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	4a34      	ldr	r2, [pc, #208]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d58:	4b31      	ldr	r3, [pc, #196]	; (8000e20 <MX_GPIO_Init+0x184>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6c:	482d      	ldr	r0, [pc, #180]	; (8000e24 <MX_GPIO_Init+0x188>)
 8000d6e:	f000 fdd3 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d78:	482b      	ldr	r0, [pc, #172]	; (8000e28 <MX_GPIO_Init+0x18c>)
 8000d7a:	f000 fdcd 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	4825      	ldr	r0, [pc, #148]	; (8000e2c <MX_GPIO_Init+0x190>)
 8000d96:	f000 fbf7 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000da2:	2302      	movs	r3, #2
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4820      	ldr	r0, [pc, #128]	; (8000e30 <MX_GPIO_Init+0x194>)
 8000dae:	f000 fbeb 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481b      	ldr	r0, [pc, #108]	; (8000e34 <MX_GPIO_Init+0x198>)
 8000dc8:	f000 fbde 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	480f      	ldr	r0, [pc, #60]	; (8000e24 <MX_GPIO_Init+0x188>)
 8000de6:	f000 fbcf 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4809      	ldr	r0, [pc, #36]	; (8000e28 <MX_GPIO_Init+0x18c>)
 8000e04:	f000 fbc0 	bl	8001588 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2028      	movs	r0, #40	; 0x28
 8000e0e:	f000 fb86 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e12:	2028      	movs	r0, #40	; 0x28
 8000e14:	f000 fb9d 	bl	8001552 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e18:	bf00      	nop
 8000e1a:	3730      	adds	r7, #48	; 0x30
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	58024400 	.word	0x58024400
 8000e24:	58020c00 	.word	0x58020c00
 8000e28:	58021800 	.word	0x58021800
 8000e2c:	58020800 	.word	0x58020800
 8000e30:	58021400 	.word	0x58021400
 8000e34:	58021000 	.word	0x58021000

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <Error_Handler+0x8>
	...

08000e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_MspInit+0x30>)
 8000e4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e50:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <HAL_MspInit+0x30>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_MspInit+0x30>)
 8000e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	58024400 	.word	0x58024400

08000e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e88:	d116      	bne.n	8000eb8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_TIM_Base_MspInit+0x48>)
 8000e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_TIM_Base_MspInit+0x48>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_TIM_Base_MspInit+0x48>)
 8000e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	201c      	movs	r0, #28
 8000eae:	f000 fb36 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eb2:	201c      	movs	r0, #28
 8000eb4:	f000 fb4d 	bl	8001552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	58024400 	.word	0x58024400

08000ec4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee4:	d11e      	bne.n	8000f24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_TIM_MspPostInit+0x68>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_TIM_MspPostInit+0x68>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_TIM_MspPostInit+0x68>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f04:	2308      	movs	r3, #8
 8000f06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4804      	ldr	r0, [pc, #16]	; (8000f30 <HAL_TIM_MspPostInit+0x6c>)
 8000f20:	f000 fb32 	bl	8001588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	58020000 	.word	0x58020000

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0ba      	sub	sp, #232	; 0xe8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	22c0      	movs	r2, #192	; 0xc0
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f006 f8fd 	bl	8007154 <memset>
  if(huart->Instance==USART3)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <HAL_UART_MspInit+0xc8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d146      	bne.n	8000ff2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f64:	f04f 0202 	mov.w	r2, #2
 8000f68:	f04f 0300 	mov.w	r3, #0
 8000f6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fd20 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f86:	f7ff ff57 	bl	8000e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <HAL_UART_MspInit+0xcc>)
 8000f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f90:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <HAL_UART_MspInit+0xcc>)
 8000f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_UART_MspInit+0xcc>)
 8000f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_UART_MspInit+0xcc>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fae:	4a14      	ldr	r2, [pc, #80]	; (8001000 <HAL_UART_MspInit+0xcc>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_UART_MspInit+0xcc>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <HAL_UART_MspInit+0xd0>)
 8000fee:	f000 facb 	bl	8001588 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	37e8      	adds	r7, #232	; 0xe8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40004800 	.word	0x40004800
 8001000:	58024400 	.word	0x58024400
 8001004:	58020c00 	.word	0x58020c00

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800100c:	e7fe      	b.n	800100c <NMI_Handler+0x4>

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 f938 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <TIM2_IRQHandler+0x10>)
 8001062:	f003 ff73 	bl	8004f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	240000ec 	.word	0x240000ec

08001070 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001074:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001078:	f000 fc67 	bl	800194a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001084:	4b37      	ldr	r3, [pc, #220]	; (8001164 <SystemInit+0xe4>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108a:	4a36      	ldr	r2, [pc, #216]	; (8001164 <SystemInit+0xe4>)
 800108c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001094:	4b34      	ldr	r3, [pc, #208]	; (8001168 <SystemInit+0xe8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	2b06      	cmp	r3, #6
 800109e:	d807      	bhi.n	80010b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <SystemInit+0xe8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f023 030f 	bic.w	r3, r3, #15
 80010a8:	4a2f      	ldr	r2, [pc, #188]	; (8001168 <SystemInit+0xe8>)
 80010aa:	f043 0307 	orr.w	r3, r3, #7
 80010ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010b0:	4b2e      	ldr	r3, [pc, #184]	; (800116c <SystemInit+0xec>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a2d      	ldr	r2, [pc, #180]	; (800116c <SystemInit+0xec>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <SystemInit+0xec>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <SystemInit+0xec>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4929      	ldr	r1, [pc, #164]	; (800116c <SystemInit+0xec>)
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <SystemInit+0xf0>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <SystemInit+0xe8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d007      	beq.n	80010ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <SystemInit+0xe8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 030f 	bic.w	r3, r3, #15
 80010e2:	4a21      	ldr	r2, [pc, #132]	; (8001168 <SystemInit+0xe8>)
 80010e4:	f043 0307 	orr.w	r3, r3, #7
 80010e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <SystemInit+0xec>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <SystemInit+0xec>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <SystemInit+0xec>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <SystemInit+0xec>)
 80010fe:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <SystemInit+0xf4>)
 8001100:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <SystemInit+0xec>)
 8001104:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <SystemInit+0xf8>)
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <SystemInit+0xec>)
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <SystemInit+0xfc>)
 800110c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <SystemInit+0xec>)
 8001110:	2200      	movs	r2, #0
 8001112:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <SystemInit+0xec>)
 8001116:	4a19      	ldr	r2, [pc, #100]	; (800117c <SystemInit+0xfc>)
 8001118:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <SystemInit+0xec>)
 800111c:	2200      	movs	r2, #0
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <SystemInit+0xec>)
 8001122:	4a16      	ldr	r2, [pc, #88]	; (800117c <SystemInit+0xfc>)
 8001124:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <SystemInit+0xec>)
 8001128:	2200      	movs	r2, #0
 800112a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <SystemInit+0xec>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <SystemInit+0xec>)
 8001132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001136:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <SystemInit+0xec>)
 800113a:	2200      	movs	r2, #0
 800113c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <SystemInit+0x100>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <SystemInit+0x104>)
 8001144:	4013      	ands	r3, r2
 8001146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800114a:	d202      	bcs.n	8001152 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <SystemInit+0x108>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <SystemInit+0x10c>)
 8001154:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001158:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00
 8001168:	52002000 	.word	0x52002000
 800116c:	58024400 	.word	0x58024400
 8001170:	eaf6ed7f 	.word	0xeaf6ed7f
 8001174:	02020200 	.word	0x02020200
 8001178:	01ff0000 	.word	0x01ff0000
 800117c:	01010280 	.word	0x01010280
 8001180:	5c001000 	.word	0x5c001000
 8001184:	ffff0000 	.word	0xffff0000
 8001188:	51008108 	.word	0x51008108
 800118c:	52004000 	.word	0x52004000

08001190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001194:	f7ff ff74 	bl	8001080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119a:	490d      	ldr	r1, [pc, #52]	; (80011d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b0:	4c0a      	ldr	r4, [pc, #40]	; (80011dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011be:	f005 ffd1 	bl	8007164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c2:	f7ff fbb1 	bl	8000928 <main>
  bx  lr
 80011c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011d0:	240000d0 	.word	0x240000d0
  ldr r2, =_sidata
 80011d4:	0800720c 	.word	0x0800720c
  ldr r2, =_sbss
 80011d8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80011dc:	24061c6c 	.word	0x24061c6c

080011e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <ADC3_IRQHandler>
	...

080011e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ea:	2003      	movs	r0, #3
 80011ec:	f000 f98c 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011f0:	f001 fa10 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_Init+0x68>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	4913      	ldr	r1, [pc, #76]	; (8001250 <HAL_Init+0x6c>)
 8001202:	5ccb      	ldrb	r3, [r1, r3]
 8001204:	f003 031f 	and.w	r3, r3, #31
 8001208:	fa22 f303 	lsr.w	r3, r2, r3
 800120c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <HAL_Init+0x68>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <HAL_Init+0x6c>)
 8001218:	5cd3      	ldrb	r3, [r2, r3]
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	fa22 f303 	lsr.w	r3, r2, r3
 8001224:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <HAL_Init+0x70>)
 8001226:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001228:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_Init+0x74>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122e:	200f      	movs	r0, #15
 8001230:	f000 f814 	bl	800125c <HAL_InitTick>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e002      	b.n	8001244 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800123e:	f7ff fe01 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	58024400 	.word	0x58024400
 8001250:	080071c4 	.word	0x080071c4
 8001254:	240000c4 	.word	0x240000c4
 8001258:	240000c0 	.word	0x240000c0

0800125c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_InitTick+0x60>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e021      	b.n	80012b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <HAL_InitTick+0x64>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_InitTick+0x60>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f971 	bl	800156e <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00e      	b.n	80012b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d80a      	bhi.n	80012b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f000 f93b 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <HAL_InitTick+0x68>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	240000cc 	.word	0x240000cc
 80012c0:	240000c0 	.word	0x240000c0
 80012c4:	240000c8 	.word	0x240000c8

080012c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	240000cc 	.word	0x240000cc
 80012ec:	24061c68 	.word	0x24061c68

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	24061c68 	.word	0x24061c68

08001308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff ffee 	bl	80012f0 <HAL_GetTick>
 8001314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_Delay+0x44>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132e:	bf00      	nop
 8001330:	f7ff ffde 	bl	80012f0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	240000cc 	.word	0x240000cc

08001350 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetREVID+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0c1b      	lsrs	r3, r3, #16
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	5c001000 	.word	0x5c001000

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <__NVIC_SetPriorityGrouping+0x40>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	4313      	orrs	r3, r2
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	05fa0000 	.word	0x05fa0000

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db0b      	blt.n	80013f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	f003 021f 	and.w	r2, r3, #31
 80013e4:	4907      	ldr	r1, [pc, #28]	; (8001404 <__NVIC_EnableIRQ+0x38>)
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	2001      	movs	r0, #1
 80013ee:	fa00 f202 	lsl.w	r2, r0, r2
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff8e 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff29 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800152c:	f7ff ff40 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 8001530:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7ff ff90 	bl	800145c <NVIC_EncodePriority>
 800153c:	4602      	mov	r2, r0
 800153e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff5f 	bl	8001408 <__NVIC_SetPriority>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff33 	bl	80013cc <__NVIC_EnableIRQ>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffa4 	bl	80014c4 <SysTick_Config>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001596:	4b89      	ldr	r3, [pc, #548]	; (80017bc <HAL_GPIO_Init+0x234>)
 8001598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800159a:	e194      	b.n	80018c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8186 	beq.w	80018c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d005      	beq.n	80015cc <HAL_GPIO_Init+0x44>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d130      	bne.n	800162e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001602:	2201      	movs	r2, #1
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	f003 0201 	and.w	r2, r3, #1
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b03      	cmp	r3, #3
 8001638:	d017      	beq.n	800166a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	2203      	movs	r2, #3
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d123      	bne.n	80016be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	08da      	lsrs	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3208      	adds	r2, #8
 800167e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	08da      	lsrs	r2, r3, #3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3208      	adds	r2, #8
 80016b8:	69b9      	ldr	r1, [r7, #24]
 80016ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0203 	and.w	r2, r3, #3
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80e0 	beq.w	80018c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001700:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_GPIO_Init+0x238>)
 8001702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001706:	4a2e      	ldr	r2, [pc, #184]	; (80017c0 <HAL_GPIO_Init+0x238>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_GPIO_Init+0x238>)
 8001712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800171e:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <HAL_GPIO_Init+0x23c>)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	3302      	adds	r3, #2
 8001726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	220f      	movs	r2, #15
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a20      	ldr	r2, [pc, #128]	; (80017c8 <HAL_GPIO_Init+0x240>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d052      	beq.n	80017f0 <HAL_GPIO_Init+0x268>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <HAL_GPIO_Init+0x244>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d031      	beq.n	80017b6 <HAL_GPIO_Init+0x22e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a1e      	ldr	r2, [pc, #120]	; (80017d0 <HAL_GPIO_Init+0x248>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d02b      	beq.n	80017b2 <HAL_GPIO_Init+0x22a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <HAL_GPIO_Init+0x24c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d025      	beq.n	80017ae <HAL_GPIO_Init+0x226>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <HAL_GPIO_Init+0x250>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d01f      	beq.n	80017aa <HAL_GPIO_Init+0x222>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <HAL_GPIO_Init+0x254>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d019      	beq.n	80017a6 <HAL_GPIO_Init+0x21e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a1a      	ldr	r2, [pc, #104]	; (80017e0 <HAL_GPIO_Init+0x258>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0x21a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_GPIO_Init+0x25c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00d      	beq.n	800179e <HAL_GPIO_Init+0x216>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <HAL_GPIO_Init+0x260>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d007      	beq.n	800179a <HAL_GPIO_Init+0x212>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_GPIO_Init+0x264>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d101      	bne.n	8001796 <HAL_GPIO_Init+0x20e>
 8001792:	2309      	movs	r3, #9
 8001794:	e02d      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 8001796:	230a      	movs	r3, #10
 8001798:	e02b      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 800179a:	2308      	movs	r3, #8
 800179c:	e029      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 800179e:	2307      	movs	r3, #7
 80017a0:	e027      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017a2:	2306      	movs	r3, #6
 80017a4:	e025      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017a6:	2305      	movs	r3, #5
 80017a8:	e023      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e021      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e01f      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e01d      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e01b      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017ba:	bf00      	nop
 80017bc:	58000080 	.word	0x58000080
 80017c0:	58024400 	.word	0x58024400
 80017c4:	58000400 	.word	0x58000400
 80017c8:	58020000 	.word	0x58020000
 80017cc:	58020400 	.word	0x58020400
 80017d0:	58020800 	.word	0x58020800
 80017d4:	58020c00 	.word	0x58020c00
 80017d8:	58021000 	.word	0x58021000
 80017dc:	58021400 	.word	0x58021400
 80017e0:	58021800 	.word	0x58021800
 80017e4:	58021c00 	.word	0x58021c00
 80017e8:	58022000 	.word	0x58022000
 80017ec:	58022400 	.word	0x58022400
 80017f0:	2300      	movs	r3, #0
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	f002 0203 	and.w	r2, r2, #3
 80017f8:	0092      	lsls	r2, r2, #2
 80017fa:	4093      	lsls	r3, r2
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001802:	4938      	ldr	r1, [pc, #224]	; (80018e4 <HAL_GPIO_Init+0x35c>)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	3301      	adds	r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f47f ae63 	bne.w	800159c <HAL_GPIO_Init+0x14>
  }
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	3724      	adds	r7, #36	; 0x24
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	58000400 	.word	0x58000400

080018e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	887b      	ldrh	r3, [r7, #2]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e001      	b.n	800190a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001934:	e003      	b.n	800193e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001958:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001964:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe ffc5 	bl	8000900 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_PWREx_ConfigSupply+0x70>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b04      	cmp	r3, #4
 8001992:	d00a      	beq.n	80019aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HAL_PWREx_ConfigSupply+0x70>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d001      	beq.n	80019a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e01f      	b.n	80019e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e01d      	b.n	80019e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_PWREx_ConfigSupply+0x70>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f023 0207 	bic.w	r2, r3, #7
 80019b2:	490f      	ldr	r1, [pc, #60]	; (80019f0 <HAL_PWREx_ConfigSupply+0x70>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019ba:	f7ff fc99 	bl	80012f0 <HAL_GetTick>
 80019be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019c0:	e009      	b.n	80019d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019c2:	f7ff fc95 	bl	80012f0 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019d0:	d901      	bls.n	80019d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e007      	b.n	80019e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_PWREx_ConfigSupply+0x70>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e2:	d1ee      	bne.n	80019c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	58024800 	.word	0x58024800

080019f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	; 0x30
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f000 bc48 	b.w	8002298 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 8088 	beq.w	8001b26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a16:	4b99      	ldr	r3, [pc, #612]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a20:	4b96      	ldr	r3, [pc, #600]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a28:	2b10      	cmp	r3, #16
 8001a2a:	d007      	beq.n	8001a3c <HAL_RCC_OscConfig+0x48>
 8001a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2e:	2b18      	cmp	r3, #24
 8001a30:	d111      	bne.n	8001a56 <HAL_RCC_OscConfig+0x62>
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3c:	4b8f      	ldr	r3, [pc, #572]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d06d      	beq.n	8001b24 <HAL_RCC_OscConfig+0x130>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d169      	bne.n	8001b24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	f000 bc21 	b.w	8002298 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5e:	d106      	bne.n	8001a6e <HAL_RCC_OscConfig+0x7a>
 8001a60:	4b86      	ldr	r3, [pc, #536]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a85      	ldr	r2, [pc, #532]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	e02e      	b.n	8001acc <HAL_RCC_OscConfig+0xd8>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x9c>
 8001a76:	4b81      	ldr	r3, [pc, #516]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a80      	ldr	r2, [pc, #512]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b7e      	ldr	r3, [pc, #504]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a7d      	ldr	r2, [pc, #500]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e01d      	b.n	8001acc <HAL_RCC_OscConfig+0xd8>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0xc0>
 8001a9a:	4b78      	ldr	r3, [pc, #480]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a77      	ldr	r2, [pc, #476]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b75      	ldr	r3, [pc, #468]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a74      	ldr	r2, [pc, #464]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e00b      	b.n	8001acc <HAL_RCC_OscConfig+0xd8>
 8001ab4:	4b71      	ldr	r3, [pc, #452]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a70      	ldr	r2, [pc, #448]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b6e      	ldr	r3, [pc, #440]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a6d      	ldr	r2, [pc, #436]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d013      	beq.n	8001afc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fc0c 	bl	80012f0 <HAL_GetTick>
 8001ad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001adc:	f7ff fc08 	bl	80012f0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e3d4      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aee:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0xe8>
 8001afa:	e014      	b.n	8001b26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff fbf8 	bl	80012f0 <HAL_GetTick>
 8001b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff fbf4 	bl	80012f0 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	; 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e3c0      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b16:	4b59      	ldr	r3, [pc, #356]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x110>
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80ca 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b34:	4b51      	ldr	r3, [pc, #324]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b3e:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_RCC_OscConfig+0x166>
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	2b18      	cmp	r3, #24
 8001b4e:	d156      	bne.n	8001bfe <HAL_RCC_OscConfig+0x20a>
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d151      	bne.n	8001bfe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b5a:	4b48      	ldr	r3, [pc, #288]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x17e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e392      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b72:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 0219 	bic.w	r2, r3, #25
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	493f      	ldr	r1, [pc, #252]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff fbb4 	bl	80012f0 <HAL_GetTick>
 8001b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fbb0 	bl	80012f0 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e37c      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b9e:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001baa:	f7ff fbd1 	bl	8001350 <HAL_GetREVID>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d817      	bhi.n	8001be8 <HAL_RCC_OscConfig+0x1f4>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	2b40      	cmp	r3, #64	; 0x40
 8001bbe:	d108      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x1de>
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001bc8:	4a2c      	ldr	r2, [pc, #176]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd0:	e07a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	031b      	lsls	r3, r3, #12
 8001be0:	4926      	ldr	r1, [pc, #152]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001be6:	e06f      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	061b      	lsls	r3, r3, #24
 8001bf6:	4921      	ldr	r1, [pc, #132]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bfc:	e064      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d047      	beq.n	8001c96 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0219 	bic.w	r2, r3, #25
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	491a      	ldr	r1, [pc, #104]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff fb6a 	bl	80012f0 <HAL_GetTick>
 8001c1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c20:	f7ff fb66 	bl	80012f0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e332      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	f7ff fb87 	bl	8001350 <HAL_GetREVID>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d819      	bhi.n	8001c80 <HAL_RCC_OscConfig+0x28c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b40      	cmp	r3, #64	; 0x40
 8001c52:	d108      	bne.n	8001c66 <HAL_RCC_OscConfig+0x272>
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c62:	6053      	str	r3, [r2, #4]
 8001c64:	e030      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2d4>
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	031b      	lsls	r3, r3, #12
 8001c74:	4901      	ldr	r1, [pc, #4]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
 8001c7a:	e025      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2d4>
 8001c7c:	58024400 	.word	0x58024400
 8001c80:	4b9a      	ldr	r3, [pc, #616]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	061b      	lsls	r3, r3, #24
 8001c8e:	4997      	ldr	r1, [pc, #604]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
 8001c94:	e018      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c96:	4b95      	ldr	r3, [pc, #596]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a94      	ldr	r2, [pc, #592]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fb25 	bl	80012f0 <HAL_GetTick>
 8001ca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001caa:	f7ff fb21 	bl	80012f0 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e2ed      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cbc:	4b8b      	ldr	r3, [pc, #556]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a9 	beq.w	8001e28 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4b85      	ldr	r3, [pc, #532]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cde:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ce0:	4b82      	ldr	r3, [pc, #520]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d007      	beq.n	8001cfc <HAL_RCC_OscConfig+0x308>
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b18      	cmp	r3, #24
 8001cf0:	d13a      	bne.n	8001d68 <HAL_RCC_OscConfig+0x374>
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d135      	bne.n	8001d68 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cfc:	4b7b      	ldr	r3, [pc, #492]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_OscConfig+0x320>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b80      	cmp	r3, #128	; 0x80
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e2c1      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d14:	f7ff fb1c 	bl	8001350 <HAL_GetREVID>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d817      	bhi.n	8001d52 <HAL_RCC_OscConfig+0x35e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	2b20      	cmp	r3, #32
 8001d28:	d108      	bne.n	8001d3c <HAL_RCC_OscConfig+0x348>
 8001d2a:	4b70      	ldr	r3, [pc, #448]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d32:	4a6e      	ldr	r2, [pc, #440]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001d34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d38:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d3a:	e075      	b.n	8001e28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d3c:	4b6b      	ldr	r3, [pc, #428]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	069b      	lsls	r3, r3, #26
 8001d4a:	4968      	ldr	r1, [pc, #416]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d50:	e06a      	b.n	8001e28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d52:	4b66      	ldr	r3, [pc, #408]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	061b      	lsls	r3, r3, #24
 8001d60:	4962      	ldr	r1, [pc, #392]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d66:	e05f      	b.n	8001e28 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d042      	beq.n	8001df6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d70:	4b5e      	ldr	r3, [pc, #376]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a5d      	ldr	r2, [pc, #372]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fab8 	bl	80012f0 <HAL_GetTick>
 8001d80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d84:	f7ff fab4 	bl	80012f0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e280      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d96:	4b55      	ldr	r3, [pc, #340]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001da2:	f7ff fad5 	bl	8001350 <HAL_GetREVID>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d817      	bhi.n	8001de0 <HAL_RCC_OscConfig+0x3ec>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d108      	bne.n	8001dca <HAL_RCC_OscConfig+0x3d6>
 8001db8:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001dc0:	4a4a      	ldr	r2, [pc, #296]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001dc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001dc6:	6053      	str	r3, [r2, #4]
 8001dc8:	e02e      	b.n	8001e28 <HAL_RCC_OscConfig+0x434>
 8001dca:	4b48      	ldr	r3, [pc, #288]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	069b      	lsls	r3, r3, #26
 8001dd8:	4944      	ldr	r1, [pc, #272]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
 8001dde:	e023      	b.n	8001e28 <HAL_RCC_OscConfig+0x434>
 8001de0:	4b42      	ldr	r3, [pc, #264]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	493f      	ldr	r1, [pc, #252]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60cb      	str	r3, [r1, #12]
 8001df4:	e018      	b.n	8001e28 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001df6:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a3c      	ldr	r2, [pc, #240]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7ff fa75 	bl	80012f0 <HAL_GetTick>
 8001e06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fa71 	bl	80012f0 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e23d      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e1c:	4b33      	ldr	r3, [pc, #204]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d036      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d019      	beq.n	8001e70 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e40:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7ff fa52 	bl	80012f0 <HAL_GetTick>
 8001e4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e50:	f7ff fa4e 	bl	80012f0 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e21a      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e62:	4b22      	ldr	r3, [pc, #136]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x45c>
 8001e6e:	e018      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e70:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e74:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7ff fa38 	bl	80012f0 <HAL_GetTick>
 8001e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e84:	f7ff fa34 	bl	80012f0 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e200      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d039      	beq.n	8001f22 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01c      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ec0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff fa15 	bl	80012f0 <HAL_GetTick>
 8001ec6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eca:	f7ff fa11 	bl	80012f0 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e1dd      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_RCC_OscConfig+0x4f8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x4d6>
 8001ee8:	e01b      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
 8001eea:	bf00      	nop
 8001eec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ef0:	4b9b      	ldr	r3, [pc, #620]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a9a      	ldr	r2, [pc, #616]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001ef6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001efc:	f7ff f9f8 	bl	80012f0 <HAL_GetTick>
 8001f00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f04:	f7ff f9f4 	bl	80012f0 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1c0      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f16:	4b92      	ldr	r3, [pc, #584]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8081 	beq.w	8002032 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f30:	4b8c      	ldr	r3, [pc, #560]	; (8002164 <HAL_RCC_OscConfig+0x770>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a8b      	ldr	r2, [pc, #556]	; (8002164 <HAL_RCC_OscConfig+0x770>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f3c:	f7ff f9d8 	bl	80012f0 <HAL_GetTick>
 8001f40:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f44:	f7ff f9d4 	bl	80012f0 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1a0      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f56:	4b83      	ldr	r3, [pc, #524]	; (8002164 <HAL_RCC_OscConfig+0x770>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d106      	bne.n	8001f78 <HAL_RCC_OscConfig+0x584>
 8001f6a:	4b7d      	ldr	r3, [pc, #500]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	4a7c      	ldr	r2, [pc, #496]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6713      	str	r3, [r2, #112]	; 0x70
 8001f76:	e02d      	b.n	8001fd4 <HAL_RCC_OscConfig+0x5e0>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10c      	bne.n	8001f9a <HAL_RCC_OscConfig+0x5a6>
 8001f80:	4b77      	ldr	r3, [pc, #476]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	4a76      	ldr	r2, [pc, #472]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8c:	4b74      	ldr	r3, [pc, #464]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	4a73      	ldr	r2, [pc, #460]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001f92:	f023 0304 	bic.w	r3, r3, #4
 8001f96:	6713      	str	r3, [r2, #112]	; 0x70
 8001f98:	e01c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x5e0>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x5c8>
 8001fa2:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa6:	4a6e      	ldr	r2, [pc, #440]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	6713      	str	r3, [r2, #112]	; 0x70
 8001fae:	4b6c      	ldr	r3, [pc, #432]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	4a6b      	ldr	r2, [pc, #428]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCC_OscConfig+0x5e0>
 8001fbc:	4b68      	ldr	r3, [pc, #416]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	4a67      	ldr	r2, [pc, #412]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc8:	4b65      	ldr	r3, [pc, #404]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	4a64      	ldr	r2, [pc, #400]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001fce:	f023 0304 	bic.w	r3, r3, #4
 8001fd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d015      	beq.n	8002008 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fdc:	f7ff f988 	bl	80012f0 <HAL_GetTick>
 8001fe0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe4:	f7ff f984 	bl	80012f0 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e14e      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ffa:	4b59      	ldr	r3, [pc, #356]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0ee      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x5f0>
 8002006:	e014      	b.n	8002032 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff f972 	bl	80012f0 <HAL_GetTick>
 800200c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800200e:	e00a      	b.n	8002026 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002010:	f7ff f96e 	bl	80012f0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e138      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002026:	4b4e      	ldr	r3, [pc, #312]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1ee      	bne.n	8002010 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 812d 	beq.w	8002296 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800203c:	4b48      	ldr	r3, [pc, #288]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002044:	2b18      	cmp	r3, #24
 8002046:	f000 80bd 	beq.w	80021c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	2b02      	cmp	r3, #2
 8002050:	f040 809e 	bne.w	8002190 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002054:	4b42      	ldr	r3, [pc, #264]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a41      	ldr	r2, [pc, #260]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 800205a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800205e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff f946 	bl	80012f0 <HAL_GetTick>
 8002064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002068:	f7ff f942 	bl	80012f0 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e10e      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800207a:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002086:	4b36      	ldr	r3, [pc, #216]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8002088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800208a:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_RCC_OscConfig+0x774>)
 800208c:	4013      	ands	r3, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002096:	0112      	lsls	r2, r2, #4
 8002098:	430a      	orrs	r2, r1
 800209a:	4931      	ldr	r1, [pc, #196]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 800209c:	4313      	orrs	r3, r2
 800209e:	628b      	str	r3, [r1, #40]	; 0x28
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	3b01      	subs	r3, #1
 80020a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ae:	3b01      	subs	r3, #1
 80020b0:	025b      	lsls	r3, r3, #9
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	3b01      	subs	r3, #1
 80020bc:	041b      	lsls	r3, r3, #16
 80020be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c8:	3b01      	subs	r3, #1
 80020ca:	061b      	lsls	r3, r3, #24
 80020cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80020d0:	4923      	ldr	r1, [pc, #140]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	4a21      	ldr	r2, [pc, #132]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020e2:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 80020e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e6:	4b21      	ldr	r3, [pc, #132]	; (800216c <HAL_RCC_OscConfig+0x778>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020ee:	00d2      	lsls	r2, r2, #3
 80020f0:	491b      	ldr	r1, [pc, #108]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	f023 020c 	bic.w	r2, r3, #12
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4917      	ldr	r1, [pc, #92]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8002104:	4313      	orrs	r3, r2
 8002106:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002108:	4b15      	ldr	r3, [pc, #84]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	f023 0202 	bic.w	r2, r3, #2
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002114:	4912      	ldr	r1, [pc, #72]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8002116:	4313      	orrs	r3, r2
 8002118:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	4a10      	ldr	r2, [pc, #64]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 800212c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	4a07      	ldr	r2, [pc, #28]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_RCC_OscConfig+0x76c>)
 8002150:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7ff f8cb 	bl	80012f0 <HAL_GetTick>
 800215a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800215c:	e011      	b.n	8002182 <HAL_RCC_OscConfig+0x78e>
 800215e:	bf00      	nop
 8002160:	58024400 	.word	0x58024400
 8002164:	58024800 	.word	0x58024800
 8002168:	fffffc0c 	.word	0xfffffc0c
 800216c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f8be 	bl	80012f0 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e08a      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002182:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_OscConfig+0x8ac>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x77c>
 800218e:	e082      	b.n	8002296 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002190:	4b43      	ldr	r3, [pc, #268]	; (80022a0 <HAL_RCC_OscConfig+0x8ac>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a42      	ldr	r2, [pc, #264]	; (80022a0 <HAL_RCC_OscConfig+0x8ac>)
 8002196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800219a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff f8a8 	bl	80012f0 <HAL_GetTick>
 80021a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7ff f8a4 	bl	80012f0 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e070      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021b6:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <HAL_RCC_OscConfig+0x8ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x7b0>
 80021c2:	e068      	b.n	8002296 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <HAL_RCC_OscConfig+0x8ac>)
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021ca:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <HAL_RCC_OscConfig+0x8ac>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d031      	beq.n	800223c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f003 0203 	and.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d12a      	bne.n	800223c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d122      	bne.n	800223c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d11a      	bne.n	800223c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	0a5b      	lsrs	r3, r3, #9
 800220a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d111      	bne.n	800223c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	0c1b      	lsrs	r3, r3, #16
 800221c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002224:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d108      	bne.n	800223c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	0e1b      	lsrs	r3, r3, #24
 800222e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002236:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e02b      	b.n	8002298 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_RCC_OscConfig+0x8ac>)
 8002242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002244:	08db      	lsrs	r3, r3, #3
 8002246:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800224a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	429a      	cmp	r2, r3
 8002254:	d01f      	beq.n	8002296 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_OscConfig+0x8ac>)
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_RCC_OscConfig+0x8ac>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002262:	f7ff f845 	bl	80012f0 <HAL_GetTick>
 8002266:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002268:	bf00      	nop
 800226a:	f7ff f841 	bl	80012f0 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	4293      	cmp	r3, r2
 8002274:	d0f9      	beq.n	800226a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_RCC_OscConfig+0x8ac>)
 8002278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_RCC_OscConfig+0x8b0>)
 800227c:	4013      	ands	r3, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002282:	00d2      	lsls	r2, r2, #3
 8002284:	4906      	ldr	r1, [pc, #24]	; (80022a0 <HAL_RCC_OscConfig+0x8ac>)
 8002286:	4313      	orrs	r3, r2
 8002288:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_OscConfig+0x8ac>)
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <HAL_RCC_OscConfig+0x8ac>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3730      	adds	r7, #48	; 0x30
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	58024400 	.word	0x58024400
 80022a4:	ffff0007 	.word	0xffff0007

080022a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e19c      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b8a      	ldr	r3, [pc, #552]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d910      	bls.n	80022ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b87      	ldr	r3, [pc, #540]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 020f 	bic.w	r2, r3, #15
 80022d2:	4985      	ldr	r1, [pc, #532]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b83      	ldr	r3, [pc, #524]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e184      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d010      	beq.n	800231a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002304:	429a      	cmp	r2, r3
 8002306:	d908      	bls.n	800231a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002308:	4b78      	ldr	r3, [pc, #480]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	4975      	ldr	r1, [pc, #468]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002316:	4313      	orrs	r3, r2
 8002318:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d010      	beq.n	8002348 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	4b70      	ldr	r3, [pc, #448]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002332:	429a      	cmp	r2, r3
 8002334:	d908      	bls.n	8002348 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002336:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	496a      	ldr	r1, [pc, #424]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002344:	4313      	orrs	r3, r2
 8002346:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	4b64      	ldr	r3, [pc, #400]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002360:	429a      	cmp	r2, r3
 8002362:	d908      	bls.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002364:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	495e      	ldr	r1, [pc, #376]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002372:	4313      	orrs	r3, r2
 8002374:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d010      	beq.n	80023a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	4b59      	ldr	r3, [pc, #356]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800238e:	429a      	cmp	r2, r3
 8002390:	d908      	bls.n	80023a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002392:	4b56      	ldr	r3, [pc, #344]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4953      	ldr	r1, [pc, #332]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d010      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	429a      	cmp	r2, r3
 80023be:	d908      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c0:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f023 020f 	bic.w	r2, r3, #15
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4947      	ldr	r1, [pc, #284]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d055      	beq.n	800248a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023de:	4b43      	ldr	r3, [pc, #268]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4940      	ldr	r1, [pc, #256]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023f8:	4b3c      	ldr	r3, [pc, #240]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d121      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0f6      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d107      	bne.n	8002420 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002410:	4b36      	ldr	r3, [pc, #216]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d115      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0ea      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0de      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002438:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0d6      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002448:	4b28      	ldr	r3, [pc, #160]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f023 0207 	bic.w	r2, r3, #7
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4925      	ldr	r1, [pc, #148]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002456:	4313      	orrs	r3, r2
 8002458:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245a:	f7fe ff49 	bl	80012f0 <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002460:	e00a      	b.n	8002478 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002462:	f7fe ff45 	bl	80012f0 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0be      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	429a      	cmp	r2, r3
 8002488:	d1eb      	bne.n	8002462 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d010      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d208      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f023 020f 	bic.w	r2, r3, #15
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	490e      	ldr	r1, [pc, #56]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d214      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 020f 	bic.w	r2, r3, #15
 80024ce:	4906      	ldr	r1, [pc, #24]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e086      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
 80024e8:	52002000 	.word	0x52002000
 80024ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d010      	beq.n	800251e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	4b3f      	ldr	r3, [pc, #252]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002508:	429a      	cmp	r2, r3
 800250a:	d208      	bcs.n	800251e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800250c:	4b3c      	ldr	r3, [pc, #240]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	4939      	ldr	r1, [pc, #228]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800251a:	4313      	orrs	r3, r2
 800251c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d010      	beq.n	800254c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002536:	429a      	cmp	r2, r3
 8002538:	d208      	bcs.n	800254c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	492e      	ldr	r1, [pc, #184]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002548:	4313      	orrs	r3, r2
 800254a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	4b28      	ldr	r3, [pc, #160]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002564:	429a      	cmp	r2, r3
 8002566:	d208      	bcs.n	800257a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002568:	4b25      	ldr	r3, [pc, #148]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4922      	ldr	r1, [pc, #136]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002576:	4313      	orrs	r3, r2
 8002578:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b00      	cmp	r3, #0
 8002584:	d010      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002592:	429a      	cmp	r2, r3
 8002594:	d208      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4917      	ldr	r1, [pc, #92]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025a8:	f000 f834 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	4912      	ldr	r1, [pc, #72]	; (8002604 <HAL_RCC_ClockConfig+0x35c>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
 80025c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <HAL_RCC_ClockConfig+0x35c>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x360>)
 80025de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025e0:	4a0a      	ldr	r2, [pc, #40]	; (800260c <HAL_RCC_ClockConfig+0x364>)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_RCC_ClockConfig+0x368>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fe36 	bl	800125c <HAL_InitTick>
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	58024400 	.word	0x58024400
 8002604:	080071c4 	.word	0x080071c4
 8002608:	240000c4 	.word	0x240000c4
 800260c:	240000c0 	.word	0x240000c0
 8002610:	240000c8 	.word	0x240000c8

08002614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800261a:	4bb3      	ldr	r3, [pc, #716]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002622:	2b18      	cmp	r3, #24
 8002624:	f200 8155 	bhi.w	80028d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <HAL_RCC_GetSysClockFreq+0x1c>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002695 	.word	0x08002695
 8002634:	080028d3 	.word	0x080028d3
 8002638:	080028d3 	.word	0x080028d3
 800263c:	080028d3 	.word	0x080028d3
 8002640:	080028d3 	.word	0x080028d3
 8002644:	080028d3 	.word	0x080028d3
 8002648:	080028d3 	.word	0x080028d3
 800264c:	080028d3 	.word	0x080028d3
 8002650:	080026bb 	.word	0x080026bb
 8002654:	080028d3 	.word	0x080028d3
 8002658:	080028d3 	.word	0x080028d3
 800265c:	080028d3 	.word	0x080028d3
 8002660:	080028d3 	.word	0x080028d3
 8002664:	080028d3 	.word	0x080028d3
 8002668:	080028d3 	.word	0x080028d3
 800266c:	080028d3 	.word	0x080028d3
 8002670:	080026c1 	.word	0x080026c1
 8002674:	080028d3 	.word	0x080028d3
 8002678:	080028d3 	.word	0x080028d3
 800267c:	080028d3 	.word	0x080028d3
 8002680:	080028d3 	.word	0x080028d3
 8002684:	080028d3 	.word	0x080028d3
 8002688:	080028d3 	.word	0x080028d3
 800268c:	080028d3 	.word	0x080028d3
 8002690:	080026c7 	.word	0x080026c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002694:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d009      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026a0:	4b91      	ldr	r3, [pc, #580]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	4a90      	ldr	r2, [pc, #576]	; (80028ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80026b2:	e111      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026b4:	4b8d      	ldr	r3, [pc, #564]	; (80028ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026b6:	61bb      	str	r3, [r7, #24]
      break;
 80026b8:	e10e      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80026ba:	4b8d      	ldr	r3, [pc, #564]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026bc:	61bb      	str	r3, [r7, #24]
      break;
 80026be:	e10b      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80026c0:	4b8c      	ldr	r3, [pc, #560]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026c2:	61bb      	str	r3, [r7, #24]
      break;
 80026c4:	e108      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026c6:	4b88      	ldr	r3, [pc, #544]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80026d0:	4b85      	ldr	r3, [pc, #532]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026dc:	4b82      	ldr	r3, [pc, #520]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80026e6:	4b80      	ldr	r3, [pc, #512]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ea:	08db      	lsrs	r3, r3, #3
 80026ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80e1 	beq.w	80028cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b02      	cmp	r3, #2
 800270e:	f000 8083 	beq.w	8002818 <HAL_RCC_GetSysClockFreq+0x204>
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b02      	cmp	r3, #2
 8002716:	f200 80a1 	bhi.w	800285c <HAL_RCC_GetSysClockFreq+0x248>
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x114>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d056      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002726:	e099      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002728:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d02d      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002734:	4b6c      	ldr	r3, [pc, #432]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	08db      	lsrs	r3, r3, #3
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	4a6b      	ldr	r2, [pc, #428]	; (80028ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800275a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800275e:	4b62      	ldr	r3, [pc, #392]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800276e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002772:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800277a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800277e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800278e:	e087      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800279e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a2:	4b51      	ldr	r3, [pc, #324]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027d2:	e065      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002900 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800280a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002816:	e043      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002822:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002904 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800282a:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800283a:	ed97 6a02 	vldr	s12, [r7, #8]
 800283e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800284a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800284e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800285a:	e021      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002866:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002900 <HAL_RCC_GetSysClockFreq+0x2ec>
 800286a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800287e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002882:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800288a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800288e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800289e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	0a5b      	lsrs	r3, r3, #9
 80028a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028aa:	3301      	adds	r3, #1
 80028ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80028bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c4:	ee17 3a90 	vmov	r3, s15
 80028c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80028ca:	e005      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
      break;
 80028d0:	e002      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028d4:	61bb      	str	r3, [r7, #24]
      break;
 80028d6:	bf00      	nop
  }

  return sysclockfreq;
 80028d8:	69bb      	ldr	r3, [r7, #24]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	58024400 	.word	0x58024400
 80028ec:	03d09000 	.word	0x03d09000
 80028f0:	003d0900 	.word	0x003d0900
 80028f4:	017d7840 	.word	0x017d7840
 80028f8:	46000000 	.word	0x46000000
 80028fc:	4c742400 	.word	0x4c742400
 8002900:	4a742400 	.word	0x4a742400
 8002904:	4bbebc20 	.word	0x4bbebc20

08002908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800290e:	f7ff fe81 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_RCC_GetHCLKFreq+0x50>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	490f      	ldr	r1, [pc, #60]	; (800295c <HAL_RCC_GetHCLKFreq+0x54>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	fa22 f303 	lsr.w	r3, r2, r3
 800292a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_GetHCLKFreq+0x50>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_RCC_GetHCLKFreq+0x54>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	fa22 f303 	lsr.w	r3, r2, r3
 8002942:	4a07      	ldr	r2, [pc, #28]	; (8002960 <HAL_RCC_GetHCLKFreq+0x58>)
 8002944:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002946:	4a07      	ldr	r2, [pc, #28]	; (8002964 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <HAL_RCC_GetHCLKFreq+0x58>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	58024400 	.word	0x58024400
 800295c:	080071c4 	.word	0x080071c4
 8002960:	240000c4 	.word	0x240000c4
 8002964:	240000c0 	.word	0x240000c0

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800296c:	f7ff ffcc 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4904      	ldr	r1, [pc, #16]	; (8002990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	58024400 	.word	0x58024400
 8002990:	080071c4 	.word	0x080071c4

08002994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002998:	f7ff ffb6 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4904      	ldr	r1, [pc, #16]	; (80029bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	58024400 	.word	0x58024400
 80029bc:	080071c4 	.word	0x080071c4

080029c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c4:	b0ca      	sub	sp, #296	; 0x128
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80029e4:	2500      	movs	r5, #0
 80029e6:	ea54 0305 	orrs.w	r3, r4, r5
 80029ea:	d049      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80029ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029f6:	d02f      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80029f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029fc:	d828      	bhi.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a02:	d01a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a08:	d822      	bhi.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a12:	d007      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a14:	e01c      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a16:	4bb8      	ldr	r3, [pc, #736]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	4ab7      	ldr	r2, [pc, #732]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a22:	e01a      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a28:	3308      	adds	r3, #8
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 fc8f 	bl	8004350 <RCCEx_PLL2_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a38:	e00f      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a3e:	3328      	adds	r3, #40	; 0x28
 8002a40:	2102      	movs	r1, #2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 fd36 	bl	80044b4 <RCCEx_PLL3_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a4e:	e004      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a56:	e000      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10a      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a62:	4ba5      	ldr	r3, [pc, #660]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a70:	4aa1      	ldr	r2, [pc, #644]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a72:	430b      	orrs	r3, r1
 8002a74:	6513      	str	r3, [r2, #80]	; 0x50
 8002a76:	e003      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002a8c:	f04f 0900 	mov.w	r9, #0
 8002a90:	ea58 0309 	orrs.w	r3, r8, r9
 8002a94:	d047      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d82a      	bhi.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002aa0:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002abd 	.word	0x08002abd
 8002aac:	08002acb 	.word	0x08002acb
 8002ab0:	08002ae1 	.word	0x08002ae1
 8002ab4:	08002aff 	.word	0x08002aff
 8002ab8:	08002aff 	.word	0x08002aff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002abc:	4b8e      	ldr	r3, [pc, #568]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	4a8d      	ldr	r2, [pc, #564]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ac8:	e01a      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ace:	3308      	adds	r3, #8
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f001 fc3c 	bl	8004350 <RCCEx_PLL2_Config>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ade:	e00f      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ae4:	3328      	adds	r3, #40	; 0x28
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 fce3 	bl	80044b4 <RCCEx_PLL3_Config>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002af4:	e004      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002afc:	e000      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b08:	4b7b      	ldr	r3, [pc, #492]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0c:	f023 0107 	bic.w	r1, r3, #7
 8002b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	4a78      	ldr	r2, [pc, #480]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	6513      	str	r3, [r2, #80]	; 0x50
 8002b1c:	e003      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002b32:	f04f 0b00 	mov.w	fp, #0
 8002b36:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b3a:	d04c      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b46:	d030      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4c:	d829      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b4e:	2bc0      	cmp	r3, #192	; 0xc0
 8002b50:	d02d      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b52:	2bc0      	cmp	r3, #192	; 0xc0
 8002b54:	d825      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b56:	2b80      	cmp	r3, #128	; 0x80
 8002b58:	d018      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002b5a:	2b80      	cmp	r3, #128	; 0x80
 8002b5c:	d821      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002b62:	2b40      	cmp	r3, #64	; 0x40
 8002b64:	d007      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002b66:	e01c      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b68:	4b63      	ldr	r3, [pc, #396]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	4a62      	ldr	r2, [pc, #392]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b74:	e01c      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f001 fbe6 	bl	8004350 <RCCEx_PLL2_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b8a:	e011      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b90:	3328      	adds	r3, #40	; 0x28
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 fc8d 	bl	80044b4 <RCCEx_PLL3_Config>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ba0:	e006      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ba8:	e002      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002bb8:	4b4f      	ldr	r3, [pc, #316]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc6:	4a4c      	ldr	r2, [pc, #304]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6513      	str	r3, [r2, #80]	; 0x50
 8002bcc:	e003      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002be2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002be6:	2300      	movs	r3, #0
 8002be8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002bec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	d053      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002bfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c02:	d035      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002c04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c08:	d82e      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c0e:	d031      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002c10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c14:	d828      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c1a:	d01a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c20:	d822      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c2a:	d007      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002c2c:	e01c      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c2e:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	4a31      	ldr	r2, [pc, #196]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c3a:	e01c      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c40:	3308      	adds	r3, #8
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 fb83 	bl	8004350 <RCCEx_PLL2_Config>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c50:	e011      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c56:	3328      	adds	r3, #40	; 0x28
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 fc2a 	bl	80044b4 <RCCEx_PLL3_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c66:	e006      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c6e:	e002      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c70:	bf00      	nop
 8002c72:	e000      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10b      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c8e:	4a1a      	ldr	r2, [pc, #104]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6593      	str	r3, [r2, #88]	; 0x58
 8002c94:	e003      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002caa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002cb4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	d056      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cca:	d038      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002ccc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cd0:	d831      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cd6:	d034      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002cd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cdc:	d82b      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ce2:	d01d      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002ce4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ce8:	d825      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002cee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002cf4:	e01f      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cf6:	bf00      	nop
 8002cf8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cfc:	4ba2      	ldr	r3, [pc, #648]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	4aa1      	ldr	r2, [pc, #644]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d08:	e01c      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d0e:	3308      	adds	r3, #8
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f001 fb1c 	bl	8004350 <RCCEx_PLL2_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d1e:	e011      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d24:	3328      	adds	r3, #40	; 0x28
 8002d26:	2100      	movs	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 fbc3 	bl	80044b4 <RCCEx_PLL3_Config>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d34:	e006      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d3c:	e002      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002d4c:	4b8e      	ldr	r3, [pc, #568]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d5c:	4a8a      	ldr	r2, [pc, #552]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	6593      	str	r3, [r2, #88]	; 0x58
 8002d62:	e003      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002d78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002d82:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002d86:	460b      	mov	r3, r1
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	d03a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	2b30      	cmp	r3, #48	; 0x30
 8002d94:	d01f      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002d96:	2b30      	cmp	r3, #48	; 0x30
 8002d98:	d819      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d00c      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d815      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d019      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d111      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002daa:	4b77      	ldr	r3, [pc, #476]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	4a76      	ldr	r2, [pc, #472]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002db6:	e011      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 fac5 	bl	8004350 <RCCEx_PLL2_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002dcc:	e006      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002dd4:	e002      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002de4:	4b68      	ldr	r3, [pc, #416]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df2:	4a65      	ldr	r2, [pc, #404]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002df4:	430b      	orrs	r3, r1
 8002df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002df8:	e003      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002e0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002e18:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	d051      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e2c:	d035      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e32:	d82e      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e38:	d031      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002e3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e3e:	d828      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e44:	d01a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4a:	d822      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e54:	d007      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002e56:	e01c      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e58:	4b4b      	ldr	r3, [pc, #300]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	4a4a      	ldr	r2, [pc, #296]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e64:	e01c      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 fa6e 	bl	8004350 <RCCEx_PLL2_Config>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e7a:	e011      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e80:	3328      	adds	r3, #40	; 0x28
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 fb15 	bl	80044b4 <RCCEx_PLL3_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e90:	e006      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e98:	e002      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e9a:	bf00      	nop
 8002e9c:	e000      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ea8:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb6:	4a34      	ldr	r2, [pc, #208]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6513      	str	r3, [r2, #80]	; 0x50
 8002ebc:	e003      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ec2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ece:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002edc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	d056      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef0:	d033      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002ef2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef6:	d82c      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ef8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002efc:	d02f      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002efe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f02:	d826      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f08:	d02b      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002f0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f0e:	d820      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f14:	d012      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002f16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f1a:	d81a      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d022      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f24:	d115      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 fa0e 	bl	8004350 <RCCEx_PLL2_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f3a:	e015      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f40:	3328      	adds	r3, #40	; 0x28
 8002f42:	2101      	movs	r1, #1
 8002f44:	4618      	mov	r0, r3
 8002f46:	f001 fab5 	bl	80044b4 <RCCEx_PLL3_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f50:	e00a      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f58:	e006      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f5a:	bf00      	nop
 8002f5c:	e004      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f5e:	bf00      	nop
 8002f60:	e002      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f62:	bf00      	nop
 8002f64:	e000      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10d      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f74:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f7e:	4a02      	ldr	r2, [pc, #8]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6513      	str	r3, [r2, #80]	; 0x50
 8002f84:	e006      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f86:	bf00      	nop
 8002f88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002faa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	d055      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc0:	d033      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc6:	d82c      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fcc:	d02f      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd2:	d826      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fd8:	d02b      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002fda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fde:	d820      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fe4:	d012      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fea:	d81a      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d022      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002ff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ff4:	d115      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	4618      	mov	r0, r3
 8003000:	f001 f9a6 	bl	8004350 <RCCEx_PLL2_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800300a:	e015      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800300c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003010:	3328      	adds	r3, #40	; 0x28
 8003012:	2101      	movs	r1, #1
 8003014:	4618      	mov	r0, r3
 8003016:	f001 fa4d 	bl	80044b4 <RCCEx_PLL3_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003020:	e00a      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003028:	e006      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800302a:	bf00      	nop
 800302c:	e004      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800302e:	bf00      	nop
 8003030:	e002      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003032:	bf00      	nop
 8003034:	e000      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003040:	4ba3      	ldr	r3, [pc, #652]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800304c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003050:	4a9f      	ldr	r2, [pc, #636]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003052:	430b      	orrs	r3, r1
 8003054:	6593      	str	r3, [r2, #88]	; 0x58
 8003056:	e003      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800305c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800306c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003076:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800307a:	460b      	mov	r3, r1
 800307c:	4313      	orrs	r3, r2
 800307e:	d037      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800308a:	d00e      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800308c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003090:	d816      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d018      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800309a:	d111      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800309c:	4b8c      	ldr	r3, [pc, #560]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	4a8b      	ldr	r2, [pc, #556]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030a8:	e00f      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ae:	3308      	adds	r3, #8
 80030b0:	2101      	movs	r1, #1
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 f94c 	bl	8004350 <RCCEx_PLL2_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030be:	e004      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030c6:	e000      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80030c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030d2:	4b7f      	ldr	r3, [pc, #508]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80030da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	4a7b      	ldr	r2, [pc, #492]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030e2:	430b      	orrs	r3, r1
 80030e4:	6513      	str	r3, [r2, #80]	; 0x50
 80030e6:	e003      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80030f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80030fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003106:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800310a:	460b      	mov	r3, r1
 800310c:	4313      	orrs	r3, r2
 800310e:	d039      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003116:	2b03      	cmp	r3, #3
 8003118:	d81c      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	0800315d 	.word	0x0800315d
 8003124:	08003131 	.word	0x08003131
 8003128:	0800313f 	.word	0x0800313f
 800312c:	0800315d 	.word	0x0800315d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003130:	4b67      	ldr	r3, [pc, #412]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	4a66      	ldr	r2, [pc, #408]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800313c:	e00f      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800313e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003142:	3308      	adds	r3, #8
 8003144:	2102      	movs	r1, #2
 8003146:	4618      	mov	r0, r3
 8003148:	f001 f902 	bl	8004350 <RCCEx_PLL2_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003152:	e004      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800315a:	e000      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800315c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800315e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003166:	4b5a      	ldr	r3, [pc, #360]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316a:	f023 0103 	bic.w	r1, r3, #3
 800316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003174:	4a56      	ldr	r2, [pc, #344]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003176:	430b      	orrs	r3, r1
 8003178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800317a:	e003      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003180:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003190:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003194:	2300      	movs	r3, #0
 8003196:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800319a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800319e:	460b      	mov	r3, r1
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f000 809f 	beq.w	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a6:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a4a      	ldr	r2, [pc, #296]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031b2:	f7fe f89d 	bl	80012f0 <HAL_GetTick>
 80031b6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031ba:	e00b      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031bc:	f7fe f898 	bl	80012f0 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b64      	cmp	r3, #100	; 0x64
 80031ca:	d903      	bls.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031d2:	e005      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031d4:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0ed      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80031e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d179      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80031e8:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031f4:	4053      	eors	r3, r2
 80031f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d015      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031fe:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003206:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800320a:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	4a30      	ldr	r2, [pc, #192]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003214:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003216:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	4a2d      	ldr	r2, [pc, #180]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800321c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003220:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003222:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003224:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003228:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800322a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800322e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003236:	d118      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe f85a 	bl	80012f0 <HAL_GetTick>
 800323c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003240:	e00d      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7fe f855 	bl	80012f0 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800324c:	1ad2      	subs	r2, r2, r3
 800324e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003252:	429a      	cmp	r2, r3
 8003254:	d903      	bls.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800325c:	e005      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800325e:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0eb      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800326a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800326e:	2b00      	cmp	r3, #0
 8003270:	d129      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003276:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800327a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003282:	d10e      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800328c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003290:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003294:	091a      	lsrs	r2, r3, #4
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003298:	4013      	ands	r3, r2
 800329a:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800329c:	430b      	orrs	r3, r1
 800329e:	6113      	str	r3, [r2, #16]
 80032a0:	e005      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80032ac:	6113      	str	r3, [r2, #16]
 80032ae:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80032b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032be:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6713      	str	r3, [r2, #112]	; 0x70
 80032c4:	e00e      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80032ce:	e009      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80032d0:	58024400 	.word	0x58024400
 80032d4:	58024800 	.word	0x58024800
 80032d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80032e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f002 0301 	and.w	r3, r2, #1
 80032f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032f4:	2300      	movs	r3, #0
 80032f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032fe:	460b      	mov	r3, r1
 8003300:	4313      	orrs	r3, r2
 8003302:	f000 8089 	beq.w	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800330a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800330c:	2b28      	cmp	r3, #40	; 0x28
 800330e:	d86b      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003310:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003316:	bf00      	nop
 8003318:	080033f1 	.word	0x080033f1
 800331c:	080033e9 	.word	0x080033e9
 8003320:	080033e9 	.word	0x080033e9
 8003324:	080033e9 	.word	0x080033e9
 8003328:	080033e9 	.word	0x080033e9
 800332c:	080033e9 	.word	0x080033e9
 8003330:	080033e9 	.word	0x080033e9
 8003334:	080033e9 	.word	0x080033e9
 8003338:	080033bd 	.word	0x080033bd
 800333c:	080033e9 	.word	0x080033e9
 8003340:	080033e9 	.word	0x080033e9
 8003344:	080033e9 	.word	0x080033e9
 8003348:	080033e9 	.word	0x080033e9
 800334c:	080033e9 	.word	0x080033e9
 8003350:	080033e9 	.word	0x080033e9
 8003354:	080033e9 	.word	0x080033e9
 8003358:	080033d3 	.word	0x080033d3
 800335c:	080033e9 	.word	0x080033e9
 8003360:	080033e9 	.word	0x080033e9
 8003364:	080033e9 	.word	0x080033e9
 8003368:	080033e9 	.word	0x080033e9
 800336c:	080033e9 	.word	0x080033e9
 8003370:	080033e9 	.word	0x080033e9
 8003374:	080033e9 	.word	0x080033e9
 8003378:	080033f1 	.word	0x080033f1
 800337c:	080033e9 	.word	0x080033e9
 8003380:	080033e9 	.word	0x080033e9
 8003384:	080033e9 	.word	0x080033e9
 8003388:	080033e9 	.word	0x080033e9
 800338c:	080033e9 	.word	0x080033e9
 8003390:	080033e9 	.word	0x080033e9
 8003394:	080033e9 	.word	0x080033e9
 8003398:	080033f1 	.word	0x080033f1
 800339c:	080033e9 	.word	0x080033e9
 80033a0:	080033e9 	.word	0x080033e9
 80033a4:	080033e9 	.word	0x080033e9
 80033a8:	080033e9 	.word	0x080033e9
 80033ac:	080033e9 	.word	0x080033e9
 80033b0:	080033e9 	.word	0x080033e9
 80033b4:	080033e9 	.word	0x080033e9
 80033b8:	080033f1 	.word	0x080033f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c0:	3308      	adds	r3, #8
 80033c2:	2101      	movs	r1, #1
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 ffc3 	bl	8004350 <RCCEx_PLL2_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80033d0:	e00f      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d6:	3328      	adds	r3, #40	; 0x28
 80033d8:	2101      	movs	r1, #1
 80033da:	4618      	mov	r0, r3
 80033dc:	f001 f86a 	bl	80044b4 <RCCEx_PLL3_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80033e6:	e004      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033ee:	e000      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80033f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80033fa:	4bbf      	ldr	r3, [pc, #764]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003408:	4abb      	ldr	r2, [pc, #748]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800340a:	430b      	orrs	r3, r1
 800340c:	6553      	str	r3, [r2, #84]	; 0x54
 800340e:	e003      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003414:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	f002 0302 	and.w	r3, r2, #2
 8003424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800342e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003432:	460b      	mov	r3, r1
 8003434:	4313      	orrs	r3, r2
 8003436:	d041      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800343c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800343e:	2b05      	cmp	r3, #5
 8003440:	d824      	bhi.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003442:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	08003495 	.word	0x08003495
 800344c:	08003461 	.word	0x08003461
 8003450:	08003477 	.word	0x08003477
 8003454:	08003495 	.word	0x08003495
 8003458:	08003495 	.word	0x08003495
 800345c:	08003495 	.word	0x08003495
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003464:	3308      	adds	r3, #8
 8003466:	2101      	movs	r1, #1
 8003468:	4618      	mov	r0, r3
 800346a:	f000 ff71 	bl	8004350 <RCCEx_PLL2_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003474:	e00f      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800347a:	3328      	adds	r3, #40	; 0x28
 800347c:	2101      	movs	r1, #1
 800347e:	4618      	mov	r0, r3
 8003480:	f001 f818 	bl	80044b4 <RCCEx_PLL3_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800348a:	e004      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003492:	e000      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10a      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800349e:	4b96      	ldr	r3, [pc, #600]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a2:	f023 0107 	bic.w	r1, r3, #7
 80034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ac:	4a92      	ldr	r2, [pc, #584]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034ae:	430b      	orrs	r3, r1
 80034b0:	6553      	str	r3, [r2, #84]	; 0x54
 80034b2:	e003      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f002 0304 	and.w	r3, r2, #4
 80034c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4313      	orrs	r3, r2
 80034da:	d044      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d825      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80034e8:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	0800353d 	.word	0x0800353d
 80034f4:	08003509 	.word	0x08003509
 80034f8:	0800351f 	.word	0x0800351f
 80034fc:	0800353d 	.word	0x0800353d
 8003500:	0800353d 	.word	0x0800353d
 8003504:	0800353d 	.word	0x0800353d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800350c:	3308      	adds	r3, #8
 800350e:	2101      	movs	r1, #1
 8003510:	4618      	mov	r0, r3
 8003512:	f000 ff1d 	bl	8004350 <RCCEx_PLL2_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800351c:	e00f      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800351e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003522:	3328      	adds	r3, #40	; 0x28
 8003524:	2101      	movs	r1, #1
 8003526:	4618      	mov	r0, r3
 8003528:	f000 ffc4 	bl	80044b4 <RCCEx_PLL3_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003532:	e004      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800353a:	e000      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800353c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10b      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003546:	4b6c      	ldr	r3, [pc, #432]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354a:	f023 0107 	bic.w	r1, r3, #7
 800354e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003556:	4a68      	ldr	r2, [pc, #416]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003558:	430b      	orrs	r3, r1
 800355a:	6593      	str	r3, [r2, #88]	; 0x58
 800355c:	e003      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003562:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356e:	f002 0320 	and.w	r3, r2, #32
 8003572:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003576:	2300      	movs	r3, #0
 8003578:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800357c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003580:	460b      	mov	r3, r1
 8003582:	4313      	orrs	r3, r2
 8003584:	d055      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003592:	d033      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003598:	d82c      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359e:	d02f      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80035a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a4:	d826      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035aa:	d02b      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80035ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035b0:	d820      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b6:	d012      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80035b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035bc:	d81a      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d022      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80035c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035c6:	d115      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035cc:	3308      	adds	r3, #8
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 febd 	bl	8004350 <RCCEx_PLL2_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80035dc:	e015      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e2:	3328      	adds	r3, #40	; 0x28
 80035e4:	2102      	movs	r1, #2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 ff64 	bl	80044b4 <RCCEx_PLL3_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80035f2:	e00a      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035fa:	e006      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80035fc:	bf00      	nop
 80035fe:	e004      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003600:	bf00      	nop
 8003602:	e002      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003604:	bf00      	nop
 8003606:	e000      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800360a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10b      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003612:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800361a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800361e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003622:	4a35      	ldr	r2, [pc, #212]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003624:	430b      	orrs	r3, r1
 8003626:	6553      	str	r3, [r2, #84]	; 0x54
 8003628:	e003      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800362e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800363e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003642:	2300      	movs	r3, #0
 8003644:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003648:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800364c:	460b      	mov	r3, r1
 800364e:	4313      	orrs	r3, r2
 8003650:	d058      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003656:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800365a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800365e:	d033      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003660:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003664:	d82c      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366a:	d02f      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	d826      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003672:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003676:	d02b      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003678:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800367c:	d820      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800367e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003682:	d012      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003688:	d81a      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800368a:	2b00      	cmp	r3, #0
 800368c:	d022      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800368e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003692:	d115      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003698:	3308      	adds	r3, #8
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fe57 	bl	8004350 <RCCEx_PLL2_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036a8:	e015      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ae:	3328      	adds	r3, #40	; 0x28
 80036b0:	2102      	movs	r1, #2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fefe 	bl	80044b4 <RCCEx_PLL3_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036be:	e00a      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036c6:	e006      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036c8:	bf00      	nop
 80036ca:	e004      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036cc:	bf00      	nop
 80036ce:	e002      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036d0:	bf00      	nop
 80036d2:	e000      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10e      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ee:	4a02      	ldr	r2, [pc, #8]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036f0:	430b      	orrs	r3, r1
 80036f2:	6593      	str	r3, [r2, #88]	; 0x58
 80036f4:	e006      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80036f6:	bf00      	nop
 80036f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003700:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800371a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800371e:	460b      	mov	r3, r1
 8003720:	4313      	orrs	r3, r2
 8003722:	d055      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003728:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800372c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003730:	d033      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003732:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003736:	d82c      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800373c:	d02f      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800373e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003742:	d826      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003744:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003748:	d02b      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800374a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800374e:	d820      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003754:	d012      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800375a:	d81a      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d022      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003764:	d115      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376a:	3308      	adds	r3, #8
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fdee 	bl	8004350 <RCCEx_PLL2_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800377a:	e015      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800377c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003780:	3328      	adds	r3, #40	; 0x28
 8003782:	2102      	movs	r1, #2
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fe95 	bl	80044b4 <RCCEx_PLL3_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003790:	e00a      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003798:	e006      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800379a:	bf00      	nop
 800379c:	e004      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800379e:	bf00      	nop
 80037a0:	e002      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80037b0:	4ba1      	ldr	r3, [pc, #644]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80037b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037c0:	4a9d      	ldr	r2, [pc, #628]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037c2:	430b      	orrs	r3, r1
 80037c4:	6593      	str	r3, [r2, #88]	; 0x58
 80037c6:	e003      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80037d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f002 0308 	and.w	r3, r2, #8
 80037dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80037ea:	460b      	mov	r3, r1
 80037ec:	4313      	orrs	r3, r2
 80037ee:	d01e      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fc:	d10c      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003802:	3328      	adds	r3, #40	; 0x28
 8003804:	2102      	movs	r1, #2
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fe54 	bl	80044b4 <RCCEx_PLL3_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003818:	4b87      	ldr	r3, [pc, #540]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800381a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003828:	4a83      	ldr	r2, [pc, #524]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800382a:	430b      	orrs	r3, r1
 800382c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800382e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	f002 0310 	and.w	r3, r2, #16
 800383a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800383e:	2300      	movs	r3, #0
 8003840:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003844:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003848:	460b      	mov	r3, r1
 800384a:	4313      	orrs	r3, r2
 800384c:	d01e      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800385a:	d10c      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003860:	3328      	adds	r3, #40	; 0x28
 8003862:	2102      	movs	r1, #2
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fe25 	bl	80044b4 <RCCEx_PLL3_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003876:	4b70      	ldr	r3, [pc, #448]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003886:	4a6c      	ldr	r2, [pc, #432]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003888:	430b      	orrs	r3, r1
 800388a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003898:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80038a6:	460b      	mov	r3, r1
 80038a8:	4313      	orrs	r3, r2
 80038aa:	d03e      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038b8:	d022      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80038ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038be:	d81b      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c8:	d00b      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80038ca:	e015      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d0:	3308      	adds	r3, #8
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fd3b 	bl	8004350 <RCCEx_PLL2_Config>
 80038da:	4603      	mov	r3, r0
 80038dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80038e0:	e00f      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e6:	3328      	adds	r3, #40	; 0x28
 80038e8:	2102      	movs	r1, #2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fde2 	bl	80044b4 <RCCEx_PLL3_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80038f6:	e004      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038fe:	e000      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800390a:	4b4b      	ldr	r3, [pc, #300]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003916:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800391a:	4a47      	ldr	r2, [pc, #284]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800391c:	430b      	orrs	r3, r1
 800391e:	6593      	str	r3, [r2, #88]	; 0x58
 8003920:	e003      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003926:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003936:	67bb      	str	r3, [r7, #120]	; 0x78
 8003938:	2300      	movs	r3, #0
 800393a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800393c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003940:	460b      	mov	r3, r1
 8003942:	4313      	orrs	r3, r2
 8003944:	d03b      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003952:	d01f      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003954:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003958:	d818      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800395a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800395e:	d003      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003960:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003964:	d007      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003966:	e011      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003968:	4b33      	ldr	r3, [pc, #204]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	4a32      	ldr	r2, [pc, #200]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800396e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003972:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003974:	e00f      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800397a:	3328      	adds	r3, #40	; 0x28
 800397c:	2101      	movs	r1, #1
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fd98 	bl	80044b4 <RCCEx_PLL3_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800398a:	e004      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10b      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800399e:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6553      	str	r3, [r2, #84]	; 0x54
 80039b4:	e003      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80039ca:	673b      	str	r3, [r7, #112]	; 0x70
 80039cc:	2300      	movs	r3, #0
 80039ce:	677b      	str	r3, [r7, #116]	; 0x74
 80039d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80039d4:	460b      	mov	r3, r1
 80039d6:	4313      	orrs	r3, r2
 80039d8:	d034      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e8:	d007      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80039ea:	e011      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	4a11      	ldr	r2, [pc, #68]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80039f8:	e00e      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039fe:	3308      	adds	r3, #8
 8003a00:	2102      	movs	r1, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fca4 	bl	8004350 <RCCEx_PLL2_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a0e:	e003      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10d      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2e:	4a02      	ldr	r2, [pc, #8]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a30:	430b      	orrs	r3, r1
 8003a32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a34:	e006      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003a36:	bf00      	nop
 8003a38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003a50:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a52:	2300      	movs	r3, #0
 8003a54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a56:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	d00c      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a64:	3328      	adds	r3, #40	; 0x28
 8003a66:	2102      	movs	r1, #2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fd23 	bl	80044b4 <RCCEx_PLL3_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a82:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003a86:	663b      	str	r3, [r7, #96]	; 0x60
 8003a88:	2300      	movs	r3, #0
 8003a8a:	667b      	str	r3, [r7, #100]	; 0x64
 8003a8c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003a90:	460b      	mov	r3, r1
 8003a92:	4313      	orrs	r3, r2
 8003a94:	d038      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aa2:	d018      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003aa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aa8:	d811      	bhi.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aae:	d014      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab4:	d80b      	bhi.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d011      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003abe:	d106      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac0:	4bc3      	ldr	r3, [pc, #780]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	4ac2      	ldr	r2, [pc, #776]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003acc:	e008      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ad4:	e004      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003ad6:	bf00      	nop
 8003ad8:	e002      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003ada:	bf00      	nop
 8003adc:	e000      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10b      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ae8:	4bb9      	ldr	r3, [pc, #740]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af8:	4ab5      	ldr	r2, [pc, #724]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003afa:	430b      	orrs	r3, r1
 8003afc:	6553      	str	r3, [r2, #84]	; 0x54
 8003afe:	e003      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b10:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003b14:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b16:	2300      	movs	r3, #0
 8003b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b1a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4313      	orrs	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b24:	4baa      	ldr	r3, [pc, #680]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b32:	4aa7      	ldr	r2, [pc, #668]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003b44:	653b      	str	r3, [r7, #80]	; 0x50
 8003b46:	2300      	movs	r3, #0
 8003b48:	657b      	str	r3, [r7, #84]	; 0x54
 8003b4a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003b54:	4b9e      	ldr	r3, [pc, #632]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003b64:	4a9a      	ldr	r2, [pc, #616]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b66:	430b      	orrs	r3, r1
 8003b68:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b78:	2300      	movs	r3, #0
 8003b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b7c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003b80:	460b      	mov	r3, r1
 8003b82:	4313      	orrs	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b86:	4b92      	ldr	r3, [pc, #584]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b94:	4a8e      	ldr	r2, [pc, #568]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b96:	430b      	orrs	r3, r1
 8003b98:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ba8:	2300      	movs	r3, #0
 8003baa:	647b      	str	r3, [r7, #68]	; 0x44
 8003bac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	d00e      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bb6:	4b86      	ldr	r3, [pc, #536]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	4a85      	ldr	r2, [pc, #532]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bc0:	6113      	str	r3, [r2, #16]
 8003bc2:	4b83      	ldr	r3, [pc, #524]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bc4:	6919      	ldr	r1, [r3, #16]
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003bce:	4a80      	ldr	r2, [pc, #512]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003be0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003be2:	2300      	movs	r3, #0
 8003be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003bea:	460b      	mov	r3, r1
 8003bec:	4313      	orrs	r3, r2
 8003bee:	d009      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003bf0:	4b77      	ldr	r3, [pc, #476]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	4a74      	ldr	r2, [pc, #464]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c00:	430b      	orrs	r3, r1
 8003c02:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003c10:	633b      	str	r3, [r7, #48]	; 0x30
 8003c12:	2300      	movs	r3, #0
 8003c14:	637b      	str	r3, [r7, #52]	; 0x34
 8003c16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c20:	4b6b      	ldr	r3, [pc, #428]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c30:	4a67      	ldr	r2, [pc, #412]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c32:	430b      	orrs	r3, r1
 8003c34:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	2100      	movs	r1, #0
 8003c40:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c48:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	d011      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c56:	3308      	adds	r3, #8
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fb78 	bl	8004350 <RCCEx_PLL2_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	2100      	movs	r1, #0
 8003c80:	6239      	str	r1, [r7, #32]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
 8003c88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	d011      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c96:	3308      	adds	r3, #8
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fb58 	bl	8004350 <RCCEx_PLL2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	61b9      	str	r1, [r7, #24]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	d011      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	2102      	movs	r1, #2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fb38 	bl	8004350 <RCCEx_PLL2_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	2100      	movs	r1, #0
 8003d00:	6139      	str	r1, [r7, #16]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	d011      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d16:	3328      	adds	r3, #40	; 0x28
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fbca 	bl	80044b4 <RCCEx_PLL3_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003d26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	2100      	movs	r1, #0
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	d011      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d56:	3328      	adds	r3, #40	; 0x28
 8003d58:	2101      	movs	r1, #1
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fbaa 	bl	80044b4 <RCCEx_PLL3_Config>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	2100      	movs	r1, #0
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	d011      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d96:	3328      	adds	r3, #40	; 0x28
 8003d98:	2102      	movs	r1, #2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fb8a 	bl	80044b4 <RCCEx_PLL3_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003da6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003db2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003db6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dd0:	58024400 	.word	0x58024400

08003dd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003dd8:	f7fe fd96 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4904      	ldr	r1, [pc, #16]	; (8003dfc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	58024400 	.word	0x58024400
 8003dfc:	080071c4 	.word	0x080071c4

08003e00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b089      	sub	sp, #36	; 0x24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e08:	4ba1      	ldr	r3, [pc, #644]	; (8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003e12:	4b9f      	ldr	r3, [pc, #636]	; (8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	0b1b      	lsrs	r3, r3, #12
 8003e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003e1e:	4b9c      	ldr	r3, [pc, #624]	; (8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003e2a:	4b99      	ldr	r3, [pc, #612]	; (8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	08db      	lsrs	r3, r3, #3
 8003e30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8111 	beq.w	8004070 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	f000 8083 	beq.w	8003f5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	f200 80a1 	bhi.w	8003fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d056      	beq.n	8003f18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003e6a:	e099      	b.n	8003fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e6c:	4b88      	ldr	r3, [pc, #544]	; (8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d02d      	beq.n	8003ed4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e78:	4b85      	ldr	r3, [pc, #532]	; (8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	08db      	lsrs	r3, r3, #3
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	4a84      	ldr	r2, [pc, #528]	; (8004094 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
 8003e88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ea2:	4b7b      	ldr	r3, [pc, #492]	; (8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ece:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ed2:	e087      	b.n	8003fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ede:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800409c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ee6:	4b6a      	ldr	r3, [pc, #424]	; (8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003efa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f16:	e065      	b.n	8003fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80040a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f2a:	4b59      	ldr	r3, [pc, #356]	; (8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f5a:	e043      	b.n	8003fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80040a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f6e:	4b48      	ldr	r3, [pc, #288]	; (8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f9e:	e021      	b.n	8003fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003faa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80040a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fe2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003fe4:	4b2a      	ldr	r3, [pc, #168]	; (8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	0a5b      	lsrs	r3, r3, #9
 8003fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ffa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ffe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800400a:	ee17 2a90 	vmov	r2, s15
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004012:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	0c1b      	lsrs	r3, r3, #16
 8004018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800401c:	ee07 3a90 	vmov	s15, r3
 8004020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004028:	ee37 7a87 	vadd.f32	s14, s15, s14
 800402c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004038:	ee17 2a90 	vmov	r2, s15
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004040:	4b13      	ldr	r3, [pc, #76]	; (8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	0e1b      	lsrs	r3, r3, #24
 8004046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004052:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800405a:	edd7 6a07 	vldr	s13, [r7, #28]
 800405e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004066:	ee17 2a90 	vmov	r2, s15
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800406e:	e008      	b.n	8004082 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	609a      	str	r2, [r3, #8]
}
 8004082:	bf00      	nop
 8004084:	3724      	adds	r7, #36	; 0x24
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	58024400 	.word	0x58024400
 8004094:	03d09000 	.word	0x03d09000
 8004098:	46000000 	.word	0x46000000
 800409c:	4c742400 	.word	0x4c742400
 80040a0:	4a742400 	.word	0x4a742400
 80040a4:	4bbebc20 	.word	0x4bbebc20

080040a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b089      	sub	sp, #36	; 0x24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040b0:	4ba1      	ldr	r3, [pc, #644]	; (8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80040ba:	4b9f      	ldr	r3, [pc, #636]	; (8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	0d1b      	lsrs	r3, r3, #20
 80040c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80040c6:	4b9c      	ldr	r3, [pc, #624]	; (8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80040d2:	4b99      	ldr	r3, [pc, #612]	; (8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	08db      	lsrs	r3, r3, #3
 80040d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	fb02 f303 	mul.w	r3, r2, r3
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8111 	beq.w	8004318 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	f000 8083 	beq.w	8004204 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b02      	cmp	r3, #2
 8004102:	f200 80a1 	bhi.w	8004248 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d056      	beq.n	80041c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004112:	e099      	b.n	8004248 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004114:	4b88      	ldr	r3, [pc, #544]	; (8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d02d      	beq.n	800417c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004120:	4b85      	ldr	r3, [pc, #532]	; (8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	08db      	lsrs	r3, r3, #3
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	4a84      	ldr	r2, [pc, #528]	; (800433c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
 8004130:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	ee07 3a90 	vmov	s15, r3
 8004138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	ee07 3a90 	vmov	s15, r3
 8004142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800414a:	4b7b      	ldr	r3, [pc, #492]	; (8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800415a:	ed97 6a03 	vldr	s12, [r7, #12]
 800415e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800416a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800416e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004176:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800417a:	e087      	b.n	800428c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004186:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004344 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800418a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800418e:	4b6a      	ldr	r3, [pc, #424]	; (8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800419e:	ed97 6a03 	vldr	s12, [r7, #12]
 80041a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041be:	e065      	b.n	800428c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80041ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041d2:	4b59      	ldr	r3, [pc, #356]	; (8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004202:	e043      	b.n	800428c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800434c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004216:	4b48      	ldr	r3, [pc, #288]	; (8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004226:	ed97 6a03 	vldr	s12, [r7, #12]
 800422a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800422e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800423a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800423e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004246:	e021      	b.n	800428c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004252:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800425a:	4b37      	ldr	r3, [pc, #220]	; (8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426a:	ed97 6a03 	vldr	s12, [r7, #12]
 800426e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800427a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800427e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800428a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800428c:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	0a5b      	lsrs	r3, r3, #9
 8004292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80042aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042b2:	ee17 2a90 	vmov	r2, s15
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80042ba:	4b1f      	ldr	r3, [pc, #124]	; (8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	0c1b      	lsrs	r3, r3, #16
 80042c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80042d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042e0:	ee17 2a90 	vmov	r2, s15
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80042e8:	4b13      	ldr	r3, [pc, #76]	; (8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	0e1b      	lsrs	r3, r3, #24
 80042ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004302:	edd7 6a07 	vldr	s13, [r7, #28]
 8004306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800430a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800430e:	ee17 2a90 	vmov	r2, s15
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004316:	e008      	b.n	800432a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	609a      	str	r2, [r3, #8]
}
 800432a:	bf00      	nop
 800432c:	3724      	adds	r7, #36	; 0x24
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	58024400 	.word	0x58024400
 800433c:	03d09000 	.word	0x03d09000
 8004340:	46000000 	.word	0x46000000
 8004344:	4c742400 	.word	0x4c742400
 8004348:	4a742400 	.word	0x4a742400
 800434c:	4bbebc20 	.word	0x4bbebc20

08004350 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800435e:	4b53      	ldr	r3, [pc, #332]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b03      	cmp	r3, #3
 8004368:	d101      	bne.n	800436e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e099      	b.n	80044a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800436e:	4b4f      	ldr	r3, [pc, #316]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a4e      	ldr	r2, [pc, #312]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004374:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800437a:	f7fc ffb9 	bl	80012f0 <HAL_GetTick>
 800437e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004380:	e008      	b.n	8004394 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004382:	f7fc ffb5 	bl	80012f0 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e086      	b.n	80044a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004394:	4b45      	ldr	r3, [pc, #276]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f0      	bne.n	8004382 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80043a0:	4b42      	ldr	r3, [pc, #264]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	031b      	lsls	r3, r3, #12
 80043ae:	493f      	ldr	r1, [pc, #252]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	628b      	str	r3, [r1, #40]	; 0x28
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	025b      	lsls	r3, r3, #9
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	041b      	lsls	r3, r3, #16
 80043d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	3b01      	subs	r3, #1
 80043de:	061b      	lsls	r3, r3, #24
 80043e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043e4:	4931      	ldr	r1, [pc, #196]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80043ea:	4b30      	ldr	r3, [pc, #192]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	492d      	ldr	r1, [pc, #180]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80043fc:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	f023 0220 	bic.w	r2, r3, #32
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	4928      	ldr	r1, [pc, #160]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 800440a:	4313      	orrs	r3, r2
 800440c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800440e:	4b27      	ldr	r3, [pc, #156]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	4a26      	ldr	r2, [pc, #152]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004414:	f023 0310 	bic.w	r3, r3, #16
 8004418:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800441a:	4b24      	ldr	r3, [pc, #144]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 800441c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800441e:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <RCCEx_PLL2_Config+0x160>)
 8004420:	4013      	ands	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	69d2      	ldr	r2, [r2, #28]
 8004426:	00d2      	lsls	r2, r2, #3
 8004428:	4920      	ldr	r1, [pc, #128]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 800442a:	4313      	orrs	r3, r2
 800442c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800442e:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	4a1e      	ldr	r2, [pc, #120]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004434:	f043 0310 	orr.w	r3, r3, #16
 8004438:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004440:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	4a19      	ldr	r2, [pc, #100]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800444a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800444c:	e00f      	b.n	800446e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d106      	bne.n	8004462 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004454:	4b15      	ldr	r3, [pc, #84]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	4a14      	ldr	r2, [pc, #80]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 800445a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800445e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004460:	e005      	b.n	800446e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004462:	4b12      	ldr	r3, [pc, #72]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	4a11      	ldr	r2, [pc, #68]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800446c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800446e:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a0e      	ldr	r2, [pc, #56]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447a:	f7fc ff39 	bl	80012f0 <HAL_GetTick>
 800447e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004480:	e008      	b.n	8004494 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004482:	f7fc ff35 	bl	80012f0 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e006      	b.n	80044a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <RCCEx_PLL2_Config+0x15c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	58024400 	.word	0x58024400
 80044b0:	ffff0007 	.word	0xffff0007

080044b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044c2:	4b53      	ldr	r3, [pc, #332]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d101      	bne.n	80044d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e099      	b.n	8004606 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80044d2:	4b4f      	ldr	r3, [pc, #316]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a4e      	ldr	r2, [pc, #312]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 80044d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044de:	f7fc ff07 	bl	80012f0 <HAL_GetTick>
 80044e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044e4:	e008      	b.n	80044f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80044e6:	f7fc ff03 	bl	80012f0 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e086      	b.n	8004606 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044f8:	4b45      	ldr	r3, [pc, #276]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f0      	bne.n	80044e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004504:	4b42      	ldr	r3, [pc, #264]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	051b      	lsls	r3, r3, #20
 8004512:	493f      	ldr	r1, [pc, #252]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 8004514:	4313      	orrs	r3, r2
 8004516:	628b      	str	r3, [r1, #40]	; 0x28
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	3b01      	subs	r3, #1
 800451e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	3b01      	subs	r3, #1
 8004528:	025b      	lsls	r3, r3, #9
 800452a:	b29b      	uxth	r3, r3
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	3b01      	subs	r3, #1
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	3b01      	subs	r3, #1
 8004542:	061b      	lsls	r3, r3, #24
 8004544:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004548:	4931      	ldr	r1, [pc, #196]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 800454a:	4313      	orrs	r3, r2
 800454c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800454e:	4b30      	ldr	r3, [pc, #192]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	492d      	ldr	r1, [pc, #180]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 800455c:	4313      	orrs	r3, r2
 800455e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004560:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	4928      	ldr	r1, [pc, #160]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 800456e:	4313      	orrs	r3, r2
 8004570:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004572:	4b27      	ldr	r3, [pc, #156]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	4a26      	ldr	r2, [pc, #152]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 8004578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800457c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800457e:	4b24      	ldr	r3, [pc, #144]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 8004580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004582:	4b24      	ldr	r3, [pc, #144]	; (8004614 <RCCEx_PLL3_Config+0x160>)
 8004584:	4013      	ands	r3, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	69d2      	ldr	r2, [r2, #28]
 800458a:	00d2      	lsls	r2, r2, #3
 800458c:	4920      	ldr	r1, [pc, #128]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 800458e:	4313      	orrs	r3, r2
 8004590:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004592:	4b1f      	ldr	r3, [pc, #124]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	4a1e      	ldr	r2, [pc, #120]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 8004598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d106      	bne.n	80045b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045a4:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	4a19      	ldr	r2, [pc, #100]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 80045aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045b0:	e00f      	b.n	80045d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d106      	bne.n	80045c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045b8:	4b15      	ldr	r3, [pc, #84]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	4a14      	ldr	r2, [pc, #80]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 80045be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045c4:	e005      	b.n	80045d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	4a11      	ldr	r2, [pc, #68]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 80045cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80045d2:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a0e      	ldr	r2, [pc, #56]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 80045d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045de:	f7fc fe87 	bl	80012f0 <HAL_GetTick>
 80045e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045e4:	e008      	b.n	80045f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045e6:	f7fc fe83 	bl	80012f0 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e006      	b.n	8004606 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <RCCEx_PLL3_Config+0x15c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004604:	7bfb      	ldrb	r3, [r7, #15]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	58024400 	.word	0x58024400
 8004614:	ffff0007 	.word	0xffff0007

08004618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e049      	b.n	80046be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fc fc1a 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3304      	adds	r3, #4
 8004654:	4619      	mov	r1, r3
 8004656:	4610      	mov	r0, r2
 8004658:	f000 ffb4 	bl	80055c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e049      	b.n	800476c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f841 	bl	8004774 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3304      	adds	r3, #4
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f000 ff5d 	bl	80055c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d109      	bne.n	80047ac <HAL_TIM_PWM_Start+0x24>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e03c      	b.n	8004826 <HAL_TIM_PWM_Start+0x9e>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d109      	bne.n	80047c6 <HAL_TIM_PWM_Start+0x3e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	e02f      	b.n	8004826 <HAL_TIM_PWM_Start+0x9e>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d109      	bne.n	80047e0 <HAL_TIM_PWM_Start+0x58>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e022      	b.n	8004826 <HAL_TIM_PWM_Start+0x9e>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b0c      	cmp	r3, #12
 80047e4:	d109      	bne.n	80047fa <HAL_TIM_PWM_Start+0x72>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	bf14      	ite	ne
 80047f2:	2301      	movne	r3, #1
 80047f4:	2300      	moveq	r3, #0
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	e015      	b.n	8004826 <HAL_TIM_PWM_Start+0x9e>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d109      	bne.n	8004814 <HAL_TIM_PWM_Start+0x8c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	e008      	b.n	8004826 <HAL_TIM_PWM_Start+0x9e>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e0a1      	b.n	8004972 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d104      	bne.n	800483e <HAL_TIM_PWM_Start+0xb6>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800483c:	e023      	b.n	8004886 <HAL_TIM_PWM_Start+0xfe>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b04      	cmp	r3, #4
 8004842:	d104      	bne.n	800484e <HAL_TIM_PWM_Start+0xc6>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800484c:	e01b      	b.n	8004886 <HAL_TIM_PWM_Start+0xfe>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b08      	cmp	r3, #8
 8004852:	d104      	bne.n	800485e <HAL_TIM_PWM_Start+0xd6>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800485c:	e013      	b.n	8004886 <HAL_TIM_PWM_Start+0xfe>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b0c      	cmp	r3, #12
 8004862:	d104      	bne.n	800486e <HAL_TIM_PWM_Start+0xe6>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800486c:	e00b      	b.n	8004886 <HAL_TIM_PWM_Start+0xfe>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b10      	cmp	r3, #16
 8004872:	d104      	bne.n	800487e <HAL_TIM_PWM_Start+0xf6>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800487c:	e003      	b.n	8004886 <HAL_TIM_PWM_Start+0xfe>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2201      	movs	r2, #1
 800488c:	6839      	ldr	r1, [r7, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f001 fab2 	bl	8005df8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a38      	ldr	r2, [pc, #224]	; (800497c <HAL_TIM_PWM_Start+0x1f4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x13e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a37      	ldr	r2, [pc, #220]	; (8004980 <HAL_TIM_PWM_Start+0x1f8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x13e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a35      	ldr	r2, [pc, #212]	; (8004984 <HAL_TIM_PWM_Start+0x1fc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x13e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a34      	ldr	r2, [pc, #208]	; (8004988 <HAL_TIM_PWM_Start+0x200>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x13e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a32      	ldr	r2, [pc, #200]	; (800498c <HAL_TIM_PWM_Start+0x204>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <HAL_TIM_PWM_Start+0x142>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <HAL_TIM_PWM_Start+0x144>
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a25      	ldr	r2, [pc, #148]	; (800497c <HAL_TIM_PWM_Start+0x1f4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d022      	beq.n	8004930 <HAL_TIM_PWM_Start+0x1a8>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f2:	d01d      	beq.n	8004930 <HAL_TIM_PWM_Start+0x1a8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a25      	ldr	r2, [pc, #148]	; (8004990 <HAL_TIM_PWM_Start+0x208>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d018      	beq.n	8004930 <HAL_TIM_PWM_Start+0x1a8>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a24      	ldr	r2, [pc, #144]	; (8004994 <HAL_TIM_PWM_Start+0x20c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d013      	beq.n	8004930 <HAL_TIM_PWM_Start+0x1a8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a22      	ldr	r2, [pc, #136]	; (8004998 <HAL_TIM_PWM_Start+0x210>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00e      	beq.n	8004930 <HAL_TIM_PWM_Start+0x1a8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1a      	ldr	r2, [pc, #104]	; (8004980 <HAL_TIM_PWM_Start+0x1f8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d009      	beq.n	8004930 <HAL_TIM_PWM_Start+0x1a8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1e      	ldr	r2, [pc, #120]	; (800499c <HAL_TIM_PWM_Start+0x214>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <HAL_TIM_PWM_Start+0x1a8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a16      	ldr	r2, [pc, #88]	; (8004984 <HAL_TIM_PWM_Start+0x1fc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d115      	bne.n	800495c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <HAL_TIM_PWM_Start+0x218>)
 8004938:	4013      	ands	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b06      	cmp	r3, #6
 8004940:	d015      	beq.n	800496e <HAL_TIM_PWM_Start+0x1e6>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004948:	d011      	beq.n	800496e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0201 	orr.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495a:	e008      	b.n	800496e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e000      	b.n	8004970 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40010000 	.word	0x40010000
 8004980:	40010400 	.word	0x40010400
 8004984:	40014000 	.word	0x40014000
 8004988:	40014400 	.word	0x40014400
 800498c:	40014800 	.word	0x40014800
 8004990:	40000400 	.word	0x40000400
 8004994:	40000800 	.word	0x40000800
 8004998:	40000c00 	.word	0x40000c00
 800499c:	40001800 	.word	0x40001800
 80049a0:	00010007 	.word	0x00010007

080049a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2200      	movs	r2, #0
 80049b4:	6839      	ldr	r1, [r7, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 fa1e 	bl	8005df8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a3e      	ldr	r2, [pc, #248]	; (8004abc <HAL_TIM_PWM_Stop+0x118>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <HAL_TIM_PWM_Stop+0x4a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a3d      	ldr	r2, [pc, #244]	; (8004ac0 <HAL_TIM_PWM_Stop+0x11c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00e      	beq.n	80049ee <HAL_TIM_PWM_Stop+0x4a>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a3b      	ldr	r2, [pc, #236]	; (8004ac4 <HAL_TIM_PWM_Stop+0x120>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_TIM_PWM_Stop+0x4a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a3a      	ldr	r2, [pc, #232]	; (8004ac8 <HAL_TIM_PWM_Stop+0x124>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d004      	beq.n	80049ee <HAL_TIM_PWM_Stop+0x4a>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a38      	ldr	r2, [pc, #224]	; (8004acc <HAL_TIM_PWM_Stop+0x128>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d101      	bne.n	80049f2 <HAL_TIM_PWM_Stop+0x4e>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <HAL_TIM_PWM_Stop+0x50>
 80049f2:	2300      	movs	r3, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d017      	beq.n	8004a28 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6a1a      	ldr	r2, [r3, #32]
 80049fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10f      	bne.n	8004a28 <HAL_TIM_PWM_Stop+0x84>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6a1a      	ldr	r2, [r3, #32]
 8004a0e:	f240 4344 	movw	r3, #1092	; 0x444
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d107      	bne.n	8004a28 <HAL_TIM_PWM_Stop+0x84>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6a1a      	ldr	r2, [r3, #32]
 8004a2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10f      	bne.n	8004a58 <HAL_TIM_PWM_Stop+0xb4>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6a1a      	ldr	r2, [r3, #32]
 8004a3e:	f240 4344 	movw	r3, #1092	; 0x444
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d107      	bne.n	8004a58 <HAL_TIM_PWM_Stop+0xb4>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d104      	bne.n	8004a68 <HAL_TIM_PWM_Stop+0xc4>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a66:	e023      	b.n	8004ab0 <HAL_TIM_PWM_Stop+0x10c>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d104      	bne.n	8004a78 <HAL_TIM_PWM_Stop+0xd4>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a76:	e01b      	b.n	8004ab0 <HAL_TIM_PWM_Stop+0x10c>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d104      	bne.n	8004a88 <HAL_TIM_PWM_Stop+0xe4>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a86:	e013      	b.n	8004ab0 <HAL_TIM_PWM_Stop+0x10c>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2b0c      	cmp	r3, #12
 8004a8c:	d104      	bne.n	8004a98 <HAL_TIM_PWM_Stop+0xf4>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a96:	e00b      	b.n	8004ab0 <HAL_TIM_PWM_Stop+0x10c>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d104      	bne.n	8004aa8 <HAL_TIM_PWM_Stop+0x104>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa6:	e003      	b.n	8004ab0 <HAL_TIM_PWM_Stop+0x10c>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40010000 	.word	0x40010000
 8004ac0:	40010400 	.word	0x40010400
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40014400 	.word	0x40014400
 8004acc:	40014800 	.word	0x40014800

08004ad0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <HAL_TIM_PWM_Start_IT+0x28>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	bf14      	ite	ne
 8004af0:	2301      	movne	r3, #1
 8004af2:	2300      	moveq	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	e03c      	b.n	8004b72 <HAL_TIM_PWM_Start_IT+0xa2>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d109      	bne.n	8004b12 <HAL_TIM_PWM_Start_IT+0x42>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	bf14      	ite	ne
 8004b0a:	2301      	movne	r3, #1
 8004b0c:	2300      	moveq	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	e02f      	b.n	8004b72 <HAL_TIM_PWM_Start_IT+0xa2>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d109      	bne.n	8004b2c <HAL_TIM_PWM_Start_IT+0x5c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	bf14      	ite	ne
 8004b24:	2301      	movne	r3, #1
 8004b26:	2300      	moveq	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	e022      	b.n	8004b72 <HAL_TIM_PWM_Start_IT+0xa2>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b0c      	cmp	r3, #12
 8004b30:	d109      	bne.n	8004b46 <HAL_TIM_PWM_Start_IT+0x76>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	bf14      	ite	ne
 8004b3e:	2301      	movne	r3, #1
 8004b40:	2300      	moveq	r3, #0
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	e015      	b.n	8004b72 <HAL_TIM_PWM_Start_IT+0xa2>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d109      	bne.n	8004b60 <HAL_TIM_PWM_Start_IT+0x90>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	bf14      	ite	ne
 8004b58:	2301      	movne	r3, #1
 8004b5a:	2300      	moveq	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	e008      	b.n	8004b72 <HAL_TIM_PWM_Start_IT+0xa2>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	bf14      	ite	ne
 8004b6c:	2301      	movne	r3, #1
 8004b6e:	2300      	moveq	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e0ec      	b.n	8004d54 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_PWM_Start_IT+0xba>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b88:	e023      	b.n	8004bd2 <HAL_TIM_PWM_Start_IT+0x102>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_PWM_Start_IT+0xca>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b98:	e01b      	b.n	8004bd2 <HAL_TIM_PWM_Start_IT+0x102>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_PWM_Start_IT+0xda>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba8:	e013      	b.n	8004bd2 <HAL_TIM_PWM_Start_IT+0x102>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b0c      	cmp	r3, #12
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_PWM_Start_IT+0xea>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bb8:	e00b      	b.n	8004bd2 <HAL_TIM_PWM_Start_IT+0x102>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d104      	bne.n	8004bca <HAL_TIM_PWM_Start_IT+0xfa>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc8:	e003      	b.n	8004bd2 <HAL_TIM_PWM_Start_IT+0x102>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d841      	bhi.n	8004c5c <HAL_TIM_PWM_Start_IT+0x18c>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <HAL_TIM_PWM_Start_IT+0x110>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004c5d 	.word	0x08004c5d
 8004be8:	08004c5d 	.word	0x08004c5d
 8004bec:	08004c5d 	.word	0x08004c5d
 8004bf0:	08004c27 	.word	0x08004c27
 8004bf4:	08004c5d 	.word	0x08004c5d
 8004bf8:	08004c5d 	.word	0x08004c5d
 8004bfc:	08004c5d 	.word	0x08004c5d
 8004c00:	08004c39 	.word	0x08004c39
 8004c04:	08004c5d 	.word	0x08004c5d
 8004c08:	08004c5d 	.word	0x08004c5d
 8004c0c:	08004c5d 	.word	0x08004c5d
 8004c10:	08004c4b 	.word	0x08004c4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0202 	orr.w	r2, r2, #2
 8004c22:	60da      	str	r2, [r3, #12]
      break;
 8004c24:	e01d      	b.n	8004c62 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0204 	orr.w	r2, r2, #4
 8004c34:	60da      	str	r2, [r3, #12]
      break;
 8004c36:	e014      	b.n	8004c62 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0208 	orr.w	r2, r2, #8
 8004c46:	60da      	str	r2, [r3, #12]
      break;
 8004c48:	e00b      	b.n	8004c62 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0210 	orr.w	r2, r2, #16
 8004c58:	60da      	str	r2, [r3, #12]
      break;
 8004c5a:	e002      	b.n	8004c62 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c60:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d174      	bne.n	8004d52 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 f8c1 	bl	8005df8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a38      	ldr	r2, [pc, #224]	; (8004d5c <HAL_TIM_PWM_Start_IT+0x28c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a36      	ldr	r2, [pc, #216]	; (8004d60 <HAL_TIM_PWM_Start_IT+0x290>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a35      	ldr	r2, [pc, #212]	; (8004d64 <HAL_TIM_PWM_Start_IT+0x294>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a33      	ldr	r2, [pc, #204]	; (8004d68 <HAL_TIM_PWM_Start_IT+0x298>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a32      	ldr	r2, [pc, #200]	; (8004d6c <HAL_TIM_PWM_Start_IT+0x29c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d101      	bne.n	8004cac <HAL_TIM_PWM_Start_IT+0x1dc>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e000      	b.n	8004cae <HAL_TIM_PWM_Start_IT+0x1de>
 8004cac:	2300      	movs	r3, #0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a25      	ldr	r2, [pc, #148]	; (8004d5c <HAL_TIM_PWM_Start_IT+0x28c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d022      	beq.n	8004d12 <HAL_TIM_PWM_Start_IT+0x242>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd4:	d01d      	beq.n	8004d12 <HAL_TIM_PWM_Start_IT+0x242>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a25      	ldr	r2, [pc, #148]	; (8004d70 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d018      	beq.n	8004d12 <HAL_TIM_PWM_Start_IT+0x242>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a23      	ldr	r2, [pc, #140]	; (8004d74 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <HAL_TIM_PWM_Start_IT+0x242>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a22      	ldr	r2, [pc, #136]	; (8004d78 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00e      	beq.n	8004d12 <HAL_TIM_PWM_Start_IT+0x242>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a19      	ldr	r2, [pc, #100]	; (8004d60 <HAL_TIM_PWM_Start_IT+0x290>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d009      	beq.n	8004d12 <HAL_TIM_PWM_Start_IT+0x242>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a1e      	ldr	r2, [pc, #120]	; (8004d7c <HAL_TIM_PWM_Start_IT+0x2ac>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d004      	beq.n	8004d12 <HAL_TIM_PWM_Start_IT+0x242>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a15      	ldr	r2, [pc, #84]	; (8004d64 <HAL_TIM_PWM_Start_IT+0x294>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d115      	bne.n	8004d3e <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	4b19      	ldr	r3, [pc, #100]	; (8004d80 <HAL_TIM_PWM_Start_IT+0x2b0>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b06      	cmp	r3, #6
 8004d22:	d015      	beq.n	8004d50 <HAL_TIM_PWM_Start_IT+0x280>
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2a:	d011      	beq.n	8004d50 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3c:	e008      	b.n	8004d50 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	e000      	b.n	8004d52 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d50:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	40010400 	.word	0x40010400
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40014400 	.word	0x40014400
 8004d6c:	40014800 	.word	0x40014800
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40001800 	.word	0x40001800
 8004d80:	00010007 	.word	0x00010007

08004d84 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	d841      	bhi.n	8004e1c <HAL_TIM_PWM_Stop_IT+0x98>
 8004d98:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004dd5 	.word	0x08004dd5
 8004da4:	08004e1d 	.word	0x08004e1d
 8004da8:	08004e1d 	.word	0x08004e1d
 8004dac:	08004e1d 	.word	0x08004e1d
 8004db0:	08004de7 	.word	0x08004de7
 8004db4:	08004e1d 	.word	0x08004e1d
 8004db8:	08004e1d 	.word	0x08004e1d
 8004dbc:	08004e1d 	.word	0x08004e1d
 8004dc0:	08004df9 	.word	0x08004df9
 8004dc4:	08004e1d 	.word	0x08004e1d
 8004dc8:	08004e1d 	.word	0x08004e1d
 8004dcc:	08004e1d 	.word	0x08004e1d
 8004dd0:	08004e0b 	.word	0x08004e0b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0202 	bic.w	r2, r2, #2
 8004de2:	60da      	str	r2, [r3, #12]
      break;
 8004de4:	e01d      	b.n	8004e22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0204 	bic.w	r2, r2, #4
 8004df4:	60da      	str	r2, [r3, #12]
      break;
 8004df6:	e014      	b.n	8004e22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0208 	bic.w	r2, r2, #8
 8004e06:	60da      	str	r2, [r3, #12]
      break;
 8004e08:	e00b      	b.n	8004e22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0210 	bic.w	r2, r2, #16
 8004e18:	60da      	str	r2, [r3, #12]
      break;
 8004e1a:	e002      	b.n	8004e22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e20:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f040 8081 	bne.w	8004f2c <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	6839      	ldr	r1, [r7, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 ffe0 	bl	8005df8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a3e      	ldr	r2, [pc, #248]	; (8004f38 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_TIM_PWM_Stop_IT+0xe6>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a3d      	ldr	r2, [pc, #244]	; (8004f3c <HAL_TIM_PWM_Stop_IT+0x1b8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_TIM_PWM_Stop_IT+0xe6>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a3b      	ldr	r2, [pc, #236]	; (8004f40 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_TIM_PWM_Stop_IT+0xe6>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a3a      	ldr	r2, [pc, #232]	; (8004f44 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_TIM_PWM_Stop_IT+0xe6>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a38      	ldr	r2, [pc, #224]	; (8004f48 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d101      	bne.n	8004e6e <HAL_TIM_PWM_Stop_IT+0xea>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <HAL_TIM_PWM_Stop_IT+0xec>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d017      	beq.n	8004ea4 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6a1a      	ldr	r2, [r3, #32]
 8004e7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10f      	bne.n	8004ea4 <HAL_TIM_PWM_Stop_IT+0x120>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6a1a      	ldr	r2, [r3, #32]
 8004e8a:	f240 4344 	movw	r3, #1092	; 0x444
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d107      	bne.n	8004ea4 <HAL_TIM_PWM_Stop_IT+0x120>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ea2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	f241 1311 	movw	r3, #4369	; 0x1111
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10f      	bne.n	8004ed4 <HAL_TIM_PWM_Stop_IT+0x150>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6a1a      	ldr	r2, [r3, #32]
 8004eba:	f240 4344 	movw	r3, #1092	; 0x444
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d107      	bne.n	8004ed4 <HAL_TIM_PWM_Stop_IT+0x150>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0201 	bic.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d104      	bne.n	8004ee4 <HAL_TIM_PWM_Stop_IT+0x160>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee2:	e023      	b.n	8004f2c <HAL_TIM_PWM_Stop_IT+0x1a8>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d104      	bne.n	8004ef4 <HAL_TIM_PWM_Stop_IT+0x170>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef2:	e01b      	b.n	8004f2c <HAL_TIM_PWM_Stop_IT+0x1a8>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d104      	bne.n	8004f04 <HAL_TIM_PWM_Stop_IT+0x180>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f02:	e013      	b.n	8004f2c <HAL_TIM_PWM_Stop_IT+0x1a8>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b0c      	cmp	r3, #12
 8004f08:	d104      	bne.n	8004f14 <HAL_TIM_PWM_Stop_IT+0x190>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f12:	e00b      	b.n	8004f2c <HAL_TIM_PWM_Stop_IT+0x1a8>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b10      	cmp	r3, #16
 8004f18:	d104      	bne.n	8004f24 <HAL_TIM_PWM_Stop_IT+0x1a0>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f22:	e003      	b.n	8004f2c <HAL_TIM_PWM_Stop_IT+0x1a8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	40010400 	.word	0x40010400
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40014400 	.word	0x40014400
 8004f48:	40014800 	.word	0x40014800

08004f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d020      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01b      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0202 	mvn.w	r2, #2
 8004f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fb00 	bl	800559c <HAL_TIM_IC_CaptureCallback>
 8004f9c:	e005      	b.n	8004faa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 faf2 	bl	8005588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fb fc73 	bl	8000890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d020      	beq.n	8004ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01b      	beq.n	8004ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0204 	mvn.w	r2, #4
 8004fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fada 	bl	800559c <HAL_TIM_IC_CaptureCallback>
 8004fe8:	e005      	b.n	8004ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 facc 	bl	8005588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fb fc4d 	bl	8000890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d020      	beq.n	8005048 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01b      	beq.n	8005048 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0208 	mvn.w	r2, #8
 8005018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2204      	movs	r2, #4
 800501e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fab4 	bl	800559c <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 faa6 	bl	8005588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7fb fc27 	bl	8000890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	2b00      	cmp	r3, #0
 8005050:	d020      	beq.n	8005094 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01b      	beq.n	8005094 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0210 	mvn.w	r2, #16
 8005064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2208      	movs	r2, #8
 800506a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fa8e 	bl	800559c <HAL_TIM_IC_CaptureCallback>
 8005080:	e005      	b.n	800508e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa80 	bl	8005588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7fb fc01 	bl	8000890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0201 	mvn.w	r2, #1
 80050b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fa5e 	bl	8005574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d104      	bne.n	80050cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00c      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80050de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 ff47 	bl	8005f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00c      	beq.n	800510a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 ff3f 	bl	8005f88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00c      	beq.n	800512e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d007      	beq.n	800512e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fa41 	bl	80055b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00c      	beq.n	8005152 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d007      	beq.n	8005152 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f06f 0220 	mvn.w	r2, #32
 800514a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 ff07 	bl	8005f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005152:	bf00      	nop
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005176:	2302      	movs	r3, #2
 8005178:	e0ff      	b.n	800537a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b14      	cmp	r3, #20
 8005186:	f200 80f0 	bhi.w	800536a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800518a:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051e5 	.word	0x080051e5
 8005194:	0800536b 	.word	0x0800536b
 8005198:	0800536b 	.word	0x0800536b
 800519c:	0800536b 	.word	0x0800536b
 80051a0:	08005225 	.word	0x08005225
 80051a4:	0800536b 	.word	0x0800536b
 80051a8:	0800536b 	.word	0x0800536b
 80051ac:	0800536b 	.word	0x0800536b
 80051b0:	08005267 	.word	0x08005267
 80051b4:	0800536b 	.word	0x0800536b
 80051b8:	0800536b 	.word	0x0800536b
 80051bc:	0800536b 	.word	0x0800536b
 80051c0:	080052a7 	.word	0x080052a7
 80051c4:	0800536b 	.word	0x0800536b
 80051c8:	0800536b 	.word	0x0800536b
 80051cc:	0800536b 	.word	0x0800536b
 80051d0:	080052e9 	.word	0x080052e9
 80051d4:	0800536b 	.word	0x0800536b
 80051d8:	0800536b 	.word	0x0800536b
 80051dc:	0800536b 	.word	0x0800536b
 80051e0:	08005329 	.word	0x08005329
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fa90 	bl	8005710 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0208 	orr.w	r2, r2, #8
 80051fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0204 	bic.w	r2, r2, #4
 800520e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6999      	ldr	r1, [r3, #24]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	619a      	str	r2, [r3, #24]
      break;
 8005222:	e0a5      	b.n	8005370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fb00 	bl	8005830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6999      	ldr	r1, [r3, #24]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	021a      	lsls	r2, r3, #8
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	619a      	str	r2, [r3, #24]
      break;
 8005264:	e084      	b.n	8005370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fb69 	bl	8005944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0208 	orr.w	r2, r2, #8
 8005280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0204 	bic.w	r2, r2, #4
 8005290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69d9      	ldr	r1, [r3, #28]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	61da      	str	r2, [r3, #28]
      break;
 80052a4:	e064      	b.n	8005370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fbd1 	bl	8005a54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69d9      	ldr	r1, [r3, #28]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	021a      	lsls	r2, r3, #8
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	61da      	str	r2, [r3, #28]
      break;
 80052e6:	e043      	b.n	8005370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fc1a 	bl	8005b28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0208 	orr.w	r2, r2, #8
 8005302:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0204 	bic.w	r2, r2, #4
 8005312:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005326:	e023      	b.n	8005370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fc5e 	bl	8005bf0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005342:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005352:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	021a      	lsls	r2, r3, #8
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005368:	e002      	b.n	8005370 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	75fb      	strb	r3, [r7, #23]
      break;
 800536e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005378:	7dfb      	ldrb	r3, [r7, #23]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop

08005384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_TIM_ConfigClockSource+0x1c>
 800539c:	2302      	movs	r3, #2
 800539e:	e0dc      	b.n	800555a <HAL_TIM_ConfigClockSource+0x1d6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	4b6a      	ldr	r3, [pc, #424]	; (8005564 <HAL_TIM_ConfigClockSource+0x1e0>)
 80053bc:	4013      	ands	r3, r2
 80053be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a64      	ldr	r2, [pc, #400]	; (8005568 <HAL_TIM_ConfigClockSource+0x1e4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	f000 80a9 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 80053dc:	4a62      	ldr	r2, [pc, #392]	; (8005568 <HAL_TIM_ConfigClockSource+0x1e4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	f200 80ae 	bhi.w	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 80053e4:	4a61      	ldr	r2, [pc, #388]	; (800556c <HAL_TIM_ConfigClockSource+0x1e8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	f000 80a1 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 80053ec:	4a5f      	ldr	r2, [pc, #380]	; (800556c <HAL_TIM_ConfigClockSource+0x1e8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	f200 80a6 	bhi.w	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 80053f4:	4a5e      	ldr	r2, [pc, #376]	; (8005570 <HAL_TIM_ConfigClockSource+0x1ec>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	f000 8099 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 80053fc:	4a5c      	ldr	r2, [pc, #368]	; (8005570 <HAL_TIM_ConfigClockSource+0x1ec>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	f200 809e 	bhi.w	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005404:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005408:	f000 8091 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 800540c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005410:	f200 8096 	bhi.w	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005418:	f000 8089 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 800541c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005420:	f200 808e 	bhi.w	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005428:	d03e      	beq.n	80054a8 <HAL_TIM_ConfigClockSource+0x124>
 800542a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800542e:	f200 8087 	bhi.w	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	f000 8086 	beq.w	8005546 <HAL_TIM_ConfigClockSource+0x1c2>
 800543a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543e:	d87f      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005440:	2b70      	cmp	r3, #112	; 0x70
 8005442:	d01a      	beq.n	800547a <HAL_TIM_ConfigClockSource+0xf6>
 8005444:	2b70      	cmp	r3, #112	; 0x70
 8005446:	d87b      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005448:	2b60      	cmp	r3, #96	; 0x60
 800544a:	d050      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x16a>
 800544c:	2b60      	cmp	r3, #96	; 0x60
 800544e:	d877      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005450:	2b50      	cmp	r3, #80	; 0x50
 8005452:	d03c      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x14a>
 8005454:	2b50      	cmp	r3, #80	; 0x50
 8005456:	d873      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005458:	2b40      	cmp	r3, #64	; 0x40
 800545a:	d058      	beq.n	800550e <HAL_TIM_ConfigClockSource+0x18a>
 800545c:	2b40      	cmp	r3, #64	; 0x40
 800545e:	d86f      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005460:	2b30      	cmp	r3, #48	; 0x30
 8005462:	d064      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 8005464:	2b30      	cmp	r3, #48	; 0x30
 8005466:	d86b      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005468:	2b20      	cmp	r3, #32
 800546a:	d060      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 800546c:	2b20      	cmp	r3, #32
 800546e:	d867      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d05c      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 8005474:	2b10      	cmp	r3, #16
 8005476:	d05a      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 8005478:	e062      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800548a:	f000 fc95 	bl	8005db8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800549c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	609a      	str	r2, [r3, #8]
      break;
 80054a6:	e04f      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054b8:	f000 fc7e 	bl	8005db8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ca:	609a      	str	r2, [r3, #8]
      break;
 80054cc:	e03c      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054da:	461a      	mov	r2, r3
 80054dc:	f000 fbee 	bl	8005cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2150      	movs	r1, #80	; 0x50
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fc48 	bl	8005d7c <TIM_ITRx_SetConfig>
      break;
 80054ec:	e02c      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054fa:	461a      	mov	r2, r3
 80054fc:	f000 fc0d 	bl	8005d1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2160      	movs	r1, #96	; 0x60
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fc38 	bl	8005d7c <TIM_ITRx_SetConfig>
      break;
 800550c:	e01c      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800551a:	461a      	mov	r2, r3
 800551c:	f000 fbce 	bl	8005cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2140      	movs	r1, #64	; 0x40
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fc28 	bl	8005d7c <TIM_ITRx_SetConfig>
      break;
 800552c:	e00c      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f000 fc1f 	bl	8005d7c <TIM_ITRx_SetConfig>
      break;
 800553e:	e003      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	73fb      	strb	r3, [r7, #15]
      break;
 8005544:	e000      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	ffceff88 	.word	0xffceff88
 8005568:	00100040 	.word	0x00100040
 800556c:	00100030 	.word	0x00100030
 8005570:	00100020 	.word	0x00100020

08005574 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a46      	ldr	r2, [pc, #280]	; (80056f0 <TIM_Base_SetConfig+0x12c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e2:	d00f      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a43      	ldr	r2, [pc, #268]	; (80056f4 <TIM_Base_SetConfig+0x130>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00b      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a42      	ldr	r2, [pc, #264]	; (80056f8 <TIM_Base_SetConfig+0x134>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a41      	ldr	r2, [pc, #260]	; (80056fc <TIM_Base_SetConfig+0x138>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a40      	ldr	r2, [pc, #256]	; (8005700 <TIM_Base_SetConfig+0x13c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d108      	bne.n	8005616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a35      	ldr	r2, [pc, #212]	; (80056f0 <TIM_Base_SetConfig+0x12c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01f      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005624:	d01b      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a32      	ldr	r2, [pc, #200]	; (80056f4 <TIM_Base_SetConfig+0x130>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d017      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a31      	ldr	r2, [pc, #196]	; (80056f8 <TIM_Base_SetConfig+0x134>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a30      	ldr	r2, [pc, #192]	; (80056fc <TIM_Base_SetConfig+0x138>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00f      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2f      	ldr	r2, [pc, #188]	; (8005700 <TIM_Base_SetConfig+0x13c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00b      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2e      	ldr	r2, [pc, #184]	; (8005704 <TIM_Base_SetConfig+0x140>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d007      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a2d      	ldr	r2, [pc, #180]	; (8005708 <TIM_Base_SetConfig+0x144>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d003      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a2c      	ldr	r2, [pc, #176]	; (800570c <TIM_Base_SetConfig+0x148>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d108      	bne.n	8005670 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a16      	ldr	r2, [pc, #88]	; (80056f0 <TIM_Base_SetConfig+0x12c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00f      	beq.n	80056bc <TIM_Base_SetConfig+0xf8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a18      	ldr	r2, [pc, #96]	; (8005700 <TIM_Base_SetConfig+0x13c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_Base_SetConfig+0xf8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a17      	ldr	r2, [pc, #92]	; (8005704 <TIM_Base_SetConfig+0x140>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_Base_SetConfig+0xf8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a16      	ldr	r2, [pc, #88]	; (8005708 <TIM_Base_SetConfig+0x144>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0xf8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a15      	ldr	r2, [pc, #84]	; (800570c <TIM_Base_SetConfig+0x148>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d103      	bne.n	80056c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d105      	bne.n	80056e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f023 0201 	bic.w	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	611a      	str	r2, [r3, #16]
  }
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40000c00 	.word	0x40000c00
 8005700:	40010400 	.word	0x40010400
 8005704:	40014000 	.word	0x40014000
 8005708:	40014400 	.word	0x40014400
 800570c:	40014800 	.word	0x40014800

08005710 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	f023 0201 	bic.w	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4b37      	ldr	r3, [pc, #220]	; (8005818 <TIM_OC1_SetConfig+0x108>)
 800573c:	4013      	ands	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0303 	bic.w	r3, r3, #3
 8005746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f023 0302 	bic.w	r3, r3, #2
 8005758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a2d      	ldr	r2, [pc, #180]	; (800581c <TIM_OC1_SetConfig+0x10c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00f      	beq.n	800578c <TIM_OC1_SetConfig+0x7c>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a2c      	ldr	r2, [pc, #176]	; (8005820 <TIM_OC1_SetConfig+0x110>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00b      	beq.n	800578c <TIM_OC1_SetConfig+0x7c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a2b      	ldr	r2, [pc, #172]	; (8005824 <TIM_OC1_SetConfig+0x114>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <TIM_OC1_SetConfig+0x7c>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a2a      	ldr	r2, [pc, #168]	; (8005828 <TIM_OC1_SetConfig+0x118>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_OC1_SetConfig+0x7c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a29      	ldr	r2, [pc, #164]	; (800582c <TIM_OC1_SetConfig+0x11c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d10c      	bne.n	80057a6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 0308 	bic.w	r3, r3, #8
 8005792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f023 0304 	bic.w	r3, r3, #4
 80057a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a1c      	ldr	r2, [pc, #112]	; (800581c <TIM_OC1_SetConfig+0x10c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00f      	beq.n	80057ce <TIM_OC1_SetConfig+0xbe>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <TIM_OC1_SetConfig+0x110>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00b      	beq.n	80057ce <TIM_OC1_SetConfig+0xbe>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a1a      	ldr	r2, [pc, #104]	; (8005824 <TIM_OC1_SetConfig+0x114>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d007      	beq.n	80057ce <TIM_OC1_SetConfig+0xbe>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a19      	ldr	r2, [pc, #100]	; (8005828 <TIM_OC1_SetConfig+0x118>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d003      	beq.n	80057ce <TIM_OC1_SetConfig+0xbe>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a18      	ldr	r2, [pc, #96]	; (800582c <TIM_OC1_SetConfig+0x11c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d111      	bne.n	80057f2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	621a      	str	r2, [r3, #32]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	fffeff8f 	.word	0xfffeff8f
 800581c:	40010000 	.word	0x40010000
 8005820:	40010400 	.word	0x40010400
 8005824:	40014000 	.word	0x40014000
 8005828:	40014400 	.word	0x40014400
 800582c:	40014800 	.word	0x40014800

08005830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	f023 0210 	bic.w	r2, r3, #16
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4b34      	ldr	r3, [pc, #208]	; (800592c <TIM_OC2_SetConfig+0xfc>)
 800585c:	4013      	ands	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f023 0320 	bic.w	r3, r3, #32
 800587a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a29      	ldr	r2, [pc, #164]	; (8005930 <TIM_OC2_SetConfig+0x100>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_OC2_SetConfig+0x68>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a28      	ldr	r2, [pc, #160]	; (8005934 <TIM_OC2_SetConfig+0x104>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d10d      	bne.n	80058b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800589e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a1e      	ldr	r2, [pc, #120]	; (8005930 <TIM_OC2_SetConfig+0x100>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00f      	beq.n	80058dc <TIM_OC2_SetConfig+0xac>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <TIM_OC2_SetConfig+0x104>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00b      	beq.n	80058dc <TIM_OC2_SetConfig+0xac>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <TIM_OC2_SetConfig+0x108>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d007      	beq.n	80058dc <TIM_OC2_SetConfig+0xac>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a1b      	ldr	r2, [pc, #108]	; (800593c <TIM_OC2_SetConfig+0x10c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_OC2_SetConfig+0xac>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <TIM_OC2_SetConfig+0x110>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d113      	bne.n	8005904 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	feff8fff 	.word	0xfeff8fff
 8005930:	40010000 	.word	0x40010000
 8005934:	40010400 	.word	0x40010400
 8005938:	40014000 	.word	0x40014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800

08005944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4b33      	ldr	r3, [pc, #204]	; (8005a3c <TIM_OC3_SetConfig+0xf8>)
 8005970:	4013      	ands	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0303 	bic.w	r3, r3, #3
 800597a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800598c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a28      	ldr	r2, [pc, #160]	; (8005a40 <TIM_OC3_SetConfig+0xfc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d003      	beq.n	80059aa <TIM_OC3_SetConfig+0x66>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a27      	ldr	r2, [pc, #156]	; (8005a44 <TIM_OC3_SetConfig+0x100>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d10d      	bne.n	80059c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1d      	ldr	r2, [pc, #116]	; (8005a40 <TIM_OC3_SetConfig+0xfc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00f      	beq.n	80059ee <TIM_OC3_SetConfig+0xaa>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a1c      	ldr	r2, [pc, #112]	; (8005a44 <TIM_OC3_SetConfig+0x100>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00b      	beq.n	80059ee <TIM_OC3_SetConfig+0xaa>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a1b      	ldr	r2, [pc, #108]	; (8005a48 <TIM_OC3_SetConfig+0x104>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d007      	beq.n	80059ee <TIM_OC3_SetConfig+0xaa>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a1a      	ldr	r2, [pc, #104]	; (8005a4c <TIM_OC3_SetConfig+0x108>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_OC3_SetConfig+0xaa>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a19      	ldr	r2, [pc, #100]	; (8005a50 <TIM_OC3_SetConfig+0x10c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d113      	bne.n	8005a16 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	621a      	str	r2, [r3, #32]
}
 8005a30:	bf00      	nop
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	fffeff8f 	.word	0xfffeff8f
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40010400 	.word	0x40010400
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400
 8005a50:	40014800 	.word	0x40014800

08005a54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <TIM_OC4_SetConfig+0xbc>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	031b      	lsls	r3, r3, #12
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a19      	ldr	r2, [pc, #100]	; (8005b14 <TIM_OC4_SetConfig+0xc0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00f      	beq.n	8005ad4 <TIM_OC4_SetConfig+0x80>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a18      	ldr	r2, [pc, #96]	; (8005b18 <TIM_OC4_SetConfig+0xc4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00b      	beq.n	8005ad4 <TIM_OC4_SetConfig+0x80>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a17      	ldr	r2, [pc, #92]	; (8005b1c <TIM_OC4_SetConfig+0xc8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d007      	beq.n	8005ad4 <TIM_OC4_SetConfig+0x80>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a16      	ldr	r2, [pc, #88]	; (8005b20 <TIM_OC4_SetConfig+0xcc>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_OC4_SetConfig+0x80>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a15      	ldr	r2, [pc, #84]	; (8005b24 <TIM_OC4_SetConfig+0xd0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d109      	bne.n	8005ae8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	019b      	lsls	r3, r3, #6
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	feff8fff 	.word	0xfeff8fff
 8005b14:	40010000 	.word	0x40010000
 8005b18:	40010400 	.word	0x40010400
 8005b1c:	40014000 	.word	0x40014000
 8005b20:	40014400 	.word	0x40014400
 8005b24:	40014800 	.word	0x40014800

08005b28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4b21      	ldr	r3, [pc, #132]	; (8005bd8 <TIM_OC5_SetConfig+0xb0>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	041b      	lsls	r3, r3, #16
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <TIM_OC5_SetConfig+0xb4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00f      	beq.n	8005b9e <TIM_OC5_SetConfig+0x76>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a17      	ldr	r2, [pc, #92]	; (8005be0 <TIM_OC5_SetConfig+0xb8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00b      	beq.n	8005b9e <TIM_OC5_SetConfig+0x76>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a16      	ldr	r2, [pc, #88]	; (8005be4 <TIM_OC5_SetConfig+0xbc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <TIM_OC5_SetConfig+0x76>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <TIM_OC5_SetConfig+0xc0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d003      	beq.n	8005b9e <TIM_OC5_SetConfig+0x76>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a14      	ldr	r2, [pc, #80]	; (8005bec <TIM_OC5_SetConfig+0xc4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d109      	bne.n	8005bb2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	621a      	str	r2, [r3, #32]
}
 8005bcc:	bf00      	nop
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	fffeff8f 	.word	0xfffeff8f
 8005bdc:	40010000 	.word	0x40010000
 8005be0:	40010400 	.word	0x40010400
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40014400 	.word	0x40014400
 8005bec:	40014800 	.word	0x40014800

08005bf0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4b22      	ldr	r3, [pc, #136]	; (8005ca4 <TIM_OC6_SetConfig+0xb4>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	051b      	lsls	r3, r3, #20
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a19      	ldr	r2, [pc, #100]	; (8005ca8 <TIM_OC6_SetConfig+0xb8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00f      	beq.n	8005c68 <TIM_OC6_SetConfig+0x78>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a18      	ldr	r2, [pc, #96]	; (8005cac <TIM_OC6_SetConfig+0xbc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00b      	beq.n	8005c68 <TIM_OC6_SetConfig+0x78>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <TIM_OC6_SetConfig+0xc0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d007      	beq.n	8005c68 <TIM_OC6_SetConfig+0x78>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a16      	ldr	r2, [pc, #88]	; (8005cb4 <TIM_OC6_SetConfig+0xc4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d003      	beq.n	8005c68 <TIM_OC6_SetConfig+0x78>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a15      	ldr	r2, [pc, #84]	; (8005cb8 <TIM_OC6_SetConfig+0xc8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d109      	bne.n	8005c7c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	029b      	lsls	r3, r3, #10
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	621a      	str	r2, [r3, #32]
}
 8005c96:	bf00      	nop
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	feff8fff 	.word	0xfeff8fff
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40010400 	.word	0x40010400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800

08005cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f023 0201 	bic.w	r2, r3, #1
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f023 030a 	bic.w	r3, r3, #10
 8005cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	621a      	str	r2, [r3, #32]
}
 8005d0e:	bf00      	nop
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b087      	sub	sp, #28
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f023 0210 	bic.w	r2, r3, #16
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	031b      	lsls	r3, r3, #12
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
	...

08005d7c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <TIM_ITRx_SetConfig+0x38>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f043 0307 	orr.w	r3, r3, #7
 8005d9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	609a      	str	r2, [r3, #8]
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	ffcfff8f 	.word	0xffcfff8f

08005db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	021a      	lsls	r2, r3, #8
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	609a      	str	r2, [r3, #8]
}
 8005dec:	bf00      	nop
 8005dee:	371c      	adds	r7, #28
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a1a      	ldr	r2, [r3, #32]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	401a      	ands	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6a1a      	ldr	r2, [r3, #32]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e30:	431a      	orrs	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	621a      	str	r2, [r3, #32]
}
 8005e36:	bf00      	nop
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e06d      	b.n	8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a30      	ldr	r2, [pc, #192]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a2f      	ldr	r2, [pc, #188]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d108      	bne.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a20      	ldr	r2, [pc, #128]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d022      	beq.n	8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ece:	d01d      	beq.n	8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1d      	ldr	r2, [pc, #116]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d018      	beq.n	8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1c      	ldr	r2, [pc, #112]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d013      	beq.n	8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1a      	ldr	r2, [pc, #104]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00e      	beq.n	8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d009      	beq.n	8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a16      	ldr	r2, [pc, #88]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d004      	beq.n	8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a15      	ldr	r2, [pc, #84]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d10c      	bne.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	40010000 	.word	0x40010000
 8005f48:	40010400 	.word	0x40010400
 8005f4c:	40000400 	.word	0x40000400
 8005f50:	40000800 	.word	0x40000800
 8005f54:	40000c00 	.word	0x40000c00
 8005f58:	40001800 	.word	0x40001800
 8005f5c:	40014000 	.word	0x40014000

08005f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e042      	b.n	8006034 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fa ffb7 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2224      	movs	r2, #36	; 0x24
 8005fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0201 	bic.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fd90 	bl	8006b0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f825 	bl	800603c <UART_SetConfig>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d101      	bne.n	8005ffc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e01b      	b.n	8006034 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800600a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800601a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0201 	orr.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fe0f 	bl	8006c50 <UART_CheckIdleState>
 8006032:	4603      	mov	r3, r0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800603c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006040:	b092      	sub	sp, #72	; 0x48
 8006042:	af00      	add	r7, sp, #0
 8006044:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	431a      	orrs	r2, r3
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	431a      	orrs	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	4313      	orrs	r3, r2
 8006062:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4bbe      	ldr	r3, [pc, #760]	; (8006364 <UART_SetConfig+0x328>)
 800606c:	4013      	ands	r3, r2
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006074:	430b      	orrs	r3, r1
 8006076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4ab3      	ldr	r2, [pc, #716]	; (8006368 <UART_SetConfig+0x32c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d004      	beq.n	80060a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060a4:	4313      	orrs	r3, r2
 80060a6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	4baf      	ldr	r3, [pc, #700]	; (800636c <UART_SetConfig+0x330>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	6812      	ldr	r2, [r2, #0]
 80060b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c2:	f023 010f 	bic.w	r1, r3, #15
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4aa6      	ldr	r2, [pc, #664]	; (8006370 <UART_SetConfig+0x334>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d177      	bne.n	80061cc <UART_SetConfig+0x190>
 80060dc:	4ba5      	ldr	r3, [pc, #660]	; (8006374 <UART_SetConfig+0x338>)
 80060de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060e4:	2b28      	cmp	r3, #40	; 0x28
 80060e6:	d86d      	bhi.n	80061c4 <UART_SetConfig+0x188>
 80060e8:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <UART_SetConfig+0xb4>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	08006195 	.word	0x08006195
 80060f4:	080061c5 	.word	0x080061c5
 80060f8:	080061c5 	.word	0x080061c5
 80060fc:	080061c5 	.word	0x080061c5
 8006100:	080061c5 	.word	0x080061c5
 8006104:	080061c5 	.word	0x080061c5
 8006108:	080061c5 	.word	0x080061c5
 800610c:	080061c5 	.word	0x080061c5
 8006110:	0800619d 	.word	0x0800619d
 8006114:	080061c5 	.word	0x080061c5
 8006118:	080061c5 	.word	0x080061c5
 800611c:	080061c5 	.word	0x080061c5
 8006120:	080061c5 	.word	0x080061c5
 8006124:	080061c5 	.word	0x080061c5
 8006128:	080061c5 	.word	0x080061c5
 800612c:	080061c5 	.word	0x080061c5
 8006130:	080061a5 	.word	0x080061a5
 8006134:	080061c5 	.word	0x080061c5
 8006138:	080061c5 	.word	0x080061c5
 800613c:	080061c5 	.word	0x080061c5
 8006140:	080061c5 	.word	0x080061c5
 8006144:	080061c5 	.word	0x080061c5
 8006148:	080061c5 	.word	0x080061c5
 800614c:	080061c5 	.word	0x080061c5
 8006150:	080061ad 	.word	0x080061ad
 8006154:	080061c5 	.word	0x080061c5
 8006158:	080061c5 	.word	0x080061c5
 800615c:	080061c5 	.word	0x080061c5
 8006160:	080061c5 	.word	0x080061c5
 8006164:	080061c5 	.word	0x080061c5
 8006168:	080061c5 	.word	0x080061c5
 800616c:	080061c5 	.word	0x080061c5
 8006170:	080061b5 	.word	0x080061b5
 8006174:	080061c5 	.word	0x080061c5
 8006178:	080061c5 	.word	0x080061c5
 800617c:	080061c5 	.word	0x080061c5
 8006180:	080061c5 	.word	0x080061c5
 8006184:	080061c5 	.word	0x080061c5
 8006188:	080061c5 	.word	0x080061c5
 800618c:	080061c5 	.word	0x080061c5
 8006190:	080061bd 	.word	0x080061bd
 8006194:	2301      	movs	r3, #1
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619a:	e222      	b.n	80065e2 <UART_SetConfig+0x5a6>
 800619c:	2304      	movs	r3, #4
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061a2:	e21e      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80061a4:	2308      	movs	r3, #8
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061aa:	e21a      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80061ac:	2310      	movs	r3, #16
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061b2:	e216      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80061b4:	2320      	movs	r3, #32
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ba:	e212      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80061bc:	2340      	movs	r3, #64	; 0x40
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061c2:	e20e      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80061c4:	2380      	movs	r3, #128	; 0x80
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ca:	e20a      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a69      	ldr	r2, [pc, #420]	; (8006378 <UART_SetConfig+0x33c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d130      	bne.n	8006238 <UART_SetConfig+0x1fc>
 80061d6:	4b67      	ldr	r3, [pc, #412]	; (8006374 <UART_SetConfig+0x338>)
 80061d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	2b05      	cmp	r3, #5
 80061e0:	d826      	bhi.n	8006230 <UART_SetConfig+0x1f4>
 80061e2:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <UART_SetConfig+0x1ac>)
 80061e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e8:	08006201 	.word	0x08006201
 80061ec:	08006209 	.word	0x08006209
 80061f0:	08006211 	.word	0x08006211
 80061f4:	08006219 	.word	0x08006219
 80061f8:	08006221 	.word	0x08006221
 80061fc:	08006229 	.word	0x08006229
 8006200:	2300      	movs	r3, #0
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006206:	e1ec      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006208:	2304      	movs	r3, #4
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620e:	e1e8      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006210:	2308      	movs	r3, #8
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006216:	e1e4      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006218:	2310      	movs	r3, #16
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621e:	e1e0      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006220:	2320      	movs	r3, #32
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006226:	e1dc      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006228:	2340      	movs	r3, #64	; 0x40
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622e:	e1d8      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006230:	2380      	movs	r3, #128	; 0x80
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006236:	e1d4      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a4f      	ldr	r2, [pc, #316]	; (800637c <UART_SetConfig+0x340>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d130      	bne.n	80062a4 <UART_SetConfig+0x268>
 8006242:	4b4c      	ldr	r3, [pc, #304]	; (8006374 <UART_SetConfig+0x338>)
 8006244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	2b05      	cmp	r3, #5
 800624c:	d826      	bhi.n	800629c <UART_SetConfig+0x260>
 800624e:	a201      	add	r2, pc, #4	; (adr r2, 8006254 <UART_SetConfig+0x218>)
 8006250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006254:	0800626d 	.word	0x0800626d
 8006258:	08006275 	.word	0x08006275
 800625c:	0800627d 	.word	0x0800627d
 8006260:	08006285 	.word	0x08006285
 8006264:	0800628d 	.word	0x0800628d
 8006268:	08006295 	.word	0x08006295
 800626c:	2300      	movs	r3, #0
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006272:	e1b6      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006274:	2304      	movs	r3, #4
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627a:	e1b2      	b.n	80065e2 <UART_SetConfig+0x5a6>
 800627c:	2308      	movs	r3, #8
 800627e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006282:	e1ae      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006284:	2310      	movs	r3, #16
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628a:	e1aa      	b.n	80065e2 <UART_SetConfig+0x5a6>
 800628c:	2320      	movs	r3, #32
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006292:	e1a6      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006294:	2340      	movs	r3, #64	; 0x40
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629a:	e1a2      	b.n	80065e2 <UART_SetConfig+0x5a6>
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a2:	e19e      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a35      	ldr	r2, [pc, #212]	; (8006380 <UART_SetConfig+0x344>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d130      	bne.n	8006310 <UART_SetConfig+0x2d4>
 80062ae:	4b31      	ldr	r3, [pc, #196]	; (8006374 <UART_SetConfig+0x338>)
 80062b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	2b05      	cmp	r3, #5
 80062b8:	d826      	bhi.n	8006308 <UART_SetConfig+0x2cc>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <UART_SetConfig+0x284>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	080062d9 	.word	0x080062d9
 80062c4:	080062e1 	.word	0x080062e1
 80062c8:	080062e9 	.word	0x080062e9
 80062cc:	080062f1 	.word	0x080062f1
 80062d0:	080062f9 	.word	0x080062f9
 80062d4:	08006301 	.word	0x08006301
 80062d8:	2300      	movs	r3, #0
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062de:	e180      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80062e0:	2304      	movs	r3, #4
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e6:	e17c      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80062e8:	2308      	movs	r3, #8
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ee:	e178      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80062f0:	2310      	movs	r3, #16
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f6:	e174      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80062f8:	2320      	movs	r3, #32
 80062fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fe:	e170      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006300:	2340      	movs	r3, #64	; 0x40
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006306:	e16c      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630e:	e168      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1b      	ldr	r2, [pc, #108]	; (8006384 <UART_SetConfig+0x348>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d142      	bne.n	80063a0 <UART_SetConfig+0x364>
 800631a:	4b16      	ldr	r3, [pc, #88]	; (8006374 <UART_SetConfig+0x338>)
 800631c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	2b05      	cmp	r3, #5
 8006324:	d838      	bhi.n	8006398 <UART_SetConfig+0x35c>
 8006326:	a201      	add	r2, pc, #4	; (adr r2, 800632c <UART_SetConfig+0x2f0>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	08006345 	.word	0x08006345
 8006330:	0800634d 	.word	0x0800634d
 8006334:	08006355 	.word	0x08006355
 8006338:	0800635d 	.word	0x0800635d
 800633c:	08006389 	.word	0x08006389
 8006340:	08006391 	.word	0x08006391
 8006344:	2300      	movs	r3, #0
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634a:	e14a      	b.n	80065e2 <UART_SetConfig+0x5a6>
 800634c:	2304      	movs	r3, #4
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006352:	e146      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006354:	2308      	movs	r3, #8
 8006356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635a:	e142      	b.n	80065e2 <UART_SetConfig+0x5a6>
 800635c:	2310      	movs	r3, #16
 800635e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006362:	e13e      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006364:	cfff69f3 	.word	0xcfff69f3
 8006368:	58000c00 	.word	0x58000c00
 800636c:	11fff4ff 	.word	0x11fff4ff
 8006370:	40011000 	.word	0x40011000
 8006374:	58024400 	.word	0x58024400
 8006378:	40004400 	.word	0x40004400
 800637c:	40004800 	.word	0x40004800
 8006380:	40004c00 	.word	0x40004c00
 8006384:	40005000 	.word	0x40005000
 8006388:	2320      	movs	r3, #32
 800638a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638e:	e128      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006390:	2340      	movs	r3, #64	; 0x40
 8006392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006396:	e124      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006398:	2380      	movs	r3, #128	; 0x80
 800639a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639e:	e120      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4acb      	ldr	r2, [pc, #812]	; (80066d4 <UART_SetConfig+0x698>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d176      	bne.n	8006498 <UART_SetConfig+0x45c>
 80063aa:	4bcb      	ldr	r3, [pc, #812]	; (80066d8 <UART_SetConfig+0x69c>)
 80063ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063b2:	2b28      	cmp	r3, #40	; 0x28
 80063b4:	d86c      	bhi.n	8006490 <UART_SetConfig+0x454>
 80063b6:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <UART_SetConfig+0x380>)
 80063b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063bc:	08006461 	.word	0x08006461
 80063c0:	08006491 	.word	0x08006491
 80063c4:	08006491 	.word	0x08006491
 80063c8:	08006491 	.word	0x08006491
 80063cc:	08006491 	.word	0x08006491
 80063d0:	08006491 	.word	0x08006491
 80063d4:	08006491 	.word	0x08006491
 80063d8:	08006491 	.word	0x08006491
 80063dc:	08006469 	.word	0x08006469
 80063e0:	08006491 	.word	0x08006491
 80063e4:	08006491 	.word	0x08006491
 80063e8:	08006491 	.word	0x08006491
 80063ec:	08006491 	.word	0x08006491
 80063f0:	08006491 	.word	0x08006491
 80063f4:	08006491 	.word	0x08006491
 80063f8:	08006491 	.word	0x08006491
 80063fc:	08006471 	.word	0x08006471
 8006400:	08006491 	.word	0x08006491
 8006404:	08006491 	.word	0x08006491
 8006408:	08006491 	.word	0x08006491
 800640c:	08006491 	.word	0x08006491
 8006410:	08006491 	.word	0x08006491
 8006414:	08006491 	.word	0x08006491
 8006418:	08006491 	.word	0x08006491
 800641c:	08006479 	.word	0x08006479
 8006420:	08006491 	.word	0x08006491
 8006424:	08006491 	.word	0x08006491
 8006428:	08006491 	.word	0x08006491
 800642c:	08006491 	.word	0x08006491
 8006430:	08006491 	.word	0x08006491
 8006434:	08006491 	.word	0x08006491
 8006438:	08006491 	.word	0x08006491
 800643c:	08006481 	.word	0x08006481
 8006440:	08006491 	.word	0x08006491
 8006444:	08006491 	.word	0x08006491
 8006448:	08006491 	.word	0x08006491
 800644c:	08006491 	.word	0x08006491
 8006450:	08006491 	.word	0x08006491
 8006454:	08006491 	.word	0x08006491
 8006458:	08006491 	.word	0x08006491
 800645c:	08006489 	.word	0x08006489
 8006460:	2301      	movs	r3, #1
 8006462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006466:	e0bc      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006468:	2304      	movs	r3, #4
 800646a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646e:	e0b8      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006470:	2308      	movs	r3, #8
 8006472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006476:	e0b4      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006478:	2310      	movs	r3, #16
 800647a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800647e:	e0b0      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006480:	2320      	movs	r3, #32
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006486:	e0ac      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006488:	2340      	movs	r3, #64	; 0x40
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648e:	e0a8      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006490:	2380      	movs	r3, #128	; 0x80
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006496:	e0a4      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a8f      	ldr	r2, [pc, #572]	; (80066dc <UART_SetConfig+0x6a0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d130      	bne.n	8006504 <UART_SetConfig+0x4c8>
 80064a2:	4b8d      	ldr	r3, [pc, #564]	; (80066d8 <UART_SetConfig+0x69c>)
 80064a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a6:	f003 0307 	and.w	r3, r3, #7
 80064aa:	2b05      	cmp	r3, #5
 80064ac:	d826      	bhi.n	80064fc <UART_SetConfig+0x4c0>
 80064ae:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <UART_SetConfig+0x478>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	080064cd 	.word	0x080064cd
 80064b8:	080064d5 	.word	0x080064d5
 80064bc:	080064dd 	.word	0x080064dd
 80064c0:	080064e5 	.word	0x080064e5
 80064c4:	080064ed 	.word	0x080064ed
 80064c8:	080064f5 	.word	0x080064f5
 80064cc:	2300      	movs	r3, #0
 80064ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d2:	e086      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80064d4:	2304      	movs	r3, #4
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064da:	e082      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80064dc:	2308      	movs	r3, #8
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e2:	e07e      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80064e4:	2310      	movs	r3, #16
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ea:	e07a      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80064ec:	2320      	movs	r3, #32
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f2:	e076      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80064f4:	2340      	movs	r3, #64	; 0x40
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fa:	e072      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80064fc:	2380      	movs	r3, #128	; 0x80
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006502:	e06e      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a75      	ldr	r2, [pc, #468]	; (80066e0 <UART_SetConfig+0x6a4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d130      	bne.n	8006570 <UART_SetConfig+0x534>
 800650e:	4b72      	ldr	r3, [pc, #456]	; (80066d8 <UART_SetConfig+0x69c>)
 8006510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	2b05      	cmp	r3, #5
 8006518:	d826      	bhi.n	8006568 <UART_SetConfig+0x52c>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <UART_SetConfig+0x4e4>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006539 	.word	0x08006539
 8006524:	08006541 	.word	0x08006541
 8006528:	08006549 	.word	0x08006549
 800652c:	08006551 	.word	0x08006551
 8006530:	08006559 	.word	0x08006559
 8006534:	08006561 	.word	0x08006561
 8006538:	2300      	movs	r3, #0
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800653e:	e050      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006540:	2304      	movs	r3, #4
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006546:	e04c      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006548:	2308      	movs	r3, #8
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800654e:	e048      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006550:	2310      	movs	r3, #16
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006556:	e044      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006558:	2320      	movs	r3, #32
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800655e:	e040      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006560:	2340      	movs	r3, #64	; 0x40
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006566:	e03c      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006568:	2380      	movs	r3, #128	; 0x80
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656e:	e038      	b.n	80065e2 <UART_SetConfig+0x5a6>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a5b      	ldr	r2, [pc, #364]	; (80066e4 <UART_SetConfig+0x6a8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d130      	bne.n	80065dc <UART_SetConfig+0x5a0>
 800657a:	4b57      	ldr	r3, [pc, #348]	; (80066d8 <UART_SetConfig+0x69c>)
 800657c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	2b05      	cmp	r3, #5
 8006584:	d826      	bhi.n	80065d4 <UART_SetConfig+0x598>
 8006586:	a201      	add	r2, pc, #4	; (adr r2, 800658c <UART_SetConfig+0x550>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065a5 	.word	0x080065a5
 8006590:	080065ad 	.word	0x080065ad
 8006594:	080065b5 	.word	0x080065b5
 8006598:	080065bd 	.word	0x080065bd
 800659c:	080065c5 	.word	0x080065c5
 80065a0:	080065cd 	.word	0x080065cd
 80065a4:	2302      	movs	r3, #2
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065aa:	e01a      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80065ac:	2304      	movs	r3, #4
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b2:	e016      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80065b4:	2308      	movs	r3, #8
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ba:	e012      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80065bc:	2310      	movs	r3, #16
 80065be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065c2:	e00e      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80065c4:	2320      	movs	r3, #32
 80065c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ca:	e00a      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80065cc:	2340      	movs	r3, #64	; 0x40
 80065ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065d2:	e006      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80065d4:	2380      	movs	r3, #128	; 0x80
 80065d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065da:	e002      	b.n	80065e2 <UART_SetConfig+0x5a6>
 80065dc:	2380      	movs	r3, #128	; 0x80
 80065de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a3f      	ldr	r2, [pc, #252]	; (80066e4 <UART_SetConfig+0x6a8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	f040 80f8 	bne.w	80067de <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80065f2:	2b20      	cmp	r3, #32
 80065f4:	dc46      	bgt.n	8006684 <UART_SetConfig+0x648>
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	f2c0 8082 	blt.w	8006700 <UART_SetConfig+0x6c4>
 80065fc:	3b02      	subs	r3, #2
 80065fe:	2b1e      	cmp	r3, #30
 8006600:	d87e      	bhi.n	8006700 <UART_SetConfig+0x6c4>
 8006602:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <UART_SetConfig+0x5cc>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	0800668b 	.word	0x0800668b
 800660c:	08006701 	.word	0x08006701
 8006610:	08006693 	.word	0x08006693
 8006614:	08006701 	.word	0x08006701
 8006618:	08006701 	.word	0x08006701
 800661c:	08006701 	.word	0x08006701
 8006620:	080066a3 	.word	0x080066a3
 8006624:	08006701 	.word	0x08006701
 8006628:	08006701 	.word	0x08006701
 800662c:	08006701 	.word	0x08006701
 8006630:	08006701 	.word	0x08006701
 8006634:	08006701 	.word	0x08006701
 8006638:	08006701 	.word	0x08006701
 800663c:	08006701 	.word	0x08006701
 8006640:	080066b3 	.word	0x080066b3
 8006644:	08006701 	.word	0x08006701
 8006648:	08006701 	.word	0x08006701
 800664c:	08006701 	.word	0x08006701
 8006650:	08006701 	.word	0x08006701
 8006654:	08006701 	.word	0x08006701
 8006658:	08006701 	.word	0x08006701
 800665c:	08006701 	.word	0x08006701
 8006660:	08006701 	.word	0x08006701
 8006664:	08006701 	.word	0x08006701
 8006668:	08006701 	.word	0x08006701
 800666c:	08006701 	.word	0x08006701
 8006670:	08006701 	.word	0x08006701
 8006674:	08006701 	.word	0x08006701
 8006678:	08006701 	.word	0x08006701
 800667c:	08006701 	.word	0x08006701
 8006680:	080066f3 	.word	0x080066f3
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	d037      	beq.n	80066f8 <UART_SetConfig+0x6bc>
 8006688:	e03a      	b.n	8006700 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800668a:	f7fd fba3 	bl	8003dd4 <HAL_RCCEx_GetD3PCLK1Freq>
 800668e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006690:	e03c      	b.n	800670c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006696:	4618      	mov	r0, r3
 8006698:	f7fd fbb2 	bl	8003e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066a0:	e034      	b.n	800670c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066a2:	f107 0318 	add.w	r3, r7, #24
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fd fcfe 	bl	80040a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066b0:	e02c      	b.n	800670c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066b2:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <UART_SetConfig+0x69c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d016      	beq.n	80066ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066be:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <UART_SetConfig+0x69c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	08db      	lsrs	r3, r3, #3
 80066c4:	f003 0303 	and.w	r3, r3, #3
 80066c8:	4a07      	ldr	r2, [pc, #28]	; (80066e8 <UART_SetConfig+0x6ac>)
 80066ca:	fa22 f303 	lsr.w	r3, r2, r3
 80066ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066d0:	e01c      	b.n	800670c <UART_SetConfig+0x6d0>
 80066d2:	bf00      	nop
 80066d4:	40011400 	.word	0x40011400
 80066d8:	58024400 	.word	0x58024400
 80066dc:	40007800 	.word	0x40007800
 80066e0:	40007c00 	.word	0x40007c00
 80066e4:	58000c00 	.word	0x58000c00
 80066e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80066ec:	4b9d      	ldr	r3, [pc, #628]	; (8006964 <UART_SetConfig+0x928>)
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066f0:	e00c      	b.n	800670c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066f2:	4b9d      	ldr	r3, [pc, #628]	; (8006968 <UART_SetConfig+0x92c>)
 80066f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066f6:	e009      	b.n	800670c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066fe:	e005      	b.n	800670c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800670a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800670c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 81de 	beq.w	8006ad0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	4a94      	ldr	r2, [pc, #592]	; (800696c <UART_SetConfig+0x930>)
 800671a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800671e:	461a      	mov	r2, r3
 8006720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006722:	fbb3 f3f2 	udiv	r3, r3, r2
 8006726:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	4613      	mov	r3, r2
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	4413      	add	r3, r2
 8006732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006734:	429a      	cmp	r2, r3
 8006736:	d305      	bcc.n	8006744 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800673e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006740:	429a      	cmp	r2, r3
 8006742:	d903      	bls.n	800674c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800674a:	e1c1      	b.n	8006ad0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800674c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674e:	2200      	movs	r2, #0
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	60fa      	str	r2, [r7, #12]
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	4a84      	ldr	r2, [pc, #528]	; (800696c <UART_SetConfig+0x930>)
 800675a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800675e:	b29b      	uxth	r3, r3
 8006760:	2200      	movs	r2, #0
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	607a      	str	r2, [r7, #4]
 8006766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800676a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800676e:	f7f9 fdb3 	bl	80002d8 <__aeabi_uldivmod>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	4610      	mov	r0, r2
 8006778:	4619      	mov	r1, r3
 800677a:	f04f 0200 	mov.w	r2, #0
 800677e:	f04f 0300 	mov.w	r3, #0
 8006782:	020b      	lsls	r3, r1, #8
 8006784:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006788:	0202      	lsls	r2, r0, #8
 800678a:	6979      	ldr	r1, [r7, #20]
 800678c:	6849      	ldr	r1, [r1, #4]
 800678e:	0849      	lsrs	r1, r1, #1
 8006790:	2000      	movs	r0, #0
 8006792:	460c      	mov	r4, r1
 8006794:	4605      	mov	r5, r0
 8006796:	eb12 0804 	adds.w	r8, r2, r4
 800679a:	eb43 0905 	adc.w	r9, r3, r5
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	469a      	mov	sl, r3
 80067a6:	4693      	mov	fp, r2
 80067a8:	4652      	mov	r2, sl
 80067aa:	465b      	mov	r3, fp
 80067ac:	4640      	mov	r0, r8
 80067ae:	4649      	mov	r1, r9
 80067b0:	f7f9 fd92 	bl	80002d8 <__aeabi_uldivmod>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4613      	mov	r3, r2
 80067ba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c2:	d308      	bcc.n	80067d6 <UART_SetConfig+0x79a>
 80067c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ca:	d204      	bcs.n	80067d6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067d2:	60da      	str	r2, [r3, #12]
 80067d4:	e17c      	b.n	8006ad0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80067dc:	e178      	b.n	8006ad0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e6:	f040 80c5 	bne.w	8006974 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80067ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	dc48      	bgt.n	8006884 <UART_SetConfig+0x848>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	db7b      	blt.n	80068ee <UART_SetConfig+0x8b2>
 80067f6:	2b20      	cmp	r3, #32
 80067f8:	d879      	bhi.n	80068ee <UART_SetConfig+0x8b2>
 80067fa:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <UART_SetConfig+0x7c4>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	0800688b 	.word	0x0800688b
 8006804:	08006893 	.word	0x08006893
 8006808:	080068ef 	.word	0x080068ef
 800680c:	080068ef 	.word	0x080068ef
 8006810:	0800689b 	.word	0x0800689b
 8006814:	080068ef 	.word	0x080068ef
 8006818:	080068ef 	.word	0x080068ef
 800681c:	080068ef 	.word	0x080068ef
 8006820:	080068ab 	.word	0x080068ab
 8006824:	080068ef 	.word	0x080068ef
 8006828:	080068ef 	.word	0x080068ef
 800682c:	080068ef 	.word	0x080068ef
 8006830:	080068ef 	.word	0x080068ef
 8006834:	080068ef 	.word	0x080068ef
 8006838:	080068ef 	.word	0x080068ef
 800683c:	080068ef 	.word	0x080068ef
 8006840:	080068bb 	.word	0x080068bb
 8006844:	080068ef 	.word	0x080068ef
 8006848:	080068ef 	.word	0x080068ef
 800684c:	080068ef 	.word	0x080068ef
 8006850:	080068ef 	.word	0x080068ef
 8006854:	080068ef 	.word	0x080068ef
 8006858:	080068ef 	.word	0x080068ef
 800685c:	080068ef 	.word	0x080068ef
 8006860:	080068ef 	.word	0x080068ef
 8006864:	080068ef 	.word	0x080068ef
 8006868:	080068ef 	.word	0x080068ef
 800686c:	080068ef 	.word	0x080068ef
 8006870:	080068ef 	.word	0x080068ef
 8006874:	080068ef 	.word	0x080068ef
 8006878:	080068ef 	.word	0x080068ef
 800687c:	080068ef 	.word	0x080068ef
 8006880:	080068e1 	.word	0x080068e1
 8006884:	2b40      	cmp	r3, #64	; 0x40
 8006886:	d02e      	beq.n	80068e6 <UART_SetConfig+0x8aa>
 8006888:	e031      	b.n	80068ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800688a:	f7fc f86d 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 800688e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006890:	e033      	b.n	80068fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006892:	f7fc f87f 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8006896:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006898:	e02f      	b.n	80068fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800689a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fd faae 	bl	8003e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068a8:	e027      	b.n	80068fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068aa:	f107 0318 	add.w	r3, r7, #24
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fd fbfa 	bl	80040a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b8:	e01f      	b.n	80068fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068ba:	4b2d      	ldr	r3, [pc, #180]	; (8006970 <UART_SetConfig+0x934>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068c6:	4b2a      	ldr	r3, [pc, #168]	; (8006970 <UART_SetConfig+0x934>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	08db      	lsrs	r3, r3, #3
 80068cc:	f003 0303 	and.w	r3, r3, #3
 80068d0:	4a24      	ldr	r2, [pc, #144]	; (8006964 <UART_SetConfig+0x928>)
 80068d2:	fa22 f303 	lsr.w	r3, r2, r3
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068d8:	e00f      	b.n	80068fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80068da:	4b22      	ldr	r3, [pc, #136]	; (8006964 <UART_SetConfig+0x928>)
 80068dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068de:	e00c      	b.n	80068fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068e0:	4b21      	ldr	r3, [pc, #132]	; (8006968 <UART_SetConfig+0x92c>)
 80068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068e4:	e009      	b.n	80068fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068ec:	e005      	b.n	80068fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80068f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 80e7 	beq.w	8006ad0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	4a19      	ldr	r2, [pc, #100]	; (800696c <UART_SetConfig+0x930>)
 8006908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800690c:	461a      	mov	r2, r3
 800690e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006910:	fbb3 f3f2 	udiv	r3, r3, r2
 8006914:	005a      	lsls	r2, r3, #1
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	085b      	lsrs	r3, r3, #1
 800691c:	441a      	add	r2, r3
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	fbb2 f3f3 	udiv	r3, r2, r3
 8006926:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692a:	2b0f      	cmp	r3, #15
 800692c:	d916      	bls.n	800695c <UART_SetConfig+0x920>
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006934:	d212      	bcs.n	800695c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	b29b      	uxth	r3, r3
 800693a:	f023 030f 	bic.w	r3, r3, #15
 800693e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	085b      	lsrs	r3, r3, #1
 8006944:	b29b      	uxth	r3, r3
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	b29a      	uxth	r2, r3
 800694c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800694e:	4313      	orrs	r3, r2
 8006950:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006958:	60da      	str	r2, [r3, #12]
 800695a:	e0b9      	b.n	8006ad0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006962:	e0b5      	b.n	8006ad0 <UART_SetConfig+0xa94>
 8006964:	03d09000 	.word	0x03d09000
 8006968:	003d0900 	.word	0x003d0900
 800696c:	080071d4 	.word	0x080071d4
 8006970:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006974:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006978:	2b20      	cmp	r3, #32
 800697a:	dc49      	bgt.n	8006a10 <UART_SetConfig+0x9d4>
 800697c:	2b00      	cmp	r3, #0
 800697e:	db7c      	blt.n	8006a7a <UART_SetConfig+0xa3e>
 8006980:	2b20      	cmp	r3, #32
 8006982:	d87a      	bhi.n	8006a7a <UART_SetConfig+0xa3e>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0x950>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	08006a17 	.word	0x08006a17
 8006990:	08006a1f 	.word	0x08006a1f
 8006994:	08006a7b 	.word	0x08006a7b
 8006998:	08006a7b 	.word	0x08006a7b
 800699c:	08006a27 	.word	0x08006a27
 80069a0:	08006a7b 	.word	0x08006a7b
 80069a4:	08006a7b 	.word	0x08006a7b
 80069a8:	08006a7b 	.word	0x08006a7b
 80069ac:	08006a37 	.word	0x08006a37
 80069b0:	08006a7b 	.word	0x08006a7b
 80069b4:	08006a7b 	.word	0x08006a7b
 80069b8:	08006a7b 	.word	0x08006a7b
 80069bc:	08006a7b 	.word	0x08006a7b
 80069c0:	08006a7b 	.word	0x08006a7b
 80069c4:	08006a7b 	.word	0x08006a7b
 80069c8:	08006a7b 	.word	0x08006a7b
 80069cc:	08006a47 	.word	0x08006a47
 80069d0:	08006a7b 	.word	0x08006a7b
 80069d4:	08006a7b 	.word	0x08006a7b
 80069d8:	08006a7b 	.word	0x08006a7b
 80069dc:	08006a7b 	.word	0x08006a7b
 80069e0:	08006a7b 	.word	0x08006a7b
 80069e4:	08006a7b 	.word	0x08006a7b
 80069e8:	08006a7b 	.word	0x08006a7b
 80069ec:	08006a7b 	.word	0x08006a7b
 80069f0:	08006a7b 	.word	0x08006a7b
 80069f4:	08006a7b 	.word	0x08006a7b
 80069f8:	08006a7b 	.word	0x08006a7b
 80069fc:	08006a7b 	.word	0x08006a7b
 8006a00:	08006a7b 	.word	0x08006a7b
 8006a04:	08006a7b 	.word	0x08006a7b
 8006a08:	08006a7b 	.word	0x08006a7b
 8006a0c:	08006a6d 	.word	0x08006a6d
 8006a10:	2b40      	cmp	r3, #64	; 0x40
 8006a12:	d02e      	beq.n	8006a72 <UART_SetConfig+0xa36>
 8006a14:	e031      	b.n	8006a7a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a16:	f7fb ffa7 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8006a1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a1c:	e033      	b.n	8006a86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a1e:	f7fb ffb9 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8006a22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a24:	e02f      	b.n	8006a86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fd f9e8 	bl	8003e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a34:	e027      	b.n	8006a86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a36:	f107 0318 	add.w	r3, r7, #24
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fd fb34 	bl	80040a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a44:	e01f      	b.n	8006a86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a46:	4b2d      	ldr	r3, [pc, #180]	; (8006afc <UART_SetConfig+0xac0>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d009      	beq.n	8006a66 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a52:	4b2a      	ldr	r3, [pc, #168]	; (8006afc <UART_SetConfig+0xac0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	08db      	lsrs	r3, r3, #3
 8006a58:	f003 0303 	and.w	r3, r3, #3
 8006a5c:	4a28      	ldr	r2, [pc, #160]	; (8006b00 <UART_SetConfig+0xac4>)
 8006a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a64:	e00f      	b.n	8006a86 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006a66:	4b26      	ldr	r3, [pc, #152]	; (8006b00 <UART_SetConfig+0xac4>)
 8006a68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a6a:	e00c      	b.n	8006a86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a6c:	4b25      	ldr	r3, [pc, #148]	; (8006b04 <UART_SetConfig+0xac8>)
 8006a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a70:	e009      	b.n	8006a86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a78:	e005      	b.n	8006a86 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006a84:	bf00      	nop
    }

    if (pclk != 0U)
 8006a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d021      	beq.n	8006ad0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	4a1d      	ldr	r2, [pc, #116]	; (8006b08 <UART_SetConfig+0xacc>)
 8006a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a96:	461a      	mov	r2, r3
 8006a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	441a      	add	r2, r3
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	2b0f      	cmp	r3, #15
 8006ab4:	d909      	bls.n	8006aca <UART_SetConfig+0xa8e>
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006abc:	d205      	bcs.n	8006aca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60da      	str	r2, [r3, #12]
 8006ac8:	e002      	b.n	8006ad0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006aec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3748      	adds	r7, #72	; 0x48
 8006af4:	46bd      	mov	sp, r7
 8006af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006afa:	bf00      	nop
 8006afc:	58024400 	.word	0x58024400
 8006b00:	03d09000 	.word	0x03d09000
 8006b04:	003d0900 	.word	0x003d0900
 8006b08:	080071d4 	.word	0x080071d4

08006b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b18:	f003 0308 	and.w	r3, r3, #8
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00a      	beq.n	8006b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00a      	beq.n	8006b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba0:	f003 0310 	and.w	r3, r3, #16
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00a      	beq.n	8006bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d01a      	beq.n	8006c22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c0a:	d10a      	bne.n	8006c22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	605a      	str	r2, [r3, #4]
  }
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b098      	sub	sp, #96	; 0x60
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c60:	f7fa fb46 	bl	80012f0 <HAL_GetTick>
 8006c64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d12f      	bne.n	8006cd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f88e 	bl	8006da4 <UART_WaitOnFlagUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d022      	beq.n	8006cd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cac:	647b      	str	r3, [r7, #68]	; 0x44
 8006cae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e6      	bne.n	8006c8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e063      	b.n	8006d9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0304 	and.w	r3, r3, #4
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d149      	bne.n	8006d76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ce2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cea:	2200      	movs	r2, #0
 8006cec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f857 	bl	8006da4 <UART_WaitOnFlagUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d03c      	beq.n	8006d76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	623b      	str	r3, [r7, #32]
   return(result);
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e6      	bne.n	8006cfc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3308      	adds	r3, #8
 8006d34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3308      	adds	r3, #8
 8006d4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d4e:	61fa      	str	r2, [r7, #28]
 8006d50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	69b9      	ldr	r1, [r7, #24]
 8006d54:	69fa      	ldr	r2, [r7, #28]
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	617b      	str	r3, [r7, #20]
   return(result);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e5      	bne.n	8006d2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e012      	b.n	8006d9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2220      	movs	r2, #32
 8006d82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3758      	adds	r7, #88	; 0x58
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	603b      	str	r3, [r7, #0]
 8006db0:	4613      	mov	r3, r2
 8006db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db4:	e04f      	b.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dbc:	d04b      	beq.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dbe:	f7fa fa97 	bl	80012f0 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d302      	bcc.n	8006dd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e04e      	b.n	8006e76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0304 	and.w	r3, r3, #4
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d037      	beq.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b80      	cmp	r3, #128	; 0x80
 8006dea:	d034      	beq.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b40      	cmp	r3, #64	; 0x40
 8006df0:	d031      	beq.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	f003 0308 	and.w	r3, r3, #8
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d110      	bne.n	8006e22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2208      	movs	r2, #8
 8006e06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 f839 	bl	8006e80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2208      	movs	r2, #8
 8006e12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e029      	b.n	8006e76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e30:	d111      	bne.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f81f 	bl	8006e80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2220      	movs	r2, #32
 8006e46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e00f      	b.n	8006e76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	bf0c      	ite	eq
 8006e66:	2301      	moveq	r3, #1
 8006e68:	2300      	movne	r3, #0
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d0a0      	beq.n	8006db6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b095      	sub	sp, #84	; 0x54
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ea8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e6      	bne.n	8006e88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	4b1e      	ldr	r3, [pc, #120]	; (8006f48 <UART_EndRxTransfer+0xc8>)
 8006ece:	4013      	ands	r3, r2
 8006ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006edc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ee2:	e841 2300 	strex	r3, r2, [r1]
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e5      	bne.n	8006eba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d118      	bne.n	8006f28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	e853 3f00 	ldrex	r3, [r3]
 8006f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f023 0310 	bic.w	r3, r3, #16
 8006f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	461a      	mov	r2, r3
 8006f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f18:	6979      	ldr	r1, [r7, #20]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	e841 2300 	strex	r3, r2, [r1]
 8006f20:	613b      	str	r3, [r7, #16]
   return(result);
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e6      	bne.n	8006ef6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006f3c:	bf00      	nop
 8006f3e:	3754      	adds	r7, #84	; 0x54
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	effffffe 	.word	0xeffffffe

08006f4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d101      	bne.n	8006f62 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f5e:	2302      	movs	r3, #2
 8006f60:	e027      	b.n	8006fb2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2224      	movs	r2, #36	; 0x24
 8006f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0201 	bic.w	r2, r2, #1
 8006f88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d101      	bne.n	8006fd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	e02d      	b.n	8007032 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2224      	movs	r2, #36	; 0x24
 8006fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0201 	bic.w	r2, r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f850 	bl	80070b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800704a:	2b01      	cmp	r3, #1
 800704c:	d101      	bne.n	8007052 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800704e:	2302      	movs	r3, #2
 8007050:	e02d      	b.n	80070ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2224      	movs	r2, #36	; 0x24
 800705e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0201 	bic.w	r2, r2, #1
 8007078:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f812 	bl	80070b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d108      	bne.n	80070da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070d8:	e031      	b.n	800713e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070da:	2310      	movs	r3, #16
 80070dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070de:	2310      	movs	r3, #16
 80070e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	0e5b      	lsrs	r3, r3, #25
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	0f5b      	lsrs	r3, r3, #29
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	7b3a      	ldrb	r2, [r7, #12]
 8007106:	4911      	ldr	r1, [pc, #68]	; (800714c <UARTEx_SetNbDataToProcess+0x94>)
 8007108:	5c8a      	ldrb	r2, [r1, r2]
 800710a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800710e:	7b3a      	ldrb	r2, [r7, #12]
 8007110:	490f      	ldr	r1, [pc, #60]	; (8007150 <UARTEx_SetNbDataToProcess+0x98>)
 8007112:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007114:	fb93 f3f2 	sdiv	r3, r3, r2
 8007118:	b29a      	uxth	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007120:	7bfb      	ldrb	r3, [r7, #15]
 8007122:	7b7a      	ldrb	r2, [r7, #13]
 8007124:	4909      	ldr	r1, [pc, #36]	; (800714c <UARTEx_SetNbDataToProcess+0x94>)
 8007126:	5c8a      	ldrb	r2, [r1, r2]
 8007128:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800712c:	7b7a      	ldrb	r2, [r7, #13]
 800712e:	4908      	ldr	r1, [pc, #32]	; (8007150 <UARTEx_SetNbDataToProcess+0x98>)
 8007130:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007132:	fb93 f3f2 	sdiv	r3, r3, r2
 8007136:	b29a      	uxth	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	080071ec 	.word	0x080071ec
 8007150:	080071f4 	.word	0x080071f4

08007154 <memset>:
 8007154:	4402      	add	r2, r0
 8007156:	4603      	mov	r3, r0
 8007158:	4293      	cmp	r3, r2
 800715a:	d100      	bne.n	800715e <memset+0xa>
 800715c:	4770      	bx	lr
 800715e:	f803 1b01 	strb.w	r1, [r3], #1
 8007162:	e7f9      	b.n	8007158 <memset+0x4>

08007164 <__libc_init_array>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	4d0d      	ldr	r5, [pc, #52]	; (800719c <__libc_init_array+0x38>)
 8007168:	4c0d      	ldr	r4, [pc, #52]	; (80071a0 <__libc_init_array+0x3c>)
 800716a:	1b64      	subs	r4, r4, r5
 800716c:	10a4      	asrs	r4, r4, #2
 800716e:	2600      	movs	r6, #0
 8007170:	42a6      	cmp	r6, r4
 8007172:	d109      	bne.n	8007188 <__libc_init_array+0x24>
 8007174:	4d0b      	ldr	r5, [pc, #44]	; (80071a4 <__libc_init_array+0x40>)
 8007176:	4c0c      	ldr	r4, [pc, #48]	; (80071a8 <__libc_init_array+0x44>)
 8007178:	f000 f818 	bl	80071ac <_init>
 800717c:	1b64      	subs	r4, r4, r5
 800717e:	10a4      	asrs	r4, r4, #2
 8007180:	2600      	movs	r6, #0
 8007182:	42a6      	cmp	r6, r4
 8007184:	d105      	bne.n	8007192 <__libc_init_array+0x2e>
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	f855 3b04 	ldr.w	r3, [r5], #4
 800718c:	4798      	blx	r3
 800718e:	3601      	adds	r6, #1
 8007190:	e7ee      	b.n	8007170 <__libc_init_array+0xc>
 8007192:	f855 3b04 	ldr.w	r3, [r5], #4
 8007196:	4798      	blx	r3
 8007198:	3601      	adds	r6, #1
 800719a:	e7f2      	b.n	8007182 <__libc_init_array+0x1e>
 800719c:	08007204 	.word	0x08007204
 80071a0:	08007204 	.word	0x08007204
 80071a4:	08007204 	.word	0x08007204
 80071a8:	08007208 	.word	0x08007208

080071ac <_init>:
 80071ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ae:	bf00      	nop
 80071b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071b2:	bc08      	pop	{r3}
 80071b4:	469e      	mov	lr, r3
 80071b6:	4770      	bx	lr

080071b8 <_fini>:
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	bf00      	nop
 80071bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071be:	bc08      	pop	{r3}
 80071c0:	469e      	mov	lr, r3
 80071c2:	4770      	bx	lr
