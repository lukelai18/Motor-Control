
Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae94  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800b12c  0800b12c  0001b12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b164  0800b164  0001b164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b16c  0800b16c  0001b16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b170  0800b170  0001b170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800b174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000238  24000010  0800b184  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000248  0800b184  00020248  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001dc0f  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000034c5  00000000  00000000  0003dc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001550  00000000  00000000  00041158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000109e  00000000  00000000  000426a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003a20c  00000000  00000000  00043746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00020c3a  00000000  00000000  0007d952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001777cd  00000000  00000000  0009e58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005b0c  00000000  00000000  00215d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  0021b868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b114 	.word	0x0800b114

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800b114 	.word	0x0800b114

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	615a      	str	r2, [r3, #20]
 80005f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f8:	4b30      	ldr	r3, [pc, #192]	; (80006bc <MX_ADC1_Init+0xe8>)
 80005fa:	4a31      	ldr	r2, [pc, #196]	; (80006c0 <MX_ADC1_Init+0xec>)
 80005fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000600:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000604:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000606:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060c:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <MX_ADC1_Init+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000614:	2204      	movs	r2, #4
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <MX_ADC1_Init+0xe8>)
 800061a:	2200      	movs	r2, #0
 800061c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000620:	2200      	movs	r2, #0
 8000622:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000626:	2201      	movs	r2, #1
 8000628:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062a:	4b24      	ldr	r3, [pc, #144]	; (80006bc <MX_ADC1_Init+0xe8>)
 800062c:	2200      	movs	r2, #0
 800062e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_ADC1_Init+0xe8>)
 800063e:	2200      	movs	r2, #0
 8000640:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_ADC1_Init+0xe8>)
 800064a:	2200      	movs	r2, #0
 800064c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000656:	4819      	ldr	r0, [pc, #100]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000658:	f001 fd42 	bl	80020e0 <HAL_ADC_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000662:	f000 fbad 	bl	8000dc0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	4812      	ldr	r0, [pc, #72]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000672:	f002 fdef 	bl	8003254 <HAL_ADCEx_MultiModeConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800067c:	f000 fba0 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_ADC1_Init+0xf0>)
 8000682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000684:	2306      	movs	r3, #6
 8000686:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000690:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000692:	2304      	movs	r3, #4
 8000694:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800069a:	2300      	movs	r3, #0
 800069c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <MX_ADC1_Init+0xe8>)
 80006a4:	f002 f916 	bl	80028d4 <HAL_ADC_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ae:	f000 fb87 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	; 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2400002c 	.word	0x2400002c
 80006c0:	40022000 	.word	0x40022000
 80006c4:	43210000 	.word	0x43210000

080006c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b0ba      	sub	sp, #232	; 0xe8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	22c0      	movs	r2, #192	; 0xc0
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f00a fce7 	bl	800b0bc <memset>
  if(adcHandle->Instance==ADC1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a30      	ldr	r2, [pc, #192]	; (80007b4 <HAL_ADC_MspInit+0xec>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d158      	bne.n	80007aa <HAL_ADC_MspInit+0xe2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006fc:	f04f 0300 	mov.w	r3, #0
 8000700:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000708:	2309      	movs	r3, #9
 800070a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000718:	23c0      	movs	r3, #192	; 0xc0
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800071c:	2320      	movs	r3, #32
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000720:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	4618      	mov	r0, r3
 8000732:	f004 fefd 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800073c:	f000 fb40 	bl	8000dc0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <HAL_ADC_MspInit+0xf0>)
 8000742:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <HAL_ADC_MspInit+0xf0>)
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <HAL_ADC_MspInit+0xf0>)
 8000752:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000756:	f003 0320 	and.w	r3, r3, #32
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <HAL_ADC_MspInit+0xf0>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000764:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <HAL_ADC_MspInit+0xf0>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_ADC_MspInit+0xf0>)
 8000770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    */
    GPIO_InitStruct.Pin = Force_Sensor_Pin;
 800077c:	2301      	movs	r3, #1
 800077e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000782:	2303      	movs	r3, #3
 8000784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(Force_Sensor_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000792:	4619      	mov	r1, r3
 8000794:	4809      	ldr	r0, [pc, #36]	; (80007bc <HAL_ADC_MspInit+0xf4>)
 8000796:	f003 fcaf 	bl	80040f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2012      	movs	r0, #18
 80007a0:	f002 ff11 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80007a4:	2012      	movs	r0, #18
 80007a6:	f002 ff28 	bl	80035fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007aa:	bf00      	nop
 80007ac:	37e8      	adds	r7, #232	; 0xe8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40022000 	.word	0x40022000
 80007b8:	58024400 	.word	0x58024400
 80007bc:	58020000 	.word	0x58020000

080007c0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b86      	ldr	r3, [pc, #536]	; (80009f0 <MX_GPIO_Init+0x230>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007dc:	4a84      	ldr	r2, [pc, #528]	; (80009f0 <MX_GPIO_Init+0x230>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e6:	4b82      	ldr	r3, [pc, #520]	; (80009f0 <MX_GPIO_Init+0x230>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	61bb      	str	r3, [r7, #24]
 80007f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f4:	4b7e      	ldr	r3, [pc, #504]	; (80009f0 <MX_GPIO_Init+0x230>)
 80007f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fa:	4a7d      	ldr	r2, [pc, #500]	; (80009f0 <MX_GPIO_Init+0x230>)
 80007fc:	f043 0320 	orr.w	r3, r3, #32
 8000800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000804:	4b7a      	ldr	r3, [pc, #488]	; (80009f0 <MX_GPIO_Init+0x230>)
 8000806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080a:	f003 0320 	and.w	r3, r3, #32
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b77      	ldr	r3, [pc, #476]	; (80009f0 <MX_GPIO_Init+0x230>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000818:	4a75      	ldr	r2, [pc, #468]	; (80009f0 <MX_GPIO_Init+0x230>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000822:	4b73      	ldr	r3, [pc, #460]	; (80009f0 <MX_GPIO_Init+0x230>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000830:	4b6f      	ldr	r3, [pc, #444]	; (80009f0 <MX_GPIO_Init+0x230>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000836:	4a6e      	ldr	r2, [pc, #440]	; (80009f0 <MX_GPIO_Init+0x230>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000840:	4b6b      	ldr	r3, [pc, #428]	; (80009f0 <MX_GPIO_Init+0x230>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084e:	4b68      	ldr	r3, [pc, #416]	; (80009f0 <MX_GPIO_Init+0x230>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a66      	ldr	r2, [pc, #408]	; (80009f0 <MX_GPIO_Init+0x230>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b64      	ldr	r3, [pc, #400]	; (80009f0 <MX_GPIO_Init+0x230>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 0310 	and.w	r3, r3, #16
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086c:	4b60      	ldr	r3, [pc, #384]	; (80009f0 <MX_GPIO_Init+0x230>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000872:	4a5f      	ldr	r2, [pc, #380]	; (80009f0 <MX_GPIO_Init+0x230>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087c:	4b5c      	ldr	r3, [pc, #368]	; (80009f0 <MX_GPIO_Init+0x230>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800088a:	4b59      	ldr	r3, [pc, #356]	; (80009f0 <MX_GPIO_Init+0x230>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000890:	4a57      	ldr	r2, [pc, #348]	; (80009f0 <MX_GPIO_Init+0x230>)
 8000892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089a:	4b55      	ldr	r3, [pc, #340]	; (80009f0 <MX_GPIO_Init+0x230>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, YDirection_Pin|enableY_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2130      	movs	r1, #48	; 0x30
 80008ac:	4851      	ldr	r0, [pc, #324]	; (80009f4 <MX_GPIO_Init+0x234>)
 80008ae:	f003 fdeb 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(debug_LED_GPIO_Port, debug_LED_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2101      	movs	r1, #1
 80008b6:	4850      	ldr	r0, [pc, #320]	; (80009f8 <MX_GPIO_Init+0x238>)
 80008b8:	f003 fde6 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, XDirection_Pin|enableX_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f248 0180 	movw	r1, #32896	; 0x8080
 80008c2:	484e      	ldr	r0, [pc, #312]	; (80009fc <MX_GPIO_Init+0x23c>)
 80008c4:	f003 fde0 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(enableZ_GPIO_Port, enableZ_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ce:	484c      	ldr	r0, [pc, #304]	; (8000a00 <MX_GPIO_Init+0x240>)
 80008d0:	f003 fdda 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ZDirection_GPIO_Port, ZDirection_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2120      	movs	r1, #32
 80008d8:	484a      	ldr	r0, [pc, #296]	; (8000a04 <MX_GPIO_Init+0x244>)
 80008da:	f003 fdd5 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4844      	ldr	r0, [pc, #272]	; (8000a08 <MX_GPIO_Init+0x248>)
 80008f6:	f003 fbff 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = right_limit_switch_Pin;
 80008fa:	2308      	movs	r3, #8
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000902:	2302      	movs	r3, #2
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(right_limit_switch_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4839      	ldr	r0, [pc, #228]	; (80009f4 <MX_GPIO_Init+0x234>)
 800090e:	f003 fbf3 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = YDirection_Pin|enableY_Pin;
 8000912:	2330      	movs	r3, #48	; 0x30
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4832      	ldr	r0, [pc, #200]	; (80009f4 <MX_GPIO_Init+0x234>)
 800092a:	f003 fbe5 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = debug_LED_Pin;
 800092e:	2301      	movs	r3, #1
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(debug_LED_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	482c      	ldr	r0, [pc, #176]	; (80009f8 <MX_GPIO_Init+0x238>)
 8000946:	f003 fbd7 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = XDirection_Pin|enableX_Pin;
 800094a:	f248 0380 	movw	r3, #32896	; 0x8080
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4826      	ldr	r0, [pc, #152]	; (80009fc <MX_GPIO_Init+0x23c>)
 8000964:	f003 fbc8 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = left_limit_switch_Pin;
 8000968:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000972:	2302      	movs	r3, #2
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(left_limit_switch_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	481f      	ldr	r0, [pc, #124]	; (80009fc <MX_GPIO_Init+0x23c>)
 800097e:	f003 fbbb 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = enableZ_Pin;
 8000982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(enableZ_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4819      	ldr	r0, [pc, #100]	; (8000a00 <MX_GPIO_Init+0x240>)
 800099c:	f003 fbac 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = buttom_limit_switch_Pin|top_limit_switch_Pin;
 80009a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009aa:	2302      	movs	r3, #2
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4812      	ldr	r0, [pc, #72]	; (8000a00 <MX_GPIO_Init+0x240>)
 80009b6:	f003 fb9f 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZDirection_Pin;
 80009ba:	2320      	movs	r3, #32
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ZDirection_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_GPIO_Init+0x244>)
 80009d2:	f003 fb91 	bl	80040f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2028      	movs	r0, #40	; 0x28
 80009dc:	f002 fdf3 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e0:	2028      	movs	r0, #40	; 0x28
 80009e2:	f002 fe0a 	bl	80035fa <HAL_NVIC_EnableIRQ>

}
 80009e6:	bf00      	nop
 80009e8:	3730      	adds	r7, #48	; 0x30
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	58024400 	.word	0x58024400
 80009f4:	58021400 	.word	0x58021400
 80009f8:	58020400 	.word	0x58020400
 80009fc:	58021000 	.word	0x58021000
 8000a00:	58020c00 	.word	0x58020c00
 8000a04:	58021800 	.word	0x58021800
 8000a08:	58020800 	.word	0x58020800

08000a0c <HAL_GPIO_EXTI_Callback>:
//			HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_4);
//		// }
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13){
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a1c:	d102      	bne.n	8000a24 <HAL_GPIO_EXTI_Callback+0x18>
//        // Simple software debouncing: check if the button is still pressed after a delay
//      HAL_Delay(50); // 50 ms for debouncing delay
    	isPressed = 1;
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <HAL_GPIO_EXTI_Callback+0x24>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
//		curNoteIndex = 0;
//      HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_4);
    }
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	240000a5 	.word	0x240000a5

08000a34 <HAL_TIM_PWM_PulseFinishedCallback>:
			// HAL_Delay(5000);
		}
	}
}

void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef *htim){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	 if (htim == &htim2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d101      	bne.n	8000a48 <HAL_TIM_PWM_PulseFinishedCallback+0x14>
//		 if(motorState.move_axis == X_AXIS){
//			 HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
//		 } else if(motorState.move_axis == Y_AXIS){
//			 HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
//		 }
		 new_position();
 8000a44:	f000 fa96 	bl	8000f74 <new_position>
	 }
	 if(htim == &htim3)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d101      	bne.n	8000a54 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
	 {
		 // setToCenterY();
	     new_position();
 8000a50:	f000 fa90 	bl	8000f74 <new_position>
	 }
//	 if(htim == &htim4){
//
//	 }
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	240000cc 	.word	0x240000cc
 8000a60:	24000118 	.word	0x24000118

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6a:	f001 f8a9 	bl	8001bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6e:	f000 f935 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a72:	f7ff fea5 	bl	80007c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a76:	f000 fd65 	bl	8001544 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000a7a:	f000 ffb9 	bl	80019f0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000a7e:	f7ff fda9 	bl	80005d4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000a82:	f000 fdd5 	bl	8001630 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a86:	f000 fe4b 	bl	8001720 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  // Set up the initial direction for X-axis
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	4884      	ldr	r0, [pc, #528]	; (8000ca0 <main+0x23c>)
 8000a90:	f003 fcfa 	bl	8004488 <HAL_GPIO_WritePin>
  // Set up the initial direction for Y-axis
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2110      	movs	r1, #16
 8000a98:	4882      	ldr	r0, [pc, #520]	; (8000ca4 <main+0x240>)
 8000a9a:	f003 fcf5 	bl	8004488 <HAL_GPIO_WritePin>
  // Set up the initial direction for Z-axis
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2120      	movs	r1, #32
 8000aa2:	4881      	ldr	r0, [pc, #516]	; (8000ca8 <main+0x244>)
 8000aa4:	f003 fcf0 	bl	8004488 <HAL_GPIO_WritePin>
//   TIM4->CCR4 = periodZ / 2; // first duty cycle (50%)
//   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET); // Set up the enableZ
//   HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_4);


  while(!isPressed){
 8000aa8:	e014      	b.n	8000ad4 <main+0x70>
	  isPressed = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	487f      	ldr	r0, [pc, #508]	; (8000cac <main+0x248>)
 8000ab0:	f003 fcd2 	bl	8004458 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b7d      	ldr	r3, [pc, #500]	; (8000cb0 <main+0x24c>)
 8000aba:	701a      	strb	r2, [r3, #0]
	  HAL_Delay (20);
 8000abc:	2014      	movs	r0, #20
 8000abe:	f001 f911 	bl	8001ce4 <HAL_Delay>
	  if(isPressed){
 8000ac2:	4b7b      	ldr	r3, [pc, #492]	; (8000cb0 <main+0x24c>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <main+0x70>
		  isPressed = 0;
 8000acc:	4b78      	ldr	r3, [pc, #480]	; (8000cb0 <main+0x24c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
		  break;
 8000ad2:	e004      	b.n	8000ade <main+0x7a>
  while(!isPressed){
 8000ad4:	4b76      	ldr	r3, [pc, #472]	; (8000cb0 <main+0x24c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0e5      	beq.n	8000aaa <main+0x46>
//	  if(adc_val > 27000){
//		  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); // Stop PWM
//	  }
//	  HAL_Delay (200); // wait for 200ms

	  if(motorState.curQuadrant == NONEQUADRANT && motorState.state == STOP_STATE){
 8000ade:	4b75      	ldr	r3, [pc, #468]	; (8000cb4 <main+0x250>)
 8000ae0:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10d      	bne.n	8000b04 <main+0xa0>
 8000ae8:	4b72      	ldr	r3, [pc, #456]	; (8000cb4 <main+0x250>)
 8000aea:	f993 3000 	ldrsb.w	r3, [r3]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d108      	bne.n	8000b04 <main+0xa0>
		  first_position(4, 0, 0, 4, COUNTERCLOCKWISE);
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	2304      	movs	r3, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2004      	movs	r0, #4
 8000b00:	f000 f964 	bl	8000dcc <first_position>
	  }

	  if(motorState.curQuadrant == FIRSTQUADRANT && motorState.state == STOP_STATE){
 8000b04:	4b6b      	ldr	r3, [pc, #428]	; (8000cb4 <main+0x250>)
 8000b06:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d10e      	bne.n	8000b2c <main+0xc8>
 8000b0e:	4b69      	ldr	r3, [pc, #420]	; (8000cb4 <main+0x250>)
 8000b10:	f993 3000 	ldrsb.w	r3, [r3]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d109      	bne.n	8000b2c <main+0xc8>
		  // DEBUG
//		  int curQuarant = (int)(motorState.curQuadrant);
//		  int curState = (int)motorState.state;
//		  myprintf("phase2 %d state% d\n\r", curQuarant, curState);
		  first_position(0, 4, -4, 0, COUNTERCLOCKWISE);
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f06f 0203 	mvn.w	r2, #3
 8000b24:	2104      	movs	r1, #4
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 f950 	bl	8000dcc <first_position>
	  }

	  if(motorState.curQuadrant == SECONDQUADRANT && motorState.state == STOP_STATE){
 8000b2c:	4b61      	ldr	r3, [pc, #388]	; (8000cb4 <main+0x250>)
 8000b2e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d10f      	bne.n	8000b56 <main+0xf2>
 8000b36:	4b5f      	ldr	r3, [pc, #380]	; (8000cb4 <main+0x250>)
 8000b38:	f993 3000 	ldrsb.w	r3, [r3]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10a      	bne.n	8000b56 <main+0xf2>
		  first_position(-4, 0, 0, -4, COUNTERCLOCKWISE);
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	f06f 0303 	mvn.w	r3, #3
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	f06f 0003 	mvn.w	r0, #3
 8000b52:	f000 f93b 	bl	8000dcc <first_position>
	  }

	  if(motorState.curQuadrant == THIRDQUADRANT && motorState.state == STOP_STATE){
 8000b56:	4b57      	ldr	r3, [pc, #348]	; (8000cb4 <main+0x250>)
 8000b58:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	d10e      	bne.n	8000b7e <main+0x11a>
 8000b60:	4b54      	ldr	r3, [pc, #336]	; (8000cb4 <main+0x250>)
 8000b62:	f993 3000 	ldrsb.w	r3, [r3]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d109      	bne.n	8000b7e <main+0x11a>
		  first_position(0, -4, 0, 4, COUNTERCLOCKWISE);
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2304      	movs	r3, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	f06f 0103 	mvn.w	r1, #3
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 f927 	bl	8000dcc <first_position>
	  }

	  uint8_t leftStateX = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11);
 8000b7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b82:	4847      	ldr	r0, [pc, #284]	; (8000ca0 <main+0x23c>)
 8000b84:	f003 fc68 	bl	8004458 <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	71fb      	strb	r3, [r7, #7]
	  uint8_t rightStateX = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3);
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	4845      	ldr	r0, [pc, #276]	; (8000ca4 <main+0x240>)
 8000b90:	f003 fc62 	bl	8004458 <HAL_GPIO_ReadPin>
 8000b94:	4603      	mov	r3, r0
 8000b96:	71bb      	strb	r3, [r7, #6]
	  uint8_t leftStateY = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12);
 8000b98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9c:	4846      	ldr	r0, [pc, #280]	; (8000cb8 <main+0x254>)
 8000b9e:	f003 fc5b 	bl	8004458 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	717b      	strb	r3, [r7, #5]
	  uint8_t rightStateY = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13);
 8000ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000baa:	4843      	ldr	r0, [pc, #268]	; (8000cb8 <main+0x254>)
 8000bac:	f003 fc54 	bl	8004458 <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	713b      	strb	r3, [r7, #4]

	  if(!leftStateX || !rightStateX){
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d002      	beq.n	8000bc0 <main+0x15c>
 8000bba:	79bb      	ldrb	r3, [r7, #6]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d132      	bne.n	8000c26 <main+0x1c2>
		  // Increase the count of current loop
		  loop_numX++;
 8000bc0:	4b3e      	ldr	r3, [pc, #248]	; (8000cbc <main+0x258>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b3c      	ldr	r3, [pc, #240]	; (8000cbc <main+0x258>)
 8000bca:	701a      	strb	r2, [r3, #0]
		  if(loop_numX == 2)	total_pulsesX = pulseCountX / 2;
 8000bcc:	4b3b      	ldr	r3, [pc, #236]	; (8000cbc <main+0x258>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d104      	bne.n	8000bde <main+0x17a>
 8000bd4:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <main+0x25c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	085b      	lsrs	r3, r3, #1
 8000bda:	4a3a      	ldr	r2, [pc, #232]	; (8000cc4 <main+0x260>)
 8000bdc:	6013      	str	r3, [r2, #0]
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4); // Stop PWM
 8000bde:	210c      	movs	r1, #12
 8000be0:	4839      	ldr	r0, [pc, #228]	; (8000cc8 <main+0x264>)
 8000be2:	f007 fa5b 	bl	800809c <HAL_TIM_PWM_Stop>

		  GPIO_PinState curDirectionX = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	482d      	ldr	r0, [pc, #180]	; (8000ca0 <main+0x23c>)
 8000bea:	f003 fc35 	bl	8004458 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	70fb      	strb	r3, [r7, #3]
		  GPIO_PinState newDirectionX = (curDirectionX == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000bf2:	78fb      	ldrb	r3, [r7, #3]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	bf14      	ite	ne
 8000bf8:	2301      	movne	r3, #1
 8000bfa:	2300      	moveq	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	70bb      	strb	r3, [r7, #2]
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, newDirectionX);
 8000c00:	78bb      	ldrb	r3, [r7, #2]
 8000c02:	461a      	mov	r2, r3
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	4826      	ldr	r0, [pc, #152]	; (8000ca0 <main+0x23c>)
 8000c08:	f003 fc3e 	bl	8004488 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000c0c:	2064      	movs	r0, #100	; 0x64
 8000c0e:	f001 f869 	bl	8001ce4 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c18:	4821      	ldr	r0, [pc, #132]	; (8000ca0 <main+0x23c>)
 8000c1a:	f003 fc35 	bl	8004488 <HAL_GPIO_WritePin>
		  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c1e:	210c      	movs	r1, #12
 8000c20:	4829      	ldr	r0, [pc, #164]	; (8000cc8 <main+0x264>)
 8000c22:	f007 fad1 	bl	80081c8 <HAL_TIM_PWM_Start_IT>
	  }
	  if(!leftStateY || !rightStateY){
 8000c26:	797b      	ldrb	r3, [r7, #5]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <main+0x1ce>
 8000c2c:	793b      	ldrb	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d131      	bne.n	8000c96 <main+0x232>
		  loop_numY++;
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <main+0x268>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <main+0x268>)
 8000c3c:	701a      	strb	r2, [r3, #0]
		  if(loop_numY == 2)	total_pulsesY = pulseCountY / 2;
 8000c3e:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <main+0x268>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d104      	bne.n	8000c50 <main+0x1ec>
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <main+0x26c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	085b      	lsrs	r3, r3, #1
 8000c4c:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <main+0x270>)
 8000c4e:	6013      	str	r3, [r2, #0]
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); // Stop PWM
 8000c50:	2100      	movs	r1, #0
 8000c52:	4821      	ldr	r0, [pc, #132]	; (8000cd8 <main+0x274>)
 8000c54:	f007 fa22 	bl	800809c <HAL_TIM_PWM_Stop>

		  GPIO_PinState curDirectionY = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_4);
 8000c58:	2110      	movs	r1, #16
 8000c5a:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <main+0x240>)
 8000c5c:	f003 fbfc 	bl	8004458 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	707b      	strb	r3, [r7, #1]
		  GPIO_PinState newDirectionY = (curDirectionY == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000c64:	787b      	ldrb	r3, [r7, #1]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	bf14      	ite	ne
 8000c6a:	2301      	movne	r3, #1
 8000c6c:	2300      	moveq	r3, #0
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	703b      	strb	r3, [r7, #0]
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, newDirectionY);
 8000c72:	783b      	ldrb	r3, [r7, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	2110      	movs	r1, #16
 8000c78:	480a      	ldr	r0, [pc, #40]	; (8000ca4 <main+0x240>)
 8000c7a:	f003 fc05 	bl	8004488 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000c7e:	2064      	movs	r0, #100	; 0x64
 8000c80:	f001 f830 	bl	8001ce4 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2120      	movs	r1, #32
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <main+0x240>)
 8000c8a:	f003 fbfd 	bl	8004488 <HAL_GPIO_WritePin>
		  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4811      	ldr	r0, [pc, #68]	; (8000cd8 <main+0x274>)
 8000c92:	f007 fa99 	bl	80081c8 <HAL_TIM_PWM_Start_IT>
	  }
 	   HAL_Delay(200);
 8000c96:	20c8      	movs	r0, #200	; 0xc8
 8000c98:	f001 f824 	bl	8001ce4 <HAL_Delay>
  {
 8000c9c:	e71f      	b.n	8000ade <main+0x7a>
 8000c9e:	bf00      	nop
 8000ca0:	58021000 	.word	0x58021000
 8000ca4:	58021400 	.word	0x58021400
 8000ca8:	58021800 	.word	0x58021800
 8000cac:	58020800 	.word	0x58020800
 8000cb0:	240000a5 	.word	0x240000a5
 8000cb4:	240000a8 	.word	0x240000a8
 8000cb8:	58020c00 	.word	0x58020c00
 8000cbc:	24000098 	.word	0x24000098
 8000cc0:	24000094 	.word	0x24000094
 8000cc4:	24000090 	.word	0x24000090
 8000cc8:	240000cc 	.word	0x240000cc
 8000ccc:	240000a4 	.word	0x240000a4
 8000cd0:	240000a0 	.word	0x240000a0
 8000cd4:	2400009c 	.word	0x2400009c
 8000cd8:	24000118 	.word	0x24000118

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b09c      	sub	sp, #112	; 0x70
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	224c      	movs	r2, #76	; 0x4c
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f00a f9e6 	bl	800b0bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2220      	movs	r2, #32
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00a f9e0 	bl	800b0bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f003 fbf7 	bl	80044f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <SystemClock_Config+0xd8>)
 8000d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0a:	4a2a      	ldr	r2, [pc, #168]	; (8000db4 <SystemClock_Config+0xd8>)
 8000d0c:	f023 0301 	bic.w	r3, r3, #1
 8000d10:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d12:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <SystemClock_Config+0xd8>)
 8000d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <SystemClock_Config+0xdc>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d24:	4a24      	ldr	r2, [pc, #144]	; (8000db8 <SystemClock_Config+0xdc>)
 8000d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <SystemClock_Config+0xdc>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d38:	bf00      	nop
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <SystemClock_Config+0xdc>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d46:	d1f8      	bne.n	8000d3a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <SystemClock_Config+0xe0>)
 8000d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <SystemClock_Config+0xe0>)
 8000d4e:	f023 0303 	bic.w	r3, r3, #3
 8000d52:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d54:	2302      	movs	r3, #2
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5c:	2340      	movs	r3, #64	; 0x40
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 fbfb 	bl	8004564 <HAL_RCC_OscConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d74:	f000 f824 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d78:	233f      	movs	r3, #63	; 0x3f
 8000d7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d8c:	2340      	movs	r3, #64	; 0x40
 8000d8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f004 f83b 	bl	8004e18 <HAL_RCC_ClockConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000da8:	f000 f80a 	bl	8000dc0 <Error_Handler>
  }
}
 8000dac:	bf00      	nop
 8000dae:	3770      	adds	r7, #112	; 0x70
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	58000400 	.word	0x58000400
 8000db8:	58024800 	.word	0x58024800
 8000dbc:	58024400 	.word	0x58024400

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <Error_Handler+0x8>
	...

08000dcc <first_position>:
//	if (nby) HAL_UART_Transmit(&huart3,st,nby,10);
//}


// Initialize in each quadrant, and this function doesn't have the move content
void first_position(int32_t start_x, int32_t start_y, int32_t stop_x, int32_t stop_y, int8_t direction){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	603b      	str	r3, [r7, #0]
//	if(pow(start_x, 2) + pow(start_y, 2) != pow(stop_x, 2) + pow(stop_y, 2)){
//		return;
//	}

	// Initialize the parameters
	motorState.f_e = 0;
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <first_position+0xbc>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	605a      	str	r2, [r3, #4]
	motorState.startX = start_x * ACCURACY;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000de6:	fb02 f303 	mul.w	r3, r2, r3
 8000dea:	4a27      	ldr	r2, [pc, #156]	; (8000e88 <first_position+0xbc>)
 8000dec:	6093      	str	r3, [r2, #8]
	motorState.startY = start_y * ACCURACY;
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000df4:	fb02 f303 	mul.w	r3, r2, r3
 8000df8:	4a23      	ldr	r2, [pc, #140]	; (8000e88 <first_position+0xbc>)
 8000dfa:	60d3      	str	r3, [r2, #12]
	motorState.endX = stop_x * ACCURACY;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000e02:	fb02 f303 	mul.w	r3, r2, r3
 8000e06:	4a20      	ldr	r2, [pc, #128]	; (8000e88 <first_position+0xbc>)
 8000e08:	6113      	str	r3, [r2, #16]
	motorState.endY = stop_y * ACCURACY;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000e10:	fb02 f303 	mul.w	r3, r2, r3
 8000e14:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <first_position+0xbc>)
 8000e16:	6153      	str	r3, [r2, #20]
	motorState.total_pulses = labs(motorState.startX - motorState.endX) +
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <first_position+0xbc>)
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <first_position+0xbc>)
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e26:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
			labs(motorState.startY - motorState.endY);
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <first_position+0xbc>)
 8000e2c:	68d9      	ldr	r1, [r3, #12]
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <first_position+0xbc>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	1acb      	subs	r3, r1, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bfb8      	it	lt
 8000e38:	425b      	neglt	r3, r3
	motorState.total_pulses = labs(motorState.startX - motorState.endX) +
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <first_position+0xbc>)
 8000e3e:	6193      	str	r3, [r2, #24]
	motorState.state = RUNNING_STATE;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <first_position+0xbc>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]

	// Set up the direction for x-axis and y-axis, then set the quadrant
	new_direction(motorState.startX, motorState.startY, direction);
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <first_position+0xbc>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	4a0f      	ldr	r2, [pc, #60]	; (8000e88 <first_position+0xbc>)
 8000e4c:	68d1      	ldr	r1, [r2, #12]
 8000e4e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f81e 	bl	8000e94 <new_direction>
	// Set up the first step, the direction, and the f_e here is still 0
	if(motorState.startX == 0){
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <first_position+0xbc>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d107      	bne.n	8000e70 <first_position+0xa4>
		motorState.move_axis = X_AXIS;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <first_position+0xbc>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	771a      	strb	r2, [r3, #28]
		HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_4);
 8000e66:	210c      	movs	r1, #12
 8000e68:	4808      	ldr	r0, [pc, #32]	; (8000e8c <first_position+0xc0>)
 8000e6a:	f007 f9ad 	bl	80081c8 <HAL_TIM_PWM_Start_IT>
		motorState.move_axis = Y_AXIS;
		HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);
//		motorState.startY = motorState.startY + motorState.y_dir;
		// motorState.f_e = motorState.f_e + motorState.y_dir * 2 * motorState.startY + 1;
	}
}
 8000e6e:	e006      	b.n	8000e7e <first_position+0xb2>
		motorState.move_axis = Y_AXIS;
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <first_position+0xbc>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	771a      	strb	r2, [r3, #28]
		HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);
 8000e76:	2100      	movs	r1, #0
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <first_position+0xc4>)
 8000e7a:	f007 f9a5 	bl	80081c8 <HAL_TIM_PWM_Start_IT>
}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	240000a8 	.word	0x240000a8
 8000e8c:	240000cc 	.word	0x240000cc
 8000e90:	24000118 	.word	0x24000118

08000e94 <new_direction>:


// Set the new direction and quadrant based on the position
void new_direction(int32_t posX, int32_t posY, int8_t direction){
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	71fb      	strb	r3, [r7, #7]
	motorState.dir = direction;
 8000ea2:	4a33      	ldr	r2, [pc, #204]	; (8000f70 <new_direction+0xdc>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	7753      	strb	r3, [r2, #29]
	// If we draw this circle counter clockwise
	if(motorState.dir == COUNTERCLOCKWISE){
 8000ea8:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <new_direction+0xdc>)
 8000eaa:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8000eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb2:	d157      	bne.n	8000f64 <new_direction+0xd0>
		// Check Right part firstly
		if(posX >= 0 && posY >= 0 && motorState.curQuadrant == NONEQUADRANT){
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db12      	blt.n	8000ee0 <new_direction+0x4c>
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0f      	blt.n	8000ee0 <new_direction+0x4c>
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <new_direction+0xdc>)
 8000ec2:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10a      	bne.n	8000ee0 <new_direction+0x4c>
				// The first quadrant
				motorState.curQuadrant = FIRSTQUADRANT;
 8000eca:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <new_direction+0xdc>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]
				motorState.x_dir = COUNTERCLOCKWISE;
 8000ed2:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <new_direction+0xdc>)
 8000ed4:	22ff      	movs	r2, #255	; 0xff
 8000ed6:	779a      	strb	r2, [r3, #30]
				motorState.y_dir = CLOCKWISE;
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <new_direction+0xdc>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	77da      	strb	r2, [r3, #31]
 8000ede:	e041      	b.n	8000f64 <new_direction+0xd0>
		}
		else if(posX >= 0 && posY <= 0 && motorState.curQuadrant == THIRDQUADRANT){
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db12      	blt.n	8000f0c <new_direction+0x78>
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	dc0f      	bgt.n	8000f0c <new_direction+0x78>
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <new_direction+0xdc>)
 8000eee:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d10a      	bne.n	8000f0c <new_direction+0x78>
				// The Fourth quadrant
				motorState.curQuadrant = FOURTHQUADRANT;
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <new_direction+0xdc>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	f883 2020 	strb.w	r2, [r3, #32]
				motorState.x_dir = CLOCKWISE;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <new_direction+0xdc>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	779a      	strb	r2, [r3, #30]
				motorState.y_dir = CLOCKWISE;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <new_direction+0xdc>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	77da      	strb	r2, [r3, #31]
 8000f0a:	e02b      	b.n	8000f64 <new_direction+0xd0>
		}
		else if(posX <= 0 && posY >= 0 && motorState.curQuadrant == FIRSTQUADRANT){
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	dc12      	bgt.n	8000f38 <new_direction+0xa4>
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0f      	blt.n	8000f38 <new_direction+0xa4>
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <new_direction+0xdc>)
 8000f1a:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d10a      	bne.n	8000f38 <new_direction+0xa4>
				// The second quadrant
				motorState.curQuadrant = SECONDQUADRANT;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <new_direction+0xdc>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	f883 2020 	strb.w	r2, [r3, #32]
				motorState.x_dir = COUNTERCLOCKWISE;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <new_direction+0xdc>)
 8000f2c:	22ff      	movs	r2, #255	; 0xff
 8000f2e:	779a      	strb	r2, [r3, #30]
				motorState.y_dir = COUNTERCLOCKWISE;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <new_direction+0xdc>)
 8000f32:	22ff      	movs	r2, #255	; 0xff
 8000f34:	77da      	strb	r2, [r3, #31]
 8000f36:	e015      	b.n	8000f64 <new_direction+0xd0>
		}
		else if(posX <= 0 && posY <= 0 && motorState.curQuadrant == SECONDQUADRANT) {
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	dc12      	bgt.n	8000f64 <new_direction+0xd0>
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	dc0f      	bgt.n	8000f64 <new_direction+0xd0>
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <new_direction+0xdc>)
 8000f46:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d10a      	bne.n	8000f64 <new_direction+0xd0>
				// The third quadrant
				motorState.curQuadrant = THIRDQUADRANT;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <new_direction+0xdc>)
 8000f50:	2203      	movs	r2, #3
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]
				motorState.x_dir = CLOCKWISE;
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <new_direction+0xdc>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	779a      	strb	r2, [r3, #30]
				motorState.y_dir = COUNTERCLOCKWISE;
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <new_direction+0xdc>)
 8000f5e:	22ff      	movs	r2, #255	; 0xff
 8000f60:	77da      	strb	r2, [r3, #31]
//				motorState.x_dir = COUNTERCLOCKWISE;
//				motorState.y_dir = CLOCKWISE;
//			}
//		}
//	}
}
 8000f62:	e7ff      	b.n	8000f64 <new_direction+0xd0>
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	240000a8 	.word	0x240000a8

08000f74 <new_position>:

// Determine the new parameters after each pulses
void new_position(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	if(motorState.total_pulses == 0){
 8000f78:	4b9d      	ldr	r3, [pc, #628]	; (80011f0 <new_position+0x27c>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d111      	bne.n	8000fa4 <new_position+0x30>
		// DEBUG VARIABLE
		// int curPulse = (int)(motorState.total_pulses);
		// myprintf("%d\n\r", curPulse);
		motorState.state = STOP_STATE;
 8000f80:	4b9b      	ldr	r3, [pc, #620]	; (80011f0 <new_position+0x27c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
		if(motorState.curQuadrant == FOURTHQUADRANT){
 8000f86:	4b9a      	ldr	r3, [pc, #616]	; (80011f0 <new_position+0x27c>)
 8000f88:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	f040 8162 	bne.w	8001256 <new_position+0x2e2>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000f92:	210c      	movs	r1, #12
 8000f94:	4897      	ldr	r0, [pc, #604]	; (80011f4 <new_position+0x280>)
 8000f96:	f007 fa71 	bl	800847c <HAL_TIM_PWM_Stop_IT>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4896      	ldr	r0, [pc, #600]	; (80011f8 <new_position+0x284>)
 8000f9e:	f007 fa6d 	bl	800847c <HAL_TIM_PWM_Stop_IT>
		}
		return;
 8000fa2:	e158      	b.n	8001256 <new_position+0x2e2>
////			motorState.startY++;
////		}
//	}

	// Update the information of the motorState, including the position, move_axis
	if(motorState.dir == COUNTERCLOCKWISE){
 8000fa4:	4b92      	ldr	r3, [pc, #584]	; (80011f0 <new_position+0x27c>)
 8000fa6:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8000faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fae:	f040 814c 	bne.w	800124a <new_position+0x2d6>
		if(motorState.f_e < 0){
 8000fb2:	4b8f      	ldr	r3, [pc, #572]	; (80011f0 <new_position+0x27c>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f280 80a1 	bge.w	80010fe <new_position+0x18a>
			if(motorState.curQuadrant == FIRSTQUADRANT){
 8000fbc:	4b8c      	ldr	r3, [pc, #560]	; (80011f0 <new_position+0x27c>)
 8000fbe:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d122      	bne.n	800100c <new_position+0x98>
				motorState.move_axis = Y_AXIS;
 8000fc6:	4b8a      	ldr	r3, [pc, #552]	; (80011f0 <new_position+0x27c>)
 8000fc8:	2202      	movs	r2, #2
 8000fca:	771a      	strb	r2, [r3, #28]
				motorState.startY = motorState.startY + motorState.y_dir;
 8000fcc:	4b88      	ldr	r3, [pc, #544]	; (80011f0 <new_position+0x27c>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	4a87      	ldr	r2, [pc, #540]	; (80011f0 <new_position+0x27c>)
 8000fd2:	f992 201f 	ldrsb.w	r2, [r2, #31]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a85      	ldr	r2, [pc, #532]	; (80011f0 <new_position+0x27c>)
 8000fda:	60d3      	str	r3, [r2, #12]
				motorState.f_e = motorState.f_e + 2 * motorState.y_dir * motorState.startY + 1;
 8000fdc:	4b84      	ldr	r3, [pc, #528]	; (80011f0 <new_position+0x27c>)
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	4b83      	ldr	r3, [pc, #524]	; (80011f0 <new_position+0x27c>)
 8000fe2:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4981      	ldr	r1, [pc, #516]	; (80011f0 <new_position+0x27c>)
 8000fea:	68c9      	ldr	r1, [r1, #12]
 8000fec:	fb01 f303 	mul.w	r3, r1, r3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a7e      	ldr	r2, [pc, #504]	; (80011f0 <new_position+0x27c>)
 8000ff6:	6053      	str	r3, [r2, #4]
				// Here update the CCR and other values, then move
				begin_moving(0, 40000, motorState.y_dir);
 8000ff8:	4b7d      	ldr	r3, [pc, #500]	; (80011f0 <new_position+0x27c>)
 8000ffa:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8000ffe:	461a      	mov	r2, r3
 8001000:	f649 4140 	movw	r1, #40000	; 0x9c40
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f92b 	bl	8001260 <begin_moving>
 800100a:	e11e      	b.n	800124a <new_position+0x2d6>
			} else if(motorState.curQuadrant == SECONDQUADRANT){
 800100c:	4b78      	ldr	r3, [pc, #480]	; (80011f0 <new_position+0x27c>)
 800100e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d122      	bne.n	800105c <new_position+0xe8>
				motorState.move_axis = X_AXIS;
 8001016:	4b76      	ldr	r3, [pc, #472]	; (80011f0 <new_position+0x27c>)
 8001018:	2201      	movs	r2, #1
 800101a:	771a      	strb	r2, [r3, #28]
				motorState.startX = motorState.startX + motorState.x_dir;
 800101c:	4b74      	ldr	r3, [pc, #464]	; (80011f0 <new_position+0x27c>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a73      	ldr	r2, [pc, #460]	; (80011f0 <new_position+0x27c>)
 8001022:	f992 201e 	ldrsb.w	r2, [r2, #30]
 8001026:	4413      	add	r3, r2
 8001028:	4a71      	ldr	r2, [pc, #452]	; (80011f0 <new_position+0x27c>)
 800102a:	6093      	str	r3, [r2, #8]
				motorState.f_e = motorState.f_e + 2 * motorState.x_dir * motorState.startX + 1;
 800102c:	4b70      	ldr	r3, [pc, #448]	; (80011f0 <new_position+0x27c>)
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	4b6f      	ldr	r3, [pc, #444]	; (80011f0 <new_position+0x27c>)
 8001032:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	496d      	ldr	r1, [pc, #436]	; (80011f0 <new_position+0x27c>)
 800103a:	6889      	ldr	r1, [r1, #8]
 800103c:	fb01 f303 	mul.w	r3, r1, r3
 8001040:	4413      	add	r3, r2
 8001042:	3301      	adds	r3, #1
 8001044:	4a6a      	ldr	r2, [pc, #424]	; (80011f0 <new_position+0x27c>)
 8001046:	6053      	str	r3, [r2, #4]
				begin_moving(40000, 0, motorState.x_dir);
 8001048:	4b69      	ldr	r3, [pc, #420]	; (80011f0 <new_position+0x27c>)
 800104a:	f993 301e 	ldrsb.w	r3, [r3, #30]
 800104e:	461a      	mov	r2, r3
 8001050:	2100      	movs	r1, #0
 8001052:	f649 4040 	movw	r0, #40000	; 0x9c40
 8001056:	f000 f903 	bl	8001260 <begin_moving>
 800105a:	e0f6      	b.n	800124a <new_position+0x2d6>
			} else if(motorState.curQuadrant == THIRDQUADRANT){
 800105c:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <new_position+0x27c>)
 800105e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d122      	bne.n	80010ac <new_position+0x138>
				motorState.move_axis = Y_AXIS;
 8001066:	4b62      	ldr	r3, [pc, #392]	; (80011f0 <new_position+0x27c>)
 8001068:	2202      	movs	r2, #2
 800106a:	771a      	strb	r2, [r3, #28]
				motorState.startY = motorState.startY + motorState.y_dir;
 800106c:	4b60      	ldr	r3, [pc, #384]	; (80011f0 <new_position+0x27c>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	4a5f      	ldr	r2, [pc, #380]	; (80011f0 <new_position+0x27c>)
 8001072:	f992 201f 	ldrsb.w	r2, [r2, #31]
 8001076:	4413      	add	r3, r2
 8001078:	4a5d      	ldr	r2, [pc, #372]	; (80011f0 <new_position+0x27c>)
 800107a:	60d3      	str	r3, [r2, #12]
				motorState.f_e = motorState.f_e + 2 * motorState.y_dir * motorState.startY + 1;
 800107c:	4b5c      	ldr	r3, [pc, #368]	; (80011f0 <new_position+0x27c>)
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	4b5b      	ldr	r3, [pc, #364]	; (80011f0 <new_position+0x27c>)
 8001082:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4959      	ldr	r1, [pc, #356]	; (80011f0 <new_position+0x27c>)
 800108a:	68c9      	ldr	r1, [r1, #12]
 800108c:	fb01 f303 	mul.w	r3, r1, r3
 8001090:	4413      	add	r3, r2
 8001092:	3301      	adds	r3, #1
 8001094:	4a56      	ldr	r2, [pc, #344]	; (80011f0 <new_position+0x27c>)
 8001096:	6053      	str	r3, [r2, #4]
				begin_moving(0, 40000, motorState.y_dir);
 8001098:	4b55      	ldr	r3, [pc, #340]	; (80011f0 <new_position+0x27c>)
 800109a:	f993 301f 	ldrsb.w	r3, [r3, #31]
 800109e:	461a      	mov	r2, r3
 80010a0:	f649 4140 	movw	r1, #40000	; 0x9c40
 80010a4:	2000      	movs	r0, #0
 80010a6:	f000 f8db 	bl	8001260 <begin_moving>
 80010aa:	e0ce      	b.n	800124a <new_position+0x2d6>
			} else if(motorState.curQuadrant == FOURTHQUADRANT){
 80010ac:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <new_position+0x27c>)
 80010ae:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	f040 80c9 	bne.w	800124a <new_position+0x2d6>
				motorState.move_axis = X_AXIS;
 80010b8:	4b4d      	ldr	r3, [pc, #308]	; (80011f0 <new_position+0x27c>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	771a      	strb	r2, [r3, #28]
				motorState.startX = motorState.startX + motorState.x_dir;
 80010be:	4b4c      	ldr	r3, [pc, #304]	; (80011f0 <new_position+0x27c>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	4a4b      	ldr	r2, [pc, #300]	; (80011f0 <new_position+0x27c>)
 80010c4:	f992 201e 	ldrsb.w	r2, [r2, #30]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a49      	ldr	r2, [pc, #292]	; (80011f0 <new_position+0x27c>)
 80010cc:	6093      	str	r3, [r2, #8]
				motorState.f_e = motorState.f_e + 2 * motorState.x_dir * motorState.startX + 1;
 80010ce:	4b48      	ldr	r3, [pc, #288]	; (80011f0 <new_position+0x27c>)
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <new_position+0x27c>)
 80010d4:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4945      	ldr	r1, [pc, #276]	; (80011f0 <new_position+0x27c>)
 80010dc:	6889      	ldr	r1, [r1, #8]
 80010de:	fb01 f303 	mul.w	r3, r1, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	3301      	adds	r3, #1
 80010e6:	4a42      	ldr	r2, [pc, #264]	; (80011f0 <new_position+0x27c>)
 80010e8:	6053      	str	r3, [r2, #4]
				begin_moving(40000, 0, motorState.x_dir);
 80010ea:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <new_position+0x27c>)
 80010ec:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80010f0:	461a      	mov	r2, r3
 80010f2:	2100      	movs	r1, #0
 80010f4:	f649 4040 	movw	r0, #40000	; 0x9c40
 80010f8:	f000 f8b2 	bl	8001260 <begin_moving>
 80010fc:	e0a5      	b.n	800124a <new_position+0x2d6>
			}
		} else {
			if(motorState.curQuadrant == FIRSTQUADRANT){
 80010fe:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <new_position+0x27c>)
 8001100:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d122      	bne.n	800114e <new_position+0x1da>
				motorState.move_axis = X_AXIS;
 8001108:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <new_position+0x27c>)
 800110a:	2201      	movs	r2, #1
 800110c:	771a      	strb	r2, [r3, #28]
				motorState.startX = motorState.startX + motorState.x_dir;
 800110e:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <new_position+0x27c>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	4a37      	ldr	r2, [pc, #220]	; (80011f0 <new_position+0x27c>)
 8001114:	f992 201e 	ldrsb.w	r2, [r2, #30]
 8001118:	4413      	add	r3, r2
 800111a:	4a35      	ldr	r2, [pc, #212]	; (80011f0 <new_position+0x27c>)
 800111c:	6093      	str	r3, [r2, #8]
				motorState.f_e = motorState.f_e + 2 * motorState.x_dir * motorState.startX + 1;
 800111e:	4b34      	ldr	r3, [pc, #208]	; (80011f0 <new_position+0x27c>)
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <new_position+0x27c>)
 8001124:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4931      	ldr	r1, [pc, #196]	; (80011f0 <new_position+0x27c>)
 800112c:	6889      	ldr	r1, [r1, #8]
 800112e:	fb01 f303 	mul.w	r3, r1, r3
 8001132:	4413      	add	r3, r2
 8001134:	3301      	adds	r3, #1
 8001136:	4a2e      	ldr	r2, [pc, #184]	; (80011f0 <new_position+0x27c>)
 8001138:	6053      	str	r3, [r2, #4]
				begin_moving(40000, 0, motorState.x_dir);
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <new_position+0x27c>)
 800113c:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8001140:	461a      	mov	r2, r3
 8001142:	2100      	movs	r1, #0
 8001144:	f649 4040 	movw	r0, #40000	; 0x9c40
 8001148:	f000 f88a 	bl	8001260 <begin_moving>
 800114c:	e07d      	b.n	800124a <new_position+0x2d6>
				// Here update the CCR and other values, then move
			} else if(motorState.curQuadrant == SECONDQUADRANT){
 800114e:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <new_position+0x27c>)
 8001150:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d122      	bne.n	800119e <new_position+0x22a>
				motorState.move_axis = Y_AXIS;
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <new_position+0x27c>)
 800115a:	2202      	movs	r2, #2
 800115c:	771a      	strb	r2, [r3, #28]
				motorState.startY = motorState.startY + motorState.y_dir;
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <new_position+0x27c>)
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	4a23      	ldr	r2, [pc, #140]	; (80011f0 <new_position+0x27c>)
 8001164:	f992 201f 	ldrsb.w	r2, [r2, #31]
 8001168:	4413      	add	r3, r2
 800116a:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <new_position+0x27c>)
 800116c:	60d3      	str	r3, [r2, #12]
				motorState.f_e = motorState.f_e + 2 * motorState.y_dir * motorState.startY + 1;
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <new_position+0x27c>)
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <new_position+0x27c>)
 8001174:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	491d      	ldr	r1, [pc, #116]	; (80011f0 <new_position+0x27c>)
 800117c:	68c9      	ldr	r1, [r1, #12]
 800117e:	fb01 f303 	mul.w	r3, r1, r3
 8001182:	4413      	add	r3, r2
 8001184:	3301      	adds	r3, #1
 8001186:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <new_position+0x27c>)
 8001188:	6053      	str	r3, [r2, #4]
				begin_moving(0, 40000, motorState.y_dir);
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <new_position+0x27c>)
 800118c:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8001190:	461a      	mov	r2, r3
 8001192:	f649 4140 	movw	r1, #40000	; 0x9c40
 8001196:	2000      	movs	r0, #0
 8001198:	f000 f862 	bl	8001260 <begin_moving>
 800119c:	e055      	b.n	800124a <new_position+0x2d6>
			} else if(motorState.curQuadrant == THIRDQUADRANT){
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <new_position+0x27c>)
 80011a0:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d129      	bne.n	80011fc <new_position+0x288>
				motorState.move_axis = X_AXIS;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <new_position+0x27c>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	771a      	strb	r2, [r3, #28]
				motorState.startX = motorState.startX + motorState.x_dir;
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <new_position+0x27c>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <new_position+0x27c>)
 80011b4:	f992 201e 	ldrsb.w	r2, [r2, #30]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <new_position+0x27c>)
 80011bc:	6093      	str	r3, [r2, #8]
				motorState.f_e = motorState.f_e + 2 * motorState.x_dir * motorState.startX + 1;
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <new_position+0x27c>)
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <new_position+0x27c>)
 80011c4:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4909      	ldr	r1, [pc, #36]	; (80011f0 <new_position+0x27c>)
 80011cc:	6889      	ldr	r1, [r1, #8]
 80011ce:	fb01 f303 	mul.w	r3, r1, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	3301      	adds	r3, #1
 80011d6:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <new_position+0x27c>)
 80011d8:	6053      	str	r3, [r2, #4]
				begin_moving(40000, 0, motorState.x_dir);
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <new_position+0x27c>)
 80011dc:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80011e0:	461a      	mov	r2, r3
 80011e2:	2100      	movs	r1, #0
 80011e4:	f649 4040 	movw	r0, #40000	; 0x9c40
 80011e8:	f000 f83a 	bl	8001260 <begin_moving>
 80011ec:	e02d      	b.n	800124a <new_position+0x2d6>
 80011ee:	bf00      	nop
 80011f0:	240000a8 	.word	0x240000a8
 80011f4:	240000cc 	.word	0x240000cc
 80011f8:	24000118 	.word	0x24000118
			} else if(motorState.curQuadrant == FOURTHQUADRANT){
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <new_position+0x2e8>)
 80011fe:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001202:	2b04      	cmp	r3, #4
 8001204:	d121      	bne.n	800124a <new_position+0x2d6>
				motorState.move_axis = Y_AXIS;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <new_position+0x2e8>)
 8001208:	2202      	movs	r2, #2
 800120a:	771a      	strb	r2, [r3, #28]
				motorState.startY = motorState.startY + motorState.y_dir;
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <new_position+0x2e8>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <new_position+0x2e8>)
 8001212:	f992 201f 	ldrsb.w	r2, [r2, #31]
 8001216:	4413      	add	r3, r2
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <new_position+0x2e8>)
 800121a:	60d3      	str	r3, [r2, #12]
				motorState.f_e = motorState.f_e + 2 * motorState.y_dir * motorState.startY + 1;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <new_position+0x2e8>)
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <new_position+0x2e8>)
 8001222:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <new_position+0x2e8>)
 800122a:	68c9      	ldr	r1, [r1, #12]
 800122c:	fb01 f303 	mul.w	r3, r1, r3
 8001230:	4413      	add	r3, r2
 8001232:	3301      	adds	r3, #1
 8001234:	4a09      	ldr	r2, [pc, #36]	; (800125c <new_position+0x2e8>)
 8001236:	6053      	str	r3, [r2, #4]
				begin_moving(0, 40000, motorState.y_dir);
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <new_position+0x2e8>)
 800123a:	f993 301f 	ldrsb.w	r3, [r3, #31]
 800123e:	461a      	mov	r2, r3
 8001240:	f649 4140 	movw	r1, #40000	; 0x9c40
 8001244:	2000      	movs	r0, #0
 8001246:	f000 f80b 	bl	8001260 <begin_moving>
			}
		}
	}

	motorState.total_pulses--;
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <new_position+0x2e8>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	3b01      	subs	r3, #1
 8001250:	4a02      	ldr	r2, [pc, #8]	; (800125c <new_position+0x2e8>)
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	e000      	b.n	8001258 <new_position+0x2e4>
		return;
 8001256:	bf00      	nop
//	 myprintf("%d\n\r", curPulse);
// 	if(motorState.total_pulses == 0){
//		HAL_TIM_PWM_Stop_IT(&htim2,TIM_CHANNEL_4);
//		HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_1);
//	}
}
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	240000a8 	.word	0x240000a8

08001260 <begin_moving>:

void begin_moving(uint32_t X_ARR, uint32_t Y_ARR, int8_t direction){
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	4613      	mov	r3, r2
 800126c:	71fb      	strb	r3, [r7, #7]
	// Check if we need to start X-axis and Y-axis
	if(X_ARR != 0){
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d02b      	beq.n	80012cc <begin_moving+0x6c>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001274:	2100      	movs	r1, #0
 8001276:	482b      	ldr	r0, [pc, #172]	; (8001324 <begin_moving+0xc4>)
 8001278:	f006 ff10 	bl	800809c <HAL_TIM_PWM_Stop>
		// HAL_Delay (1); // wait for 1ms
		// If we need to start X-axis, set up the duty cycle, enable, and direction, then start it
		TIM2 -> ARR = X_ARR;
 800127c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM2 -> CCR4 = X_ARR / 2;
 8001284:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	085b      	lsrs	r3, r3, #1
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET); // Set up the enableX
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001294:	4824      	ldr	r0, [pc, #144]	; (8001328 <begin_moving+0xc8>)
 8001296:	f003 f8f7 	bl	8004488 <HAL_GPIO_WritePin>
		// Set up the direction for X-axis
		// If goes to the negative part of X-axis
		if(direction == COUNTERCLOCKWISE){
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a2:	d105      	bne.n	80012b0 <begin_moving+0x50>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	481f      	ldr	r0, [pc, #124]	; (8001328 <begin_moving+0xc8>)
 80012aa:	f003 f8ed 	bl	8004488 <HAL_GPIO_WritePin>
 80012ae:	e008      	b.n	80012c2 <begin_moving+0x62>
		} else if(direction == CLOCKWISE){
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d104      	bne.n	80012c2 <begin_moving+0x62>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	481a      	ldr	r0, [pc, #104]	; (8001328 <begin_moving+0xc8>)
 80012be:	f003 f8e3 	bl	8004488 <HAL_GPIO_WritePin>
		}
		HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_4);
 80012c2:	210c      	movs	r1, #12
 80012c4:	4819      	ldr	r0, [pc, #100]	; (800132c <begin_moving+0xcc>)
 80012c6:	f006 ff7f 	bl	80081c8 <HAL_TIM_PWM_Start_IT>
		} else if(direction == CLOCKWISE){
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
		}
		HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);
	}
}
 80012ca:	e027      	b.n	800131c <begin_moving+0xbc>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80012cc:	210c      	movs	r1, #12
 80012ce:	4817      	ldr	r0, [pc, #92]	; (800132c <begin_moving+0xcc>)
 80012d0:	f006 fee4 	bl	800809c <HAL_TIM_PWM_Stop>
		TIM3->ARR = Y_ARR; // first periodY
 80012d4:	4a16      	ldr	r2, [pc, #88]	; (8001330 <begin_moving+0xd0>)
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->CCR1 = Y_ARR / 2; // first duty cycle (50%)
 80012da:	4a15      	ldr	r2, [pc, #84]	; (8001330 <begin_moving+0xd0>)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	085b      	lsrs	r3, r3, #1
 80012e0:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET); // Set up the enableY
 80012e2:	2200      	movs	r2, #0
 80012e4:	2120      	movs	r1, #32
 80012e6:	4813      	ldr	r0, [pc, #76]	; (8001334 <begin_moving+0xd4>)
 80012e8:	f003 f8ce 	bl	8004488 <HAL_GPIO_WritePin>
		if(direction == COUNTERCLOCKWISE){
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f4:	d105      	bne.n	8001302 <begin_moving+0xa2>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	2110      	movs	r1, #16
 80012fa:	480e      	ldr	r0, [pc, #56]	; (8001334 <begin_moving+0xd4>)
 80012fc:	f003 f8c4 	bl	8004488 <HAL_GPIO_WritePin>
 8001300:	e008      	b.n	8001314 <begin_moving+0xb4>
		} else if(direction == CLOCKWISE){
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d104      	bne.n	8001314 <begin_moving+0xb4>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2110      	movs	r1, #16
 800130e:	4809      	ldr	r0, [pc, #36]	; (8001334 <begin_moving+0xd4>)
 8001310:	f003 f8ba 	bl	8004488 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);
 8001314:	2100      	movs	r1, #0
 8001316:	4803      	ldr	r0, [pc, #12]	; (8001324 <begin_moving+0xc4>)
 8001318:	f006 ff56 	bl	80081c8 <HAL_TIM_PWM_Start_IT>
}
 800131c:	bf00      	nop
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	24000118 	.word	0x24000118
 8001328:	58021000 	.word	0x58021000
 800132c:	240000cc 	.word	0x240000cc
 8001330:	40000400 	.word	0x40000400
 8001334:	58021400 	.word	0x58021400

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_MspInit+0x30>)
 8001340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001344:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_MspInit+0x30>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_MspInit+0x30>)
 8001350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	58024400 	.word	0x58024400

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001370:	e7fe      	b.n	8001370 <NMI_Handler+0x4>

08001372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <MemManage_Handler+0x4>

0800137e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <UsageFault_Handler+0x4>

0800138a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b8:	f000 fc74 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <ADC_IRQHandler+0x10>)
 80013c6:	f001 f82d 	bl	8002424 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2400002c 	.word	0x2400002c

080013d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <TIM2_IRQHandler+0x10>)
 80013da:	f007 f933 	bl	8008644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	240000cc 	.word	0x240000cc

080013e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <TIM3_IRQHandler+0x10>)
 80013ee:	f007 f929 	bl	8008644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	24000118 	.word	0x24000118

080013fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <TIM4_IRQHandler+0x10>)
 8001402:	f007 f91f 	bl	8008644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	24000164 	.word	0x24000164

08001410 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <USART3_IRQHandler+0x10>)
 8001416:	f008 f98d 	bl	8009734 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	240001b0 	.word	0x240001b0

08001424 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001428:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800142c:	f003 f845 	bl	80044ba <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001438:	4b37      	ldr	r3, [pc, #220]	; (8001518 <SystemInit+0xe4>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143e:	4a36      	ldr	r2, [pc, #216]	; (8001518 <SystemInit+0xe4>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001448:	4b34      	ldr	r3, [pc, #208]	; (800151c <SystemInit+0xe8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	2b06      	cmp	r3, #6
 8001452:	d807      	bhi.n	8001464 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001454:	4b31      	ldr	r3, [pc, #196]	; (800151c <SystemInit+0xe8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 030f 	bic.w	r3, r3, #15
 800145c:	4a2f      	ldr	r2, [pc, #188]	; (800151c <SystemInit+0xe8>)
 800145e:	f043 0307 	orr.w	r3, r3, #7
 8001462:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001464:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <SystemInit+0xec>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a2d      	ldr	r2, [pc, #180]	; (8001520 <SystemInit+0xec>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001470:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <SystemInit+0xec>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <SystemInit+0xec>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4929      	ldr	r1, [pc, #164]	; (8001520 <SystemInit+0xec>)
 800147c:	4b29      	ldr	r3, [pc, #164]	; (8001524 <SystemInit+0xf0>)
 800147e:	4013      	ands	r3, r2
 8001480:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001482:	4b26      	ldr	r3, [pc, #152]	; (800151c <SystemInit+0xe8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800148e:	4b23      	ldr	r3, [pc, #140]	; (800151c <SystemInit+0xe8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 030f 	bic.w	r3, r3, #15
 8001496:	4a21      	ldr	r2, [pc, #132]	; (800151c <SystemInit+0xe8>)
 8001498:	f043 0307 	orr.w	r3, r3, #7
 800149c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <SystemInit+0xec>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <SystemInit+0xec>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <SystemInit+0xec>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <SystemInit+0xec>)
 80014b2:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <SystemInit+0xf4>)
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <SystemInit+0xec>)
 80014b8:	4a1c      	ldr	r2, [pc, #112]	; (800152c <SystemInit+0xf8>)
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <SystemInit+0xec>)
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <SystemInit+0xfc>)
 80014c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <SystemInit+0xec>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <SystemInit+0xec>)
 80014ca:	4a19      	ldr	r2, [pc, #100]	; (8001530 <SystemInit+0xfc>)
 80014cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <SystemInit+0xec>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <SystemInit+0xec>)
 80014d6:	4a16      	ldr	r2, [pc, #88]	; (8001530 <SystemInit+0xfc>)
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <SystemInit+0xec>)
 80014dc:	2200      	movs	r2, #0
 80014de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <SystemInit+0xec>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <SystemInit+0xec>)
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <SystemInit+0xec>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <SystemInit+0x100>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <SystemInit+0x104>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014fe:	d202      	bcs.n	8001506 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <SystemInit+0x108>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <SystemInit+0x10c>)
 8001508:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800150c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00
 800151c:	52002000 	.word	0x52002000
 8001520:	58024400 	.word	0x58024400
 8001524:	eaf6ed7f 	.word	0xeaf6ed7f
 8001528:	02020200 	.word	0x02020200
 800152c:	01ff0000 	.word	0x01ff0000
 8001530:	01010280 	.word	0x01010280
 8001534:	5c001000 	.word	0x5c001000
 8001538:	ffff0000 	.word	0xffff0000
 800153c:	51008108 	.word	0x51008108
 8001540:	52004000 	.word	0x52004000

08001544 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	; 0x38
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <MX_TIM2_Init+0xe8>)
 8001578:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800157c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <MX_TIM2_Init+0xe8>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b29      	ldr	r3, [pc, #164]	; (800162c <MX_TIM2_Init+0xe8>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400 - 1;
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <MX_TIM2_Init+0xe8>)
 800158c:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001590:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <MX_TIM2_Init+0xe8>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <MX_TIM2_Init+0xe8>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800159e:	4823      	ldr	r0, [pc, #140]	; (800162c <MX_TIM2_Init+0xe8>)
 80015a0:	f006 fcc4 	bl	8007f2c <HAL_TIM_Base_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80015aa:	f7ff fc09 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b8:	4619      	mov	r1, r3
 80015ba:	481c      	ldr	r0, [pc, #112]	; (800162c <MX_TIM2_Init+0xe8>)
 80015bc:	f007 fa5e 	bl	8008a7c <HAL_TIM_ConfigClockSource>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80015c6:	f7ff fbfb 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ca:	4818      	ldr	r0, [pc, #96]	; (800162c <MX_TIM2_Init+0xe8>)
 80015cc:	f006 fd05 	bl	8007fda <HAL_TIM_PWM_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80015d6:	f7ff fbf3 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	4810      	ldr	r0, [pc, #64]	; (800162c <MX_TIM2_Init+0xe8>)
 80015ea:	f007 ffa7 	bl	800953c <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015f4:	f7ff fbe4 	bl	8000dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f8:	2360      	movs	r3, #96	; 0x60
 80015fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001608:	463b      	mov	r3, r7
 800160a:	220c      	movs	r2, #12
 800160c:	4619      	mov	r1, r3
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_TIM2_Init+0xe8>)
 8001610:	f007 f920 	bl	8008854 <HAL_TIM_PWM_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800161a:	f7ff fbd1 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_TIM2_Init+0xe8>)
 8001620:	f000 f95a 	bl	80018d8 <HAL_TIM_MspPostInit>

}
 8001624:	bf00      	nop
 8001626:	3738      	adds	r7, #56	; 0x38
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	240000cc 	.word	0x240000cc

08001630 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08e      	sub	sp, #56	; 0x38
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001650:	463b      	mov	r3, r7
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]
 800165e:	615a      	str	r2, [r3, #20]
 8001660:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <MX_TIM3_Init+0xe8>)
 8001664:	4a2d      	ldr	r2, [pc, #180]	; (800171c <MX_TIM3_Init+0xec>)
 8001666:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001668:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <MX_TIM3_Init+0xe8>)
 800166a:	2200      	movs	r2, #0
 800166c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <MX_TIM3_Init+0xe8>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200 - 1;
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <MX_TIM3_Init+0xe8>)
 8001676:	f640 427f 	movw	r2, #3199	; 0xc7f
 800167a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167c:	4b26      	ldr	r3, [pc, #152]	; (8001718 <MX_TIM3_Init+0xe8>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001682:	4b25      	ldr	r3, [pc, #148]	; (8001718 <MX_TIM3_Init+0xe8>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001688:	4823      	ldr	r0, [pc, #140]	; (8001718 <MX_TIM3_Init+0xe8>)
 800168a:	f006 fc4f 	bl	8007f2c <HAL_TIM_Base_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001694:	f7ff fb94 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800169e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a2:	4619      	mov	r1, r3
 80016a4:	481c      	ldr	r0, [pc, #112]	; (8001718 <MX_TIM3_Init+0xe8>)
 80016a6:	f007 f9e9 	bl	8008a7c <HAL_TIM_ConfigClockSource>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80016b0:	f7ff fb86 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016b4:	4818      	ldr	r0, [pc, #96]	; (8001718 <MX_TIM3_Init+0xe8>)
 80016b6:	f006 fc90 	bl	8007fda <HAL_TIM_PWM_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016c0:	f7ff fb7e 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	4811      	ldr	r0, [pc, #68]	; (8001718 <MX_TIM3_Init+0xe8>)
 80016d4:	f007 ff32 	bl	800953c <HAL_TIMEx_MasterConfigSynchronization>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016de:	f7ff fb6f 	bl	8000dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e2:	2360      	movs	r3, #96	; 0x60
 80016e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f2:	463b      	mov	r3, r7
 80016f4:	2200      	movs	r2, #0
 80016f6:	4619      	mov	r1, r3
 80016f8:	4807      	ldr	r0, [pc, #28]	; (8001718 <MX_TIM3_Init+0xe8>)
 80016fa:	f007 f8ab 	bl	8008854 <HAL_TIM_PWM_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001704:	f7ff fb5c 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <MX_TIM3_Init+0xe8>)
 800170a:	f000 f8e5 	bl	80018d8 <HAL_TIM_MspPostInit>

}
 800170e:	bf00      	nop
 8001710:	3738      	adds	r7, #56	; 0x38
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	24000118 	.word	0x24000118
 800171c:	40000400 	.word	0x40000400

08001720 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08e      	sub	sp, #56	; 0x38
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001740:	463b      	mov	r3, r7
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <MX_TIM4_Init+0xe8>)
 8001754:	4a2d      	ldr	r2, [pc, #180]	; (800180c <MX_TIM4_Init+0xec>)
 8001756:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001758:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <MX_TIM4_Init+0xe8>)
 800175a:	2200      	movs	r2, #0
 800175c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <MX_TIM4_Init+0xe8>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 6400 - 1;
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <MX_TIM4_Init+0xe8>)
 8001766:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800176a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <MX_TIM4_Init+0xe8>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <MX_TIM4_Init+0xe8>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001778:	4823      	ldr	r0, [pc, #140]	; (8001808 <MX_TIM4_Init+0xe8>)
 800177a:	f006 fbd7 	bl	8007f2c <HAL_TIM_Base_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001784:	f7ff fb1c 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800178e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001792:	4619      	mov	r1, r3
 8001794:	481c      	ldr	r0, [pc, #112]	; (8001808 <MX_TIM4_Init+0xe8>)
 8001796:	f007 f971 	bl	8008a7c <HAL_TIM_ConfigClockSource>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80017a0:	f7ff fb0e 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017a4:	4818      	ldr	r0, [pc, #96]	; (8001808 <MX_TIM4_Init+0xe8>)
 80017a6:	f006 fc18 	bl	8007fda <HAL_TIM_PWM_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80017b0:	f7ff fb06 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4619      	mov	r1, r3
 80017c2:	4811      	ldr	r0, [pc, #68]	; (8001808 <MX_TIM4_Init+0xe8>)
 80017c4:	f007 feba 	bl	800953c <HAL_TIMEx_MasterConfigSynchronization>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017ce:	f7ff faf7 	bl	8000dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d2:	2360      	movs	r3, #96	; 0x60
 80017d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017e2:	463b      	mov	r3, r7
 80017e4:	220c      	movs	r2, #12
 80017e6:	4619      	mov	r1, r3
 80017e8:	4807      	ldr	r0, [pc, #28]	; (8001808 <MX_TIM4_Init+0xe8>)
 80017ea:	f007 f833 	bl	8008854 <HAL_TIM_PWM_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80017f4:	f7ff fae4 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017f8:	4803      	ldr	r0, [pc, #12]	; (8001808 <MX_TIM4_Init+0xe8>)
 80017fa:	f000 f86d 	bl	80018d8 <HAL_TIM_MspPostInit>

}
 80017fe:	bf00      	nop
 8001800:	3738      	adds	r7, #56	; 0x38
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	24000164 	.word	0x24000164
 800180c:	40000800 	.word	0x40000800

08001810 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001820:	d117      	bne.n	8001852 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_TIM_Base_MspInit+0xbc>)
 8001824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001828:	4a28      	ldr	r2, [pc, #160]	; (80018cc <HAL_TIM_Base_MspInit+0xbc>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <HAL_TIM_Base_MspInit+0xbc>)
 8001834:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	201c      	movs	r0, #28
 8001846:	f001 febe 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800184a:	201c      	movs	r0, #28
 800184c:	f001 fed5 	bl	80035fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001850:	e038      	b.n	80018c4 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1e      	ldr	r2, [pc, #120]	; (80018d0 <HAL_TIM_Base_MspInit+0xc0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d117      	bne.n	800188c <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_TIM_Base_MspInit+0xbc>)
 800185e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001862:	4a1a      	ldr	r2, [pc, #104]	; (80018cc <HAL_TIM_Base_MspInit+0xbc>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_TIM_Base_MspInit+0xbc>)
 800186e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	201d      	movs	r0, #29
 8001880:	f001 fea1 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001884:	201d      	movs	r0, #29
 8001886:	f001 feb8 	bl	80035fa <HAL_NVIC_EnableIRQ>
}
 800188a:	e01b      	b.n	80018c4 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <HAL_TIM_Base_MspInit+0xc4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d116      	bne.n	80018c4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_TIM_Base_MspInit+0xbc>)
 8001898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800189c:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <HAL_TIM_Base_MspInit+0xbc>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_TIM_Base_MspInit+0xbc>)
 80018a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2100      	movs	r1, #0
 80018b8:	201e      	movs	r0, #30
 80018ba:	f001 fe84 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018be:	201e      	movs	r0, #30
 80018c0:	f001 fe9b 	bl	80035fa <HAL_NVIC_EnableIRQ>
}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	58024400 	.word	0x58024400
 80018d0:	40000400 	.word	0x40000400
 80018d4:	40000800 	.word	0x40000800

080018d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f8:	d11f      	bne.n	800193a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <HAL_TIM_MspPostInit+0x100>)
 80018fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001900:	4a35      	ldr	r2, [pc, #212]	; (80019d8 <HAL_TIM_MspPostInit+0x100>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800190a:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <HAL_TIM_MspPostInit+0x100>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = XPulses_Pin;
 8001918:	2308      	movs	r3, #8
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001928:	2301      	movs	r3, #1
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XPulses_GPIO_Port, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	482a      	ldr	r0, [pc, #168]	; (80019dc <HAL_TIM_MspPostInit+0x104>)
 8001934:	f002 fbe0 	bl	80040f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001938:	e049      	b.n	80019ce <HAL_TIM_MspPostInit+0xf6>
  else if(timHandle->Instance==TIM3)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a28      	ldr	r2, [pc, #160]	; (80019e0 <HAL_TIM_MspPostInit+0x108>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d11f      	bne.n	8001984 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001944:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <HAL_TIM_MspPostInit+0x100>)
 8001946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194a:	4a23      	ldr	r2, [pc, #140]	; (80019d8 <HAL_TIM_MspPostInit+0x100>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001954:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_TIM_MspPostInit+0x100>)
 8001956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = YPulses_Pin;
 8001962:	2310      	movs	r3, #16
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001972:	2302      	movs	r3, #2
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(YPulses_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4819      	ldr	r0, [pc, #100]	; (80019e4 <HAL_TIM_MspPostInit+0x10c>)
 800197e:	f002 fbbb 	bl	80040f8 <HAL_GPIO_Init>
}
 8001982:	e024      	b.n	80019ce <HAL_TIM_MspPostInit+0xf6>
  else if(timHandle->Instance==TIM4)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_TIM_MspPostInit+0x110>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d11f      	bne.n	80019ce <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_TIM_MspPostInit+0x100>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001994:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_TIM_MspPostInit+0x100>)
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_TIM_MspPostInit+0x100>)
 80019a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ZPulses_Pin;
 80019ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019be:	2302      	movs	r3, #2
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ZPulses_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4808      	ldr	r0, [pc, #32]	; (80019ec <HAL_TIM_MspPostInit+0x114>)
 80019ca:	f002 fb95 	bl	80040f8 <HAL_GPIO_Init>
}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	58024400 	.word	0x58024400
 80019dc:	58020000 	.word	0x58020000
 80019e0:	40000400 	.word	0x40000400
 80019e4:	58020400 	.word	0x58020400
 80019e8:	40000800 	.word	0x40000800
 80019ec:	58020c00 	.word	0x58020c00

080019f0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019f4:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 80019f6:	4a23      	ldr	r2, [pc, #140]	; (8001a84 <MX_USART3_UART_Init+0x94>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 80019fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a38:	4811      	ldr	r0, [pc, #68]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a3a:	f007 fe2b 	bl	8009694 <HAL_UART_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a44:	f7ff f9bc 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a48:	2100      	movs	r1, #0
 8001a4a:	480d      	ldr	r0, [pc, #52]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a4c:	f009 fa6c 	bl	800af28 <HAL_UARTEx_SetTxFifoThreshold>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a56:	f7ff f9b3 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4808      	ldr	r0, [pc, #32]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a5e:	f009 faa1 	bl	800afa4 <HAL_UARTEx_SetRxFifoThreshold>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a68:	f7ff f9aa 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a6e:	f009 fa22 	bl	800aeb6 <HAL_UARTEx_DisableFifoMode>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a78:	f7ff f9a2 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	240001b0 	.word	0x240001b0
 8001a84:	40004800 	.word	0x40004800

08001a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b0ba      	sub	sp, #232	; 0xe8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	22c0      	movs	r2, #192	; 0xc0
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f009 fb07 	bl	800b0bc <memset>
  if(uartHandle->Instance==USART3)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a2b      	ldr	r2, [pc, #172]	; (8001b60 <HAL_UART_MspInit+0xd8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d14e      	bne.n	8001b56 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ab8:	f04f 0202 	mov.w	r2, #2
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fd2e 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001ada:	f7ff f971 	bl	8000dc0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_UART_MspInit+0xdc>)
 8001ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ae4:	4a1f      	ldr	r2, [pc, #124]	; (8001b64 <HAL_UART_MspInit+0xdc>)
 8001ae6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001aee:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <HAL_UART_MspInit+0xdc>)
 8001af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_UART_MspInit+0xdc>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b02:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <HAL_UART_MspInit+0xdc>)
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_UART_MspInit+0xdc>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b34:	2307      	movs	r3, #7
 8001b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4809      	ldr	r0, [pc, #36]	; (8001b68 <HAL_UART_MspInit+0xe0>)
 8001b42:	f002 fad9 	bl	80040f8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2027      	movs	r0, #39	; 0x27
 8001b4c:	f001 fd3b 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b50:	2027      	movs	r0, #39	; 0x27
 8001b52:	f001 fd52 	bl	80035fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b56:	bf00      	nop
 8001b58:	37e8      	adds	r7, #232	; 0xe8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40004800 	.word	0x40004800
 8001b64:	58024400 	.word	0x58024400
 8001b68:	58020c00 	.word	0x58020c00

08001b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b70:	f7ff fc60 	bl	8001434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b74:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b76:	490d      	ldr	r1, [pc, #52]	; (8001bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b78:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	; (8001bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f009 fa97 	bl	800b0cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9e:	f7fe ff61 	bl	8000a64 <main>
  bx  lr
 8001ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ba4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ba8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bac:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001bb0:	0800b174 	.word	0x0800b174
  ldr r2, =_sbss
 8001bb4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001bb8:	24000248 	.word	0x24000248

08001bbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC3_IRQHandler>
	...

08001bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	f001 fcf2 	bl	80035b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bcc:	f003 fada 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_Init+0x68>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	4913      	ldr	r1, [pc, #76]	; (8001c2c <HAL_Init+0x6c>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
 8001be8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <HAL_Init+0x68>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <HAL_Init+0x6c>)
 8001bf4:	5cd3      	ldrb	r3, [r2, r3]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <HAL_Init+0x70>)
 8001c02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c04:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <HAL_Init+0x74>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f000 f814 	bl	8001c38 <HAL_InitTick>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e002      	b.n	8001c20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1a:	f7ff fb8d 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	0800b12c 	.word	0x0800b12c
 8001c30:	24000004 	.word	0x24000004
 8001c34:	24000000 	.word	0x24000000

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_InitTick+0x60>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e021      	b.n	8001c90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <HAL_InitTick+0x64>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_InitTick+0x60>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 fcd7 	bl	8003616 <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f001 fca1 	bl	80035c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_InitTick+0x68>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	2400000c 	.word	0x2400000c
 8001c9c:	24000000 	.word	0x24000000
 8001ca0:	24000008 	.word	0x24000008

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2400000c 	.word	0x2400000c
 8001cc8:	24000244 	.word	0x24000244

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	24000244 	.word	0x24000244

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d005      	beq.n	8001d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_Delay+0x44>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8f7      	bhi.n	8001d0c <HAL_Delay+0x28>
  {
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2400000c 	.word	0x2400000c

08001d2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_GetREVID+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	0c1b      	lsrs	r3, r3, #16
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	5c001000 	.word	0x5c001000

08001d44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	609a      	str	r2, [r3, #8]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3360      	adds	r3, #96	; 0x60
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001de0:	bf00      	nop
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	611a      	str	r2, [r3, #16]
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b087      	sub	sp, #28
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	3360      	adds	r3, #96	; 0x60
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	601a      	str	r2, [r3, #0]
  }
}
 8001e48:	bf00      	nop
 8001e4a:	371c      	adds	r7, #28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b087      	sub	sp, #28
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3330      	adds	r3, #48	; 0x30
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	4413      	add	r3, r2
 8001e98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	211f      	movs	r1, #31
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	401a      	ands	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	0e9b      	lsrs	r3, r3, #26
 8001eb2:	f003 011f 	and.w	r1, r3, #31
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ec6:	bf00      	nop
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3314      	adds	r3, #20
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	0e5b      	lsrs	r3, r3, #25
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	4413      	add	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	0d1b      	lsrs	r3, r3, #20
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	2107      	movs	r1, #7
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	401a      	ands	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	0d1b      	lsrs	r3, r3, #20
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f42:	bf00      	nop
 8001f44:	371c      	adds	r7, #28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f003 0318 	and.w	r3, r3, #24
 8001f72:	4908      	ldr	r1, [pc, #32]	; (8001f94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f74:	40d9      	lsrs	r1, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	400b      	ands	r3, r1
 8001f7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	000fffff 	.word	0x000fffff

08001f98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6093      	str	r3, [r2, #8]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	5fffffc0 	.word	0x5fffffc0

08001ff4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002008:	d101      	bne.n	800200e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <LL_ADC_EnableInternalRegulator+0x24>)
 800202a:	4013      	ands	r3, r2
 800202c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	6fffffc0 	.word	0x6fffffc0

08002044 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002058:	d101      	bne.n	800205e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <LL_ADC_IsEnabled+0x18>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <LL_ADC_IsEnabled+0x1a>
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d101      	bne.n	80020aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d101      	bne.n	80020d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e18f      	b.n	800241a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7fe fadd 	bl	80006c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff67 	bl	8001ff4 <LL_ADC_IsDeepPowerDownEnabled>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff4d 	bl	8001fd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff82 	bl	8002044 <LL_ADC_IsInternalRegulatorEnabled>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d114      	bne.n	8002170 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ff66 	bl	800201c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002150:	4b87      	ldr	r3, [pc, #540]	; (8002370 <HAL_ADC_Init+0x290>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	099b      	lsrs	r3, r3, #6
 8002156:	4a87      	ldr	r2, [pc, #540]	; (8002374 <HAL_ADC_Init+0x294>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	099b      	lsrs	r3, r3, #6
 800215e:	3301      	adds	r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002162:	e002      	b.n	800216a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	3b01      	subs	r3, #1
 8002168:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f9      	bne.n	8002164 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff65 	bl	8002044 <LL_ADC_IsInternalRegulatorEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10d      	bne.n	800219c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002184:	f043 0210 	orr.w	r2, r3, #16
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff76 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 80021a6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 8129 	bne.w	8002408 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 8125 	bne.w	8002408 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021c6:	f043 0202 	orr.w	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ff4a 	bl	800206c <LL_ADC_IsEnabled>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d136      	bne.n	800224c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a65      	ldr	r2, [pc, #404]	; (8002378 <HAL_ADC_Init+0x298>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d004      	beq.n	80021f2 <HAL_ADC_Init+0x112>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a63      	ldr	r2, [pc, #396]	; (800237c <HAL_ADC_Init+0x29c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d10e      	bne.n	8002210 <HAL_ADC_Init+0x130>
 80021f2:	4861      	ldr	r0, [pc, #388]	; (8002378 <HAL_ADC_Init+0x298>)
 80021f4:	f7ff ff3a 	bl	800206c <LL_ADC_IsEnabled>
 80021f8:	4604      	mov	r4, r0
 80021fa:	4860      	ldr	r0, [pc, #384]	; (800237c <HAL_ADC_Init+0x29c>)
 80021fc:	f7ff ff36 	bl	800206c <LL_ADC_IsEnabled>
 8002200:	4603      	mov	r3, r0
 8002202:	4323      	orrs	r3, r4
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	e008      	b.n	8002222 <HAL_ADC_Init+0x142>
 8002210:	485b      	ldr	r0, [pc, #364]	; (8002380 <HAL_ADC_Init+0x2a0>)
 8002212:	f7ff ff2b 	bl	800206c <LL_ADC_IsEnabled>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	bf0c      	ite	eq
 800221c:	2301      	moveq	r3, #1
 800221e:	2300      	movne	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d012      	beq.n	800224c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a53      	ldr	r2, [pc, #332]	; (8002378 <HAL_ADC_Init+0x298>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d004      	beq.n	800223a <HAL_ADC_Init+0x15a>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a51      	ldr	r2, [pc, #324]	; (800237c <HAL_ADC_Init+0x29c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d101      	bne.n	800223e <HAL_ADC_Init+0x15e>
 800223a:	4a52      	ldr	r2, [pc, #328]	; (8002384 <HAL_ADC_Init+0x2a4>)
 800223c:	e000      	b.n	8002240 <HAL_ADC_Init+0x160>
 800223e:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_ADC_Init+0x2a8>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f7ff fd7c 	bl	8001d44 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800224c:	f7ff fd6e 	bl	8001d2c <HAL_GetREVID>
 8002250:	4603      	mov	r3, r0
 8002252:	f241 0203 	movw	r2, #4099	; 0x1003
 8002256:	4293      	cmp	r3, r2
 8002258:	d914      	bls.n	8002284 <HAL_ADC_Init+0x1a4>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b10      	cmp	r3, #16
 8002260:	d110      	bne.n	8002284 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7d5b      	ldrb	r3, [r3, #21]
 8002266:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800226c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002272:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7f1b      	ldrb	r3, [r3, #28]
 8002278:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800227a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800227c:	f043 030c 	orr.w	r3, r3, #12
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	e00d      	b.n	80022a0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7d5b      	ldrb	r3, [r3, #21]
 8002288:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800228e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002294:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7f1b      	ldrb	r3, [r3, #28]
 800229a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7f1b      	ldrb	r3, [r3, #28]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d106      	bne.n	80022b6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	045b      	lsls	r3, r3, #17
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_ADC_Init+0x2ac>)
 80022da:	4013      	ands	r3, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	69b9      	ldr	r1, [r7, #24]
 80022e2:	430b      	orrs	r3, r1
 80022e4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fed1 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 80022f0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fede 	bl	80020b8 <LL_ADC_INJ_IsConversionOngoing>
 80022fc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d15f      	bne.n	80023c4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d15c      	bne.n	80023c4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7d1b      	ldrb	r3, [r3, #20]
 800230e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_ADC_Init+0x2b0>)
 8002320:	4013      	ands	r3, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	69b9      	ldr	r1, [r7, #24]
 8002328:	430b      	orrs	r3, r1
 800232a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002332:	2b01      	cmp	r3, #1
 8002334:	d130      	bne.n	8002398 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_ADC_Init+0x2b4>)
 8002344:	4013      	ands	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800234a:	3a01      	subs	r2, #1
 800234c:	0411      	lsls	r1, r2, #16
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002352:	4311      	orrs	r1, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002358:	4311      	orrs	r1, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800235e:	430a      	orrs	r2, r1
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	611a      	str	r2, [r3, #16]
 800236c:	e01c      	b.n	80023a8 <HAL_ADC_Init+0x2c8>
 800236e:	bf00      	nop
 8002370:	24000000 	.word	0x24000000
 8002374:	053e2d63 	.word	0x053e2d63
 8002378:	40022000 	.word	0x40022000
 800237c:	40022100 	.word	0x40022100
 8002380:	58026000 	.word	0x58026000
 8002384:	40022300 	.word	0x40022300
 8002388:	58026300 	.word	0x58026300
 800238c:	fff0c003 	.word	0xfff0c003
 8002390:	ffffbffc 	.word	0xffffbffc
 8002394:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fde4 	bl	8002f8c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d10c      	bne.n	80023e6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f023 010f 	bic.w	r1, r3, #15
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	1e5a      	subs	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
 80023e4:	e007      	b.n	80023f6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 020f 	bic.w	r2, r2, #15
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
 8002406:	e007      	b.n	8002418 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	f043 0210 	orr.w	r2, r3, #16
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002418:	7ffb      	ldrb	r3, [r7, #31]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd90      	pop	{r4, r7, pc}
 8002422:	bf00      	nop

08002424 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800242c:	2300      	movs	r3, #0
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a87      	ldr	r2, [pc, #540]	; (8002664 <HAL_ADC_IRQHandler+0x240>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d004      	beq.n	8002454 <HAL_ADC_IRQHandler+0x30>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a86      	ldr	r2, [pc, #536]	; (8002668 <HAL_ADC_IRQHandler+0x244>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d101      	bne.n	8002458 <HAL_ADC_IRQHandler+0x34>
 8002454:	4b85      	ldr	r3, [pc, #532]	; (800266c <HAL_ADC_IRQHandler+0x248>)
 8002456:	e000      	b.n	800245a <HAL_ADC_IRQHandler+0x36>
 8002458:	4b85      	ldr	r3, [pc, #532]	; (8002670 <HAL_ADC_IRQHandler+0x24c>)
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fd9c 	bl	8001f98 <LL_ADC_GetMultimode>
 8002460:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d017      	beq.n	800249c <HAL_ADC_IRQHandler+0x78>
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d012      	beq.n	800249c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fed6 	bl	8003240 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2202      	movs	r2, #2
 800249a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d004      	beq.n	80024b0 <HAL_ADC_IRQHandler+0x8c>
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8083 	beq.w	80025c2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d07d      	beq.n	80025c2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d105      	bne.n	80024de <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fcb6 	bl	8001e54 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d062      	beq.n	80025b4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5d      	ldr	r2, [pc, #372]	; (8002668 <HAL_ADC_IRQHandler+0x244>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d002      	beq.n	80024fe <HAL_ADC_IRQHandler+0xda>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	e000      	b.n	8002500 <HAL_ADC_IRQHandler+0xdc>
 80024fe:	4b59      	ldr	r3, [pc, #356]	; (8002664 <HAL_ADC_IRQHandler+0x240>)
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	4293      	cmp	r3, r2
 8002506:	d008      	beq.n	800251a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b05      	cmp	r3, #5
 8002512:	d002      	beq.n	800251a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b09      	cmp	r3, #9
 8002518:	d104      	bne.n	8002524 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	623b      	str	r3, [r7, #32]
 8002522:	e00c      	b.n	800253e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a4f      	ldr	r2, [pc, #316]	; (8002668 <HAL_ADC_IRQHandler+0x244>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d002      	beq.n	8002534 <HAL_ADC_IRQHandler+0x110>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	e000      	b.n	8002536 <HAL_ADC_IRQHandler+0x112>
 8002534:	4b4b      	ldr	r3, [pc, #300]	; (8002664 <HAL_ADC_IRQHandler+0x240>)
 8002536:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d135      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b08      	cmp	r3, #8
 8002554:	d12e      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fd99 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d11a      	bne.n	800259c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 020c 	bic.w	r2, r2, #12
 8002574:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d112      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
 800259a:	e00b      	b.n	80025b4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f043 0210 	orr.w	r2, r3, #16
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f96f 	bl	8002898 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	220c      	movs	r2, #12
 80025c0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_ADC_IRQHandler+0x1b2>
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10b      	bne.n	80025ee <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80a0 	beq.w	8002722 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 809a 	beq.w	8002722 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fc61 	bl	8001ed2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002610:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fc1c 	bl	8001e54 <LL_ADC_REG_IsTriggerSourceSWStart>
 800261c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a11      	ldr	r2, [pc, #68]	; (8002668 <HAL_ADC_IRQHandler+0x244>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d002      	beq.n	800262e <HAL_ADC_IRQHandler+0x20a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	e000      	b.n	8002630 <HAL_ADC_IRQHandler+0x20c>
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_ADC_IRQHandler+0x240>)
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	4293      	cmp	r3, r2
 8002636:	d008      	beq.n	800264a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b06      	cmp	r3, #6
 8002642:	d002      	beq.n	800264a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b07      	cmp	r3, #7
 8002648:	d104      	bne.n	8002654 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	623b      	str	r3, [r7, #32]
 8002652:	e014      	b.n	800267e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a03      	ldr	r2, [pc, #12]	; (8002668 <HAL_ADC_IRQHandler+0x244>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00a      	beq.n	8002674 <HAL_ADC_IRQHandler+0x250>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	e008      	b.n	8002676 <HAL_ADC_IRQHandler+0x252>
 8002664:	40022000 	.word	0x40022000
 8002668:	40022100 	.word	0x40022100
 800266c:	40022300 	.word	0x40022300
 8002670:	58026300 	.word	0x58026300
 8002674:	4b84      	ldr	r3, [pc, #528]	; (8002888 <HAL_ADC_IRQHandler+0x464>)
 8002676:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d047      	beq.n	8002714 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d007      	beq.n	800269e <HAL_ADC_IRQHandler+0x27a>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d03f      	beq.n	8002714 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800269a:	2b00      	cmp	r3, #0
 800269c:	d13a      	bne.n	8002714 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d133      	bne.n	8002714 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d12e      	bne.n	8002714 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fcfc 	bl	80020b8 <LL_ADC_INJ_IsConversionOngoing>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d11a      	bne.n	80026fc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026d4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d112      	bne.n	8002714 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	f043 0201 	orr.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54
 80026fa:	e00b      	b.n	8002714 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002700:	f043 0210 	orr.w	r2, r3, #16
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 fd6b 	bl	80031f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2260      	movs	r2, #96	; 0x60
 8002720:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b00      	cmp	r3, #0
 800272a:	d011      	beq.n	8002750 <HAL_ADC_IRQHandler+0x32c>
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00c      	beq.n	8002750 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f8b2 	bl	80028ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d012      	beq.n	8002780 <HAL_ADC_IRQHandler+0x35c>
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00d      	beq.n	8002780 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fd51 	bl	8003218 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800277e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002786:	2b00      	cmp	r3, #0
 8002788:	d012      	beq.n	80027b0 <HAL_ADC_IRQHandler+0x38c>
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00d      	beq.n	80027b0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fd43 	bl	800322c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d043      	beq.n	8002842 <HAL_ADC_IRQHandler+0x41e>
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d03e      	beq.n	8002842 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80027cc:	2301      	movs	r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
 80027d0:	e021      	b.n	8002816 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2a      	ldr	r2, [pc, #168]	; (8002888 <HAL_ADC_IRQHandler+0x464>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d004      	beq.n	80027ec <HAL_ADC_IRQHandler+0x3c8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a29      	ldr	r2, [pc, #164]	; (800288c <HAL_ADC_IRQHandler+0x468>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_ADC_IRQHandler+0x3cc>
 80027ec:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_ADC_IRQHandler+0x46c>)
 80027ee:	e000      	b.n	80027f2 <HAL_ADC_IRQHandler+0x3ce>
 80027f0:	4b28      	ldr	r3, [pc, #160]	; (8002894 <HAL_ADC_IRQHandler+0x470>)
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fbde 	bl	8001fb4 <LL_ADC_GetMultiDMATransfer>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80027fe:	2301      	movs	r3, #1
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	e008      	b.n	8002816 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002812:	2301      	movs	r3, #1
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	2b01      	cmp	r3, #1
 800281a:	d10e      	bne.n	800283a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002820:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	f043 0202 	orr.w	r2, r3, #2
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f843 	bl	80028c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2210      	movs	r2, #16
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d018      	beq.n	800287e <HAL_ADC_IRQHandler+0x45a>
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002852:	2b00      	cmp	r3, #0
 8002854:	d013      	beq.n	800287e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	f043 0208 	orr.w	r2, r3, #8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002876:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fcc3 	bl	8003204 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800287e:	bf00      	nop
 8002880:	3728      	adds	r7, #40	; 0x28
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40022000 	.word	0x40022000
 800288c:	40022100 	.word	0x40022100
 8002890:	40022300 	.word	0x40022300
 8002894:	58026300 	.word	0x58026300

08002898 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b0a1      	sub	sp, #132	; 0x84
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a65      	ldr	r2, [pc, #404]	; (8002a84 <HAL_ADC_ConfigChannel+0x1b0>)
 80028ee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x2a>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e32e      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x688>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fbc1 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 8313 	bne.w	8002f3e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db2c      	blt.n	800297a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002928:	2b00      	cmp	r3, #0
 800292a:	d108      	bne.n	800293e <HAL_ADC_ConfigChannel+0x6a>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	0e9b      	lsrs	r3, r3, #26
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	2201      	movs	r2, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	e016      	b.n	800296c <HAL_ADC_ConfigChannel+0x98>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800294c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800294e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002956:	2320      	movs	r3, #32
 8002958:	e003      	b.n	8002962 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800295a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	2201      	movs	r2, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	69d1      	ldr	r1, [r2, #28]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	430b      	orrs	r3, r1
 8002978:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	f7ff fa77 	bl	8001e7a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fb7e 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 8002996:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fb8b 	bl	80020b8 <LL_ADC_INJ_IsConversionOngoing>
 80029a2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 80b8 	bne.w	8002b1c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 80b4 	bne.w	8002b1c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6819      	ldr	r1, [r3, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	461a      	mov	r2, r3
 80029c2:	f7ff fa99 	bl	8001ef8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029c6:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_ADC_ConfigChannel+0x1b4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80029ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d2:	d10b      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x118>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	e01d      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x154>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10b      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x13e>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	e00a      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x154>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	089b      	lsrs	r3, r3, #2
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d02c      	beq.n	8002a8c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6919      	ldr	r1, [r3, #16]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a40:	f7ff f9b4 	bl	8001dac <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6919      	ldr	r1, [r3, #16]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	7e5b      	ldrb	r3, [r3, #25]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d102      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x186>
 8002a54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a58:	e000      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x188>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f7ff f9de 	bl	8001e1e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6919      	ldr	r1, [r3, #16]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	7e1b      	ldrb	r3, [r3, #24]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d102      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x1a4>
 8002a72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a76:	e000      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x1a6>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f7ff f9b6 	bl	8001dec <LL_ADC_SetDataRightShift>
 8002a80:	e04c      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x248>
 8002a82:	bf00      	nop
 8002a84:	47ff0000 	.word	0x47ff0000
 8002a88:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	069b      	lsls	r3, r3, #26
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d107      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aae:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ab6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	069b      	lsls	r3, r3, #26
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ad2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	069b      	lsls	r3, r3, #26
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d107      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002af6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	069b      	lsls	r3, r3, #26
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d107      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b1a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff faa3 	bl	800206c <LL_ADC_IsEnabled>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f040 8211 	bne.w	8002f50 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6819      	ldr	r1, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f7ff fa08 	bl	8001f50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4aa1      	ldr	r2, [pc, #644]	; (8002dcc <HAL_ADC_ConfigChannel+0x4f8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	f040 812e 	bne.w	8002da8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10b      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x2a0>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	3301      	adds	r3, #1
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2b09      	cmp	r3, #9
 8002b6a:	bf94      	ite	ls
 8002b6c:	2301      	movls	r3, #1
 8002b6e:	2300      	movhi	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	e019      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x2d4>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	e003      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	2b09      	cmp	r3, #9
 8002ba0:	bf94      	ite	ls
 8002ba2:	2301      	movls	r3, #1
 8002ba4:	2300      	movhi	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d079      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d107      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x2f4>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	069b      	lsls	r3, r3, #26
 8002bc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bc6:	e015      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x320>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e003      	b.n	8002bec <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	069b      	lsls	r3, r3, #26
 8002bf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x340>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	0e9b      	lsrs	r3, r3, #26
 8002c06:	3301      	adds	r3, #1
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	e017      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x370>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c24:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	e003      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2101      	movs	r1, #1
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	ea42 0103 	orr.w	r1, r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x396>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	0e9b      	lsrs	r3, r3, #26
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	051b      	lsls	r3, r3, #20
 8002c68:	e018      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x3c8>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002c82:	2320      	movs	r3, #32
 8002c84:	e003      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	e07e      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x3e8>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	069b      	lsls	r3, r3, #26
 8002cb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cba:	e015      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x414>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	e003      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	069b      	lsls	r3, r3, #26
 8002ce4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x434>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0e9b      	lsrs	r3, r3, #26
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	2101      	movs	r1, #1
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	e017      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x464>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	61bb      	str	r3, [r7, #24]
  return result;
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002d20:	2320      	movs	r3, #32
 8002d22:	e003      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	2101      	movs	r1, #1
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	ea42 0103 	orr.w	r1, r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10d      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x490>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	0e9b      	lsrs	r3, r3, #26
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f003 021f 	and.w	r2, r3, #31
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	3b1e      	subs	r3, #30
 8002d5c:	051b      	lsls	r3, r3, #20
 8002d5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d62:	e01b      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x4c8>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	60fb      	str	r3, [r7, #12]
  return result;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	e003      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f003 021f 	and.w	r2, r3, #31
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	3b1e      	subs	r3, #30
 8002d96:	051b      	lsls	r3, r3, #20
 8002d98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	6892      	ldr	r2, [r2, #8]
 8002da2:	4619      	mov	r1, r3
 8002da4:	f7ff f8a8 	bl	8001ef8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f280 80cf 	bge.w	8002f50 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a06      	ldr	r2, [pc, #24]	; (8002dd0 <HAL_ADC_ConfigChannel+0x4fc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_ADC_ConfigChannel+0x4f2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <HAL_ADC_ConfigChannel+0x500>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10a      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x508>
 8002dc6:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <HAL_ADC_ConfigChannel+0x504>)
 8002dc8:	e009      	b.n	8002dde <HAL_ADC_ConfigChannel+0x50a>
 8002dca:	bf00      	nop
 8002dcc:	47ff0000 	.word	0x47ff0000
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40022100 	.word	0x40022100
 8002dd8:	40022300 	.word	0x40022300
 8002ddc:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <HAL_ADC_ConfigChannel+0x690>)
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe ffd6 	bl	8001d90 <LL_ADC_GetCommonPathInternalCh>
 8002de4:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a5f      	ldr	r2, [pc, #380]	; (8002f68 <HAL_ADC_ConfigChannel+0x694>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_ADC_ConfigChannel+0x526>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a5d      	ldr	r2, [pc, #372]	; (8002f6c <HAL_ADC_ConfigChannel+0x698>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d10e      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x544>
 8002dfa:	485b      	ldr	r0, [pc, #364]	; (8002f68 <HAL_ADC_ConfigChannel+0x694>)
 8002dfc:	f7ff f936 	bl	800206c <LL_ADC_IsEnabled>
 8002e00:	4604      	mov	r4, r0
 8002e02:	485a      	ldr	r0, [pc, #360]	; (8002f6c <HAL_ADC_ConfigChannel+0x698>)
 8002e04:	f7ff f932 	bl	800206c <LL_ADC_IsEnabled>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4323      	orrs	r3, r4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e008      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x556>
 8002e18:	4855      	ldr	r0, [pc, #340]	; (8002f70 <HAL_ADC_ConfigChannel+0x69c>)
 8002e1a:	f7ff f927 	bl	800206c <LL_ADC_IsEnabled>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d07d      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a50      	ldr	r2, [pc, #320]	; (8002f74 <HAL_ADC_ConfigChannel+0x6a0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d130      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x5c6>
 8002e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d12b      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a4a      	ldr	r2, [pc, #296]	; (8002f70 <HAL_ADC_ConfigChannel+0x69c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	f040 8081 	bne.w	8002f50 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a45      	ldr	r2, [pc, #276]	; (8002f68 <HAL_ADC_ConfigChannel+0x694>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_ADC_ConfigChannel+0x58e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a43      	ldr	r2, [pc, #268]	; (8002f6c <HAL_ADC_ConfigChannel+0x698>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d101      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x592>
 8002e62:	4a45      	ldr	r2, [pc, #276]	; (8002f78 <HAL_ADC_ConfigChannel+0x6a4>)
 8002e64:	e000      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x594>
 8002e66:	4a3f      	ldr	r2, [pc, #252]	; (8002f64 <HAL_ADC_ConfigChannel+0x690>)
 8002e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f7fe ff7a 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e76:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <HAL_ADC_ConfigChannel+0x6a8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	4a40      	ldr	r2, [pc, #256]	; (8002f80 <HAL_ADC_ConfigChannel+0x6ac>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	099b      	lsrs	r3, r3, #6
 8002e84:	3301      	adds	r3, #1
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e8a:	e002      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f9      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e98:	e05a      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a39      	ldr	r2, [pc, #228]	; (8002f84 <HAL_ADC_ConfigChannel+0x6b0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d11e      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x60e>
 8002ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d119      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a2f      	ldr	r2, [pc, #188]	; (8002f70 <HAL_ADC_ConfigChannel+0x69c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d14b      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a2a      	ldr	r2, [pc, #168]	; (8002f68 <HAL_ADC_ConfigChannel+0x694>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_ADC_ConfigChannel+0x5f8>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a29      	ldr	r2, [pc, #164]	; (8002f6c <HAL_ADC_ConfigChannel+0x698>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x5fc>
 8002ecc:	4a2a      	ldr	r2, [pc, #168]	; (8002f78 <HAL_ADC_ConfigChannel+0x6a4>)
 8002ece:	e000      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x5fe>
 8002ed0:	4a24      	ldr	r2, [pc, #144]	; (8002f64 <HAL_ADC_ConfigChannel+0x690>)
 8002ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f7fe ff45 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ee0:	e036      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a28      	ldr	r2, [pc, #160]	; (8002f88 <HAL_ADC_ConfigChannel+0x6b4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d131      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x67c>
 8002eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d12c      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <HAL_ADC_ConfigChannel+0x69c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d127      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <HAL_ADC_ConfigChannel+0x694>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_ADC_ConfigChannel+0x640>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <HAL_ADC_ConfigChannel+0x698>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x644>
 8002f14:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <HAL_ADC_ConfigChannel+0x6a4>)
 8002f16:	e000      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x646>
 8002f18:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <HAL_ADC_ConfigChannel+0x690>)
 8002f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f20:	4619      	mov	r1, r3
 8002f22:	4610      	mov	r0, r2
 8002f24:	f7fe ff21 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
 8002f28:	e012      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f3c:	e008      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	f043 0220 	orr.w	r2, r3, #32
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f58:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3784      	adds	r7, #132	; 0x84
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd90      	pop	{r4, r7, pc}
 8002f64:	58026300 	.word	0x58026300
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	40022100 	.word	0x40022100
 8002f70:	58026000 	.word	0x58026000
 8002f74:	cb840000 	.word	0xcb840000
 8002f78:	40022300 	.word	0x40022300
 8002f7c:	24000000 	.word	0x24000000
 8002f80:	053e2d63 	.word	0x053e2d63
 8002f84:	c7520000 	.word	0xc7520000
 8002f88:	cfb80000 	.word	0xcfb80000

08002f8c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a7a      	ldr	r2, [pc, #488]	; (8003184 <ADC_ConfigureBoostMode+0x1f8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <ADC_ConfigureBoostMode+0x1c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a79      	ldr	r2, [pc, #484]	; (8003188 <ADC_ConfigureBoostMode+0x1fc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d109      	bne.n	8002fbc <ADC_ConfigureBoostMode+0x30>
 8002fa8:	4b78      	ldr	r3, [pc, #480]	; (800318c <ADC_ConfigureBoostMode+0x200>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf14      	ite	ne
 8002fb4:	2301      	movne	r3, #1
 8002fb6:	2300      	moveq	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e008      	b.n	8002fce <ADC_ConfigureBoostMode+0x42>
 8002fbc:	4b74      	ldr	r3, [pc, #464]	; (8003190 <ADC_ConfigureBoostMode+0x204>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d01c      	beq.n	800300c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002fd2:	f002 fa51 	bl	8005478 <HAL_RCC_GetHCLKFreq>
 8002fd6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fe0:	d010      	beq.n	8003004 <ADC_ConfigureBoostMode+0x78>
 8002fe2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fe6:	d873      	bhi.n	80030d0 <ADC_ConfigureBoostMode+0x144>
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fec:	d002      	beq.n	8002ff4 <ADC_ConfigureBoostMode+0x68>
 8002fee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ff2:	d16d      	bne.n	80030d0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	60fb      	str	r3, [r7, #12]
        break;
 8003002:	e068      	b.n	80030d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	60fb      	str	r3, [r7, #12]
        break;
 800300a:	e064      	b.n	80030d6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800300c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003010:	f04f 0100 	mov.w	r1, #0
 8003014:	f003 fc96 	bl	8006944 <HAL_RCCEx_GetPeriphCLKFreq>
 8003018:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003022:	d051      	beq.n	80030c8 <ADC_ConfigureBoostMode+0x13c>
 8003024:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003028:	d854      	bhi.n	80030d4 <ADC_ConfigureBoostMode+0x148>
 800302a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800302e:	d047      	beq.n	80030c0 <ADC_ConfigureBoostMode+0x134>
 8003030:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003034:	d84e      	bhi.n	80030d4 <ADC_ConfigureBoostMode+0x148>
 8003036:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800303a:	d03d      	beq.n	80030b8 <ADC_ConfigureBoostMode+0x12c>
 800303c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003040:	d848      	bhi.n	80030d4 <ADC_ConfigureBoostMode+0x148>
 8003042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003046:	d033      	beq.n	80030b0 <ADC_ConfigureBoostMode+0x124>
 8003048:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800304c:	d842      	bhi.n	80030d4 <ADC_ConfigureBoostMode+0x148>
 800304e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003052:	d029      	beq.n	80030a8 <ADC_ConfigureBoostMode+0x11c>
 8003054:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003058:	d83c      	bhi.n	80030d4 <ADC_ConfigureBoostMode+0x148>
 800305a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800305e:	d01a      	beq.n	8003096 <ADC_ConfigureBoostMode+0x10a>
 8003060:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003064:	d836      	bhi.n	80030d4 <ADC_ConfigureBoostMode+0x148>
 8003066:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800306a:	d014      	beq.n	8003096 <ADC_ConfigureBoostMode+0x10a>
 800306c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003070:	d830      	bhi.n	80030d4 <ADC_ConfigureBoostMode+0x148>
 8003072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003076:	d00e      	beq.n	8003096 <ADC_ConfigureBoostMode+0x10a>
 8003078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800307c:	d82a      	bhi.n	80030d4 <ADC_ConfigureBoostMode+0x148>
 800307e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003082:	d008      	beq.n	8003096 <ADC_ConfigureBoostMode+0x10a>
 8003084:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003088:	d824      	bhi.n	80030d4 <ADC_ConfigureBoostMode+0x148>
 800308a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800308e:	d002      	beq.n	8003096 <ADC_ConfigureBoostMode+0x10a>
 8003090:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003094:	d11e      	bne.n	80030d4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	0c9b      	lsrs	r3, r3, #18
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	60fb      	str	r3, [r7, #12]
        break;
 80030a6:	e016      	b.n	80030d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	60fb      	str	r3, [r7, #12]
        break;
 80030ae:	e012      	b.n	80030d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	60fb      	str	r3, [r7, #12]
        break;
 80030b6:	e00e      	b.n	80030d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	099b      	lsrs	r3, r3, #6
 80030bc:	60fb      	str	r3, [r7, #12]
        break;
 80030be:	e00a      	b.n	80030d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	09db      	lsrs	r3, r3, #7
 80030c4:	60fb      	str	r3, [r7, #12]
        break;
 80030c6:	e006      	b.n	80030d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	60fb      	str	r3, [r7, #12]
        break;
 80030ce:	e002      	b.n	80030d6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80030d4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80030d6:	f7fe fe29 	bl	8001d2c <HAL_GetREVID>
 80030da:	4603      	mov	r3, r0
 80030dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d815      	bhi.n	8003110 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4a2b      	ldr	r2, [pc, #172]	; (8003194 <ADC_ConfigureBoostMode+0x208>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d908      	bls.n	80030fe <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030fa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80030fc:	e03e      	b.n	800317c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800310c:	609a      	str	r2, [r3, #8]
}
 800310e:	e035      	b.n	800317c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	085b      	lsrs	r3, r3, #1
 8003114:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4a1f      	ldr	r2, [pc, #124]	; (8003198 <ADC_ConfigureBoostMode+0x20c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d808      	bhi.n	8003130 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800312c:	609a      	str	r2, [r3, #8]
}
 800312e:	e025      	b.n	800317c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4a1a      	ldr	r2, [pc, #104]	; (800319c <ADC_ConfigureBoostMode+0x210>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d80a      	bhi.n	800314e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800314a:	609a      	str	r2, [r3, #8]
}
 800314c:	e016      	b.n	800317c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4a13      	ldr	r2, [pc, #76]	; (80031a0 <ADC_ConfigureBoostMode+0x214>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d80a      	bhi.n	800316c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003168:	609a      	str	r2, [r3, #8]
}
 800316a:	e007      	b.n	800317c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800317a:	609a      	str	r2, [r3, #8]
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40022000 	.word	0x40022000
 8003188:	40022100 	.word	0x40022100
 800318c:	40022300 	.word	0x40022300
 8003190:	58026300 	.word	0x58026300
 8003194:	01312d00 	.word	0x01312d00
 8003198:	005f5e10 	.word	0x005f5e10
 800319c:	00bebc20 	.word	0x00bebc20
 80031a0:	017d7840 	.word	0x017d7840

080031a4 <LL_ADC_IsEnabled>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <LL_ADC_IsEnabled+0x18>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <LL_ADC_IsEnabled+0x1a>
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <LL_ADC_REG_IsConversionOngoing>:
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d101      	bne.n	80031e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b09f      	sub	sp, #124	; 0x7c
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800326e:	2302      	movs	r3, #2
 8003270:	e0be      	b.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800327e:	2300      	movs	r3, #0
 8003280:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a5c      	ldr	r2, [pc, #368]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d102      	bne.n	8003292 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800328c:	4b5b      	ldr	r3, [pc, #364]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	e001      	b.n	8003296 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003292:	2300      	movs	r3, #0
 8003294:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e09d      	b.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff87 	bl	80031ca <LL_ADC_REG_IsConversionOngoing>
 80032bc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ff81 	bl	80031ca <LL_ADC_REG_IsConversionOngoing>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d17f      	bne.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d17c      	bne.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a47      	ldr	r2, [pc, #284]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a46      	ldr	r2, [pc, #280]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d101      	bne.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80032e8:	4b45      	ldr	r3, [pc, #276]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80032ea:	e000      	b.n	80032ee <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80032ec:	4b45      	ldr	r3, [pc, #276]	; (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80032ee:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d039      	beq.n	800336c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80032f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	431a      	orrs	r2, r3
 8003306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003308:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a3a      	ldr	r2, [pc, #232]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a38      	ldr	r2, [pc, #224]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10e      	bne.n	800333c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800331e:	4836      	ldr	r0, [pc, #216]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003320:	f7ff ff40 	bl	80031a4 <LL_ADC_IsEnabled>
 8003324:	4604      	mov	r4, r0
 8003326:	4835      	ldr	r0, [pc, #212]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003328:	f7ff ff3c 	bl	80031a4 <LL_ADC_IsEnabled>
 800332c:	4603      	mov	r3, r0
 800332e:	4323      	orrs	r3, r4
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf0c      	ite	eq
 8003334:	2301      	moveq	r3, #1
 8003336:	2300      	movne	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	e008      	b.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800333c:	4832      	ldr	r0, [pc, #200]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800333e:	f7ff ff31 	bl	80031a4 <LL_ADC_IsEnabled>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d047      	beq.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	4b2d      	ldr	r3, [pc, #180]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003358:	4013      	ands	r3, r2
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	6811      	ldr	r1, [r2, #0]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	6892      	ldr	r2, [r2, #8]
 8003362:	430a      	orrs	r2, r1
 8003364:	431a      	orrs	r2, r3
 8003366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003368:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800336a:	e03a      	b.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800336c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003376:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1d      	ldr	r2, [pc, #116]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d10e      	bne.n	80033aa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800338c:	481a      	ldr	r0, [pc, #104]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800338e:	f7ff ff09 	bl	80031a4 <LL_ADC_IsEnabled>
 8003392:	4604      	mov	r4, r0
 8003394:	4819      	ldr	r0, [pc, #100]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003396:	f7ff ff05 	bl	80031a4 <LL_ADC_IsEnabled>
 800339a:	4603      	mov	r3, r0
 800339c:	4323      	orrs	r3, r4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bf0c      	ite	eq
 80033a2:	2301      	moveq	r3, #1
 80033a4:	2300      	movne	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	e008      	b.n	80033bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80033aa:	4817      	ldr	r0, [pc, #92]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80033ac:	f7ff fefa 	bl	80031a4 <LL_ADC_IsEnabled>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d010      	beq.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	4b11      	ldr	r3, [pc, #68]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033ca:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033cc:	e009      	b.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	f043 0220 	orr.w	r2, r3, #32
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80033e0:	e000      	b.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033e2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033ec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	377c      	adds	r7, #124	; 0x7c
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd90      	pop	{r4, r7, pc}
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40022100 	.word	0x40022100
 8003400:	40022300 	.word	0x40022300
 8003404:	58026300 	.word	0x58026300
 8003408:	58026000 	.word	0x58026000
 800340c:	fffff0e0 	.word	0xfffff0e0

08003410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <__NVIC_SetPriorityGrouping+0x40>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800342c:	4013      	ands	r3, r2
 800342e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <__NVIC_SetPriorityGrouping+0x44>)
 800343a:	4313      	orrs	r3, r2
 800343c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800343e:	4a04      	ldr	r2, [pc, #16]	; (8003450 <__NVIC_SetPriorityGrouping+0x40>)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	60d3      	str	r3, [r2, #12]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000ed00 	.word	0xe000ed00
 8003454:	05fa0000 	.word	0x05fa0000

08003458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <__NVIC_GetPriorityGrouping+0x18>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	0a1b      	lsrs	r3, r3, #8
 8003462:	f003 0307 	and.w	r3, r3, #7
}
 8003466:	4618      	mov	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800347e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003482:	2b00      	cmp	r3, #0
 8003484:	db0b      	blt.n	800349e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	f003 021f 	and.w	r2, r3, #31
 800348c:	4907      	ldr	r1, [pc, #28]	; (80034ac <__NVIC_EnableIRQ+0x38>)
 800348e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2001      	movs	r0, #1
 8003496:	fa00 f202 	lsl.w	r2, r0, r2
 800349a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	e000e100 	.word	0xe000e100

080034b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	6039      	str	r1, [r7, #0]
 80034ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	db0a      	blt.n	80034da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	490c      	ldr	r1, [pc, #48]	; (80034fc <__NVIC_SetPriority+0x4c>)
 80034ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ce:	0112      	lsls	r2, r2, #4
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	440b      	add	r3, r1
 80034d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034d8:	e00a      	b.n	80034f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	4908      	ldr	r1, [pc, #32]	; (8003500 <__NVIC_SetPriority+0x50>)
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	3b04      	subs	r3, #4
 80034e8:	0112      	lsls	r2, r2, #4
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	440b      	add	r3, r1
 80034ee:	761a      	strb	r2, [r3, #24]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000e100 	.word	0xe000e100
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f1c3 0307 	rsb	r3, r3, #7
 800351e:	2b04      	cmp	r3, #4
 8003520:	bf28      	it	cs
 8003522:	2304      	movcs	r3, #4
 8003524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3304      	adds	r3, #4
 800352a:	2b06      	cmp	r3, #6
 800352c:	d902      	bls.n	8003534 <NVIC_EncodePriority+0x30>
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3b03      	subs	r3, #3
 8003532:	e000      	b.n	8003536 <NVIC_EncodePriority+0x32>
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	f04f 32ff 	mov.w	r2, #4294967295
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	401a      	ands	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800354c:	f04f 31ff 	mov.w	r1, #4294967295
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fa01 f303 	lsl.w	r3, r1, r3
 8003556:	43d9      	mvns	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	4313      	orrs	r3, r2
         );
}
 800355e:	4618      	mov	r0, r3
 8003560:	3724      	adds	r7, #36	; 0x24
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800357c:	d301      	bcc.n	8003582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800357e:	2301      	movs	r3, #1
 8003580:	e00f      	b.n	80035a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <SysTick_Config+0x40>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800358a:	210f      	movs	r1, #15
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	f7ff ff8e 	bl	80034b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <SysTick_Config+0x40>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800359a:	4b04      	ldr	r3, [pc, #16]	; (80035ac <SysTick_Config+0x40>)
 800359c:	2207      	movs	r2, #7
 800359e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	e000e010 	.word	0xe000e010

080035b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff29 	bl	8003410 <__NVIC_SetPriorityGrouping>
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4603      	mov	r3, r0
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035d4:	f7ff ff40 	bl	8003458 <__NVIC_GetPriorityGrouping>
 80035d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	6978      	ldr	r0, [r7, #20]
 80035e0:	f7ff ff90 	bl	8003504 <NVIC_EncodePriority>
 80035e4:	4602      	mov	r2, r0
 80035e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035ea:	4611      	mov	r1, r2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff ff5f 	bl	80034b0 <__NVIC_SetPriority>
}
 80035f2:	bf00      	nop
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	4603      	mov	r3, r0
 8003602:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff ff33 	bl	8003474 <__NVIC_EnableIRQ>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ffa4 	bl	800356c <SysTick_Config>
 8003624:	4603      	mov	r3, r0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003638:	f7fe fb48 	bl	8001ccc <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e2dc      	b.n	8003c02 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d008      	beq.n	8003666 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e2cd      	b.n	8003c02 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a76      	ldr	r2, [pc, #472]	; (8003844 <HAL_DMA_Abort+0x214>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d04a      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a74      	ldr	r2, [pc, #464]	; (8003848 <HAL_DMA_Abort+0x218>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d045      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a73      	ldr	r2, [pc, #460]	; (800384c <HAL_DMA_Abort+0x21c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d040      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a71      	ldr	r2, [pc, #452]	; (8003850 <HAL_DMA_Abort+0x220>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d03b      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a70      	ldr	r2, [pc, #448]	; (8003854 <HAL_DMA_Abort+0x224>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d036      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a6e      	ldr	r2, [pc, #440]	; (8003858 <HAL_DMA_Abort+0x228>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d031      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6d      	ldr	r2, [pc, #436]	; (800385c <HAL_DMA_Abort+0x22c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d02c      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a6b      	ldr	r2, [pc, #428]	; (8003860 <HAL_DMA_Abort+0x230>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d027      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a6a      	ldr	r2, [pc, #424]	; (8003864 <HAL_DMA_Abort+0x234>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d022      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a68      	ldr	r2, [pc, #416]	; (8003868 <HAL_DMA_Abort+0x238>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d01d      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a67      	ldr	r2, [pc, #412]	; (800386c <HAL_DMA_Abort+0x23c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d018      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a65      	ldr	r2, [pc, #404]	; (8003870 <HAL_DMA_Abort+0x240>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a64      	ldr	r2, [pc, #400]	; (8003874 <HAL_DMA_Abort+0x244>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00e      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a62      	ldr	r2, [pc, #392]	; (8003878 <HAL_DMA_Abort+0x248>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d009      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a61      	ldr	r2, [pc, #388]	; (800387c <HAL_DMA_Abort+0x24c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <HAL_DMA_Abort+0xd6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a5f      	ldr	r2, [pc, #380]	; (8003880 <HAL_DMA_Abort+0x250>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d101      	bne.n	800370a <HAL_DMA_Abort+0xda>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_DMA_Abort+0xdc>
 800370a:	2300      	movs	r3, #0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d013      	beq.n	8003738 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 021e 	bic.w	r2, r2, #30
 800371e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800372e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e00a      	b.n	800374e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 020e 	bic.w	r2, r2, #14
 8003746:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <HAL_DMA_Abort+0x214>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d072      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a3a      	ldr	r2, [pc, #232]	; (8003848 <HAL_DMA_Abort+0x218>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d06d      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a39      	ldr	r2, [pc, #228]	; (800384c <HAL_DMA_Abort+0x21c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d068      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a37      	ldr	r2, [pc, #220]	; (8003850 <HAL_DMA_Abort+0x220>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d063      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a36      	ldr	r2, [pc, #216]	; (8003854 <HAL_DMA_Abort+0x224>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d05e      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a34      	ldr	r2, [pc, #208]	; (8003858 <HAL_DMA_Abort+0x228>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d059      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a33      	ldr	r2, [pc, #204]	; (800385c <HAL_DMA_Abort+0x22c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d054      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a31      	ldr	r2, [pc, #196]	; (8003860 <HAL_DMA_Abort+0x230>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d04f      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a30      	ldr	r2, [pc, #192]	; (8003864 <HAL_DMA_Abort+0x234>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d04a      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a2e      	ldr	r2, [pc, #184]	; (8003868 <HAL_DMA_Abort+0x238>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d045      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a2d      	ldr	r2, [pc, #180]	; (800386c <HAL_DMA_Abort+0x23c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d040      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a2b      	ldr	r2, [pc, #172]	; (8003870 <HAL_DMA_Abort+0x240>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d03b      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a2a      	ldr	r2, [pc, #168]	; (8003874 <HAL_DMA_Abort+0x244>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d036      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a28      	ldr	r2, [pc, #160]	; (8003878 <HAL_DMA_Abort+0x248>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d031      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a27      	ldr	r2, [pc, #156]	; (800387c <HAL_DMA_Abort+0x24c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d02c      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a25      	ldr	r2, [pc, #148]	; (8003880 <HAL_DMA_Abort+0x250>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d027      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a24      	ldr	r2, [pc, #144]	; (8003884 <HAL_DMA_Abort+0x254>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d022      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a22      	ldr	r2, [pc, #136]	; (8003888 <HAL_DMA_Abort+0x258>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d01d      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a21      	ldr	r2, [pc, #132]	; (800388c <HAL_DMA_Abort+0x25c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d018      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1f      	ldr	r2, [pc, #124]	; (8003890 <HAL_DMA_Abort+0x260>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d013      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <HAL_DMA_Abort+0x264>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00e      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1c      	ldr	r2, [pc, #112]	; (8003898 <HAL_DMA_Abort+0x268>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d009      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1b      	ldr	r2, [pc, #108]	; (800389c <HAL_DMA_Abort+0x26c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d004      	beq.n	800383e <HAL_DMA_Abort+0x20e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <HAL_DMA_Abort+0x270>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d132      	bne.n	80038a4 <HAL_DMA_Abort+0x274>
 800383e:	2301      	movs	r3, #1
 8003840:	e031      	b.n	80038a6 <HAL_DMA_Abort+0x276>
 8003842:	bf00      	nop
 8003844:	40020010 	.word	0x40020010
 8003848:	40020028 	.word	0x40020028
 800384c:	40020040 	.word	0x40020040
 8003850:	40020058 	.word	0x40020058
 8003854:	40020070 	.word	0x40020070
 8003858:	40020088 	.word	0x40020088
 800385c:	400200a0 	.word	0x400200a0
 8003860:	400200b8 	.word	0x400200b8
 8003864:	40020410 	.word	0x40020410
 8003868:	40020428 	.word	0x40020428
 800386c:	40020440 	.word	0x40020440
 8003870:	40020458 	.word	0x40020458
 8003874:	40020470 	.word	0x40020470
 8003878:	40020488 	.word	0x40020488
 800387c:	400204a0 	.word	0x400204a0
 8003880:	400204b8 	.word	0x400204b8
 8003884:	58025408 	.word	0x58025408
 8003888:	5802541c 	.word	0x5802541c
 800388c:	58025430 	.word	0x58025430
 8003890:	58025444 	.word	0x58025444
 8003894:	58025458 	.word	0x58025458
 8003898:	5802546c 	.word	0x5802546c
 800389c:	58025480 	.word	0x58025480
 80038a0:	58025494 	.word	0x58025494
 80038a4:	2300      	movs	r3, #0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a6d      	ldr	r2, [pc, #436]	; (8003a74 <HAL_DMA_Abort+0x444>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d04a      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6b      	ldr	r2, [pc, #428]	; (8003a78 <HAL_DMA_Abort+0x448>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d045      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a6a      	ldr	r2, [pc, #424]	; (8003a7c <HAL_DMA_Abort+0x44c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d040      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a68      	ldr	r2, [pc, #416]	; (8003a80 <HAL_DMA_Abort+0x450>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d03b      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a67      	ldr	r2, [pc, #412]	; (8003a84 <HAL_DMA_Abort+0x454>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d036      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a65      	ldr	r2, [pc, #404]	; (8003a88 <HAL_DMA_Abort+0x458>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d031      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a64      	ldr	r2, [pc, #400]	; (8003a8c <HAL_DMA_Abort+0x45c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d02c      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a62      	ldr	r2, [pc, #392]	; (8003a90 <HAL_DMA_Abort+0x460>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d027      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a61      	ldr	r2, [pc, #388]	; (8003a94 <HAL_DMA_Abort+0x464>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d022      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a5f      	ldr	r2, [pc, #380]	; (8003a98 <HAL_DMA_Abort+0x468>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01d      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5e      	ldr	r2, [pc, #376]	; (8003a9c <HAL_DMA_Abort+0x46c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d018      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a5c      	ldr	r2, [pc, #368]	; (8003aa0 <HAL_DMA_Abort+0x470>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a5b      	ldr	r2, [pc, #364]	; (8003aa4 <HAL_DMA_Abort+0x474>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00e      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a59      	ldr	r2, [pc, #356]	; (8003aa8 <HAL_DMA_Abort+0x478>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d009      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a58      	ldr	r2, [pc, #352]	; (8003aac <HAL_DMA_Abort+0x47c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d004      	beq.n	800395a <HAL_DMA_Abort+0x32a>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a56      	ldr	r2, [pc, #344]	; (8003ab0 <HAL_DMA_Abort+0x480>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d108      	bne.n	800396c <HAL_DMA_Abort+0x33c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0201 	bic.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e007      	b.n	800397c <HAL_DMA_Abort+0x34c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800397c:	e013      	b.n	80039a6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800397e:	f7fe f9a5 	bl	8001ccc <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b05      	cmp	r3, #5
 800398a:	d90c      	bls.n	80039a6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2203      	movs	r2, #3
 8003996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e12d      	b.n	8003c02 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e5      	bne.n	800397e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2f      	ldr	r2, [pc, #188]	; (8003a74 <HAL_DMA_Abort+0x444>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d04a      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a2d      	ldr	r2, [pc, #180]	; (8003a78 <HAL_DMA_Abort+0x448>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d045      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2c      	ldr	r2, [pc, #176]	; (8003a7c <HAL_DMA_Abort+0x44c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d040      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <HAL_DMA_Abort+0x450>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d03b      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <HAL_DMA_Abort+0x454>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d036      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <HAL_DMA_Abort+0x458>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d031      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a26      	ldr	r2, [pc, #152]	; (8003a8c <HAL_DMA_Abort+0x45c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d02c      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a24      	ldr	r2, [pc, #144]	; (8003a90 <HAL_DMA_Abort+0x460>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d027      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a23      	ldr	r2, [pc, #140]	; (8003a94 <HAL_DMA_Abort+0x464>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d022      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a21      	ldr	r2, [pc, #132]	; (8003a98 <HAL_DMA_Abort+0x468>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01d      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a20      	ldr	r2, [pc, #128]	; (8003a9c <HAL_DMA_Abort+0x46c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1e      	ldr	r2, [pc, #120]	; (8003aa0 <HAL_DMA_Abort+0x470>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <HAL_DMA_Abort+0x474>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1b      	ldr	r2, [pc, #108]	; (8003aa8 <HAL_DMA_Abort+0x478>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1a      	ldr	r2, [pc, #104]	; (8003aac <HAL_DMA_Abort+0x47c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_DMA_Abort+0x422>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <HAL_DMA_Abort+0x480>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d101      	bne.n	8003a56 <HAL_DMA_Abort+0x426>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_DMA_Abort+0x428>
 8003a56:	2300      	movs	r3, #0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d02b      	beq.n	8003ab4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	223f      	movs	r2, #63	; 0x3f
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	609a      	str	r2, [r3, #8]
 8003a72:	e02a      	b.n	8003aca <HAL_DMA_Abort+0x49a>
 8003a74:	40020010 	.word	0x40020010
 8003a78:	40020028 	.word	0x40020028
 8003a7c:	40020040 	.word	0x40020040
 8003a80:	40020058 	.word	0x40020058
 8003a84:	40020070 	.word	0x40020070
 8003a88:	40020088 	.word	0x40020088
 8003a8c:	400200a0 	.word	0x400200a0
 8003a90:	400200b8 	.word	0x400200b8
 8003a94:	40020410 	.word	0x40020410
 8003a98:	40020428 	.word	0x40020428
 8003a9c:	40020440 	.word	0x40020440
 8003aa0:	40020458 	.word	0x40020458
 8003aa4:	40020470 	.word	0x40020470
 8003aa8:	40020488 	.word	0x40020488
 8003aac:	400204a0 	.word	0x400204a0
 8003ab0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a4f      	ldr	r2, [pc, #316]	; (8003c0c <HAL_DMA_Abort+0x5dc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d072      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a4d      	ldr	r2, [pc, #308]	; (8003c10 <HAL_DMA_Abort+0x5e0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d06d      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a4c      	ldr	r2, [pc, #304]	; (8003c14 <HAL_DMA_Abort+0x5e4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d068      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a4a      	ldr	r2, [pc, #296]	; (8003c18 <HAL_DMA_Abort+0x5e8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d063      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a49      	ldr	r2, [pc, #292]	; (8003c1c <HAL_DMA_Abort+0x5ec>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d05e      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a47      	ldr	r2, [pc, #284]	; (8003c20 <HAL_DMA_Abort+0x5f0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d059      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a46      	ldr	r2, [pc, #280]	; (8003c24 <HAL_DMA_Abort+0x5f4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d054      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a44      	ldr	r2, [pc, #272]	; (8003c28 <HAL_DMA_Abort+0x5f8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d04f      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a43      	ldr	r2, [pc, #268]	; (8003c2c <HAL_DMA_Abort+0x5fc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d04a      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a41      	ldr	r2, [pc, #260]	; (8003c30 <HAL_DMA_Abort+0x600>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d045      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a40      	ldr	r2, [pc, #256]	; (8003c34 <HAL_DMA_Abort+0x604>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d040      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a3e      	ldr	r2, [pc, #248]	; (8003c38 <HAL_DMA_Abort+0x608>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d03b      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a3d      	ldr	r2, [pc, #244]	; (8003c3c <HAL_DMA_Abort+0x60c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d036      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a3b      	ldr	r2, [pc, #236]	; (8003c40 <HAL_DMA_Abort+0x610>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d031      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a3a      	ldr	r2, [pc, #232]	; (8003c44 <HAL_DMA_Abort+0x614>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d02c      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a38      	ldr	r2, [pc, #224]	; (8003c48 <HAL_DMA_Abort+0x618>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d027      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a37      	ldr	r2, [pc, #220]	; (8003c4c <HAL_DMA_Abort+0x61c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d022      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a35      	ldr	r2, [pc, #212]	; (8003c50 <HAL_DMA_Abort+0x620>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d01d      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a34      	ldr	r2, [pc, #208]	; (8003c54 <HAL_DMA_Abort+0x624>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d018      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a32      	ldr	r2, [pc, #200]	; (8003c58 <HAL_DMA_Abort+0x628>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d013      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a31      	ldr	r2, [pc, #196]	; (8003c5c <HAL_DMA_Abort+0x62c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d00e      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2f      	ldr	r2, [pc, #188]	; (8003c60 <HAL_DMA_Abort+0x630>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d009      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a2e      	ldr	r2, [pc, #184]	; (8003c64 <HAL_DMA_Abort+0x634>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d004      	beq.n	8003bba <HAL_DMA_Abort+0x58a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <HAL_DMA_Abort+0x638>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <HAL_DMA_Abort+0x58e>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_DMA_Abort+0x590>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d015      	beq.n	8003bf0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003bcc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00c      	beq.n	8003bf0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003be4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003bee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40020010 	.word	0x40020010
 8003c10:	40020028 	.word	0x40020028
 8003c14:	40020040 	.word	0x40020040
 8003c18:	40020058 	.word	0x40020058
 8003c1c:	40020070 	.word	0x40020070
 8003c20:	40020088 	.word	0x40020088
 8003c24:	400200a0 	.word	0x400200a0
 8003c28:	400200b8 	.word	0x400200b8
 8003c2c:	40020410 	.word	0x40020410
 8003c30:	40020428 	.word	0x40020428
 8003c34:	40020440 	.word	0x40020440
 8003c38:	40020458 	.word	0x40020458
 8003c3c:	40020470 	.word	0x40020470
 8003c40:	40020488 	.word	0x40020488
 8003c44:	400204a0 	.word	0x400204a0
 8003c48:	400204b8 	.word	0x400204b8
 8003c4c:	58025408 	.word	0x58025408
 8003c50:	5802541c 	.word	0x5802541c
 8003c54:	58025430 	.word	0x58025430
 8003c58:	58025444 	.word	0x58025444
 8003c5c:	58025458 	.word	0x58025458
 8003c60:	5802546c 	.word	0x5802546c
 8003c64:	58025480 	.word	0x58025480
 8003c68:	58025494 	.word	0x58025494

08003c6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e237      	b.n	80040ee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d004      	beq.n	8003c94 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2280      	movs	r2, #128	; 0x80
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e22c      	b.n	80040ee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a5c      	ldr	r2, [pc, #368]	; (8003e0c <HAL_DMA_Abort_IT+0x1a0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d04a      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a5b      	ldr	r2, [pc, #364]	; (8003e10 <HAL_DMA_Abort_IT+0x1a4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d045      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a59      	ldr	r2, [pc, #356]	; (8003e14 <HAL_DMA_Abort_IT+0x1a8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d040      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a58      	ldr	r2, [pc, #352]	; (8003e18 <HAL_DMA_Abort_IT+0x1ac>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d03b      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a56      	ldr	r2, [pc, #344]	; (8003e1c <HAL_DMA_Abort_IT+0x1b0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d036      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a55      	ldr	r2, [pc, #340]	; (8003e20 <HAL_DMA_Abort_IT+0x1b4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d031      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a53      	ldr	r2, [pc, #332]	; (8003e24 <HAL_DMA_Abort_IT+0x1b8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d02c      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a52      	ldr	r2, [pc, #328]	; (8003e28 <HAL_DMA_Abort_IT+0x1bc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d027      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a50      	ldr	r2, [pc, #320]	; (8003e2c <HAL_DMA_Abort_IT+0x1c0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d022      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a4f      	ldr	r2, [pc, #316]	; (8003e30 <HAL_DMA_Abort_IT+0x1c4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d01d      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a4d      	ldr	r2, [pc, #308]	; (8003e34 <HAL_DMA_Abort_IT+0x1c8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d018      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a4c      	ldr	r2, [pc, #304]	; (8003e38 <HAL_DMA_Abort_IT+0x1cc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a4a      	ldr	r2, [pc, #296]	; (8003e3c <HAL_DMA_Abort_IT+0x1d0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a49      	ldr	r2, [pc, #292]	; (8003e40 <HAL_DMA_Abort_IT+0x1d4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a47      	ldr	r2, [pc, #284]	; (8003e44 <HAL_DMA_Abort_IT+0x1d8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xc8>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a46      	ldr	r2, [pc, #280]	; (8003e48 <HAL_DMA_Abort_IT+0x1dc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d101      	bne.n	8003d38 <HAL_DMA_Abort_IT+0xcc>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <HAL_DMA_Abort_IT+0xce>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8086 	beq.w	8003e4c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2204      	movs	r2, #4
 8003d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2f      	ldr	r2, [pc, #188]	; (8003e0c <HAL_DMA_Abort_IT+0x1a0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d04a      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2e      	ldr	r2, [pc, #184]	; (8003e10 <HAL_DMA_Abort_IT+0x1a4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d045      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2c      	ldr	r2, [pc, #176]	; (8003e14 <HAL_DMA_Abort_IT+0x1a8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d040      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a2b      	ldr	r2, [pc, #172]	; (8003e18 <HAL_DMA_Abort_IT+0x1ac>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d03b      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a29      	ldr	r2, [pc, #164]	; (8003e1c <HAL_DMA_Abort_IT+0x1b0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d036      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a28      	ldr	r2, [pc, #160]	; (8003e20 <HAL_DMA_Abort_IT+0x1b4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d031      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a26      	ldr	r2, [pc, #152]	; (8003e24 <HAL_DMA_Abort_IT+0x1b8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d02c      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a25      	ldr	r2, [pc, #148]	; (8003e28 <HAL_DMA_Abort_IT+0x1bc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d027      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a23      	ldr	r2, [pc, #140]	; (8003e2c <HAL_DMA_Abort_IT+0x1c0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d022      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a22      	ldr	r2, [pc, #136]	; (8003e30 <HAL_DMA_Abort_IT+0x1c4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d01d      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a20      	ldr	r2, [pc, #128]	; (8003e34 <HAL_DMA_Abort_IT+0x1c8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d018      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <HAL_DMA_Abort_IT+0x1cc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d013      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <HAL_DMA_Abort_IT+0x1d0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00e      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <HAL_DMA_Abort_IT+0x1d4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1a      	ldr	r2, [pc, #104]	; (8003e44 <HAL_DMA_Abort_IT+0x1d8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x17c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a19      	ldr	r2, [pc, #100]	; (8003e48 <HAL_DMA_Abort_IT+0x1dc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d108      	bne.n	8003dfa <HAL_DMA_Abort_IT+0x18e>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e178      	b.n	80040ec <HAL_DMA_Abort_IT+0x480>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0201 	bic.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e16f      	b.n	80040ec <HAL_DMA_Abort_IT+0x480>
 8003e0c:	40020010 	.word	0x40020010
 8003e10:	40020028 	.word	0x40020028
 8003e14:	40020040 	.word	0x40020040
 8003e18:	40020058 	.word	0x40020058
 8003e1c:	40020070 	.word	0x40020070
 8003e20:	40020088 	.word	0x40020088
 8003e24:	400200a0 	.word	0x400200a0
 8003e28:	400200b8 	.word	0x400200b8
 8003e2c:	40020410 	.word	0x40020410
 8003e30:	40020428 	.word	0x40020428
 8003e34:	40020440 	.word	0x40020440
 8003e38:	40020458 	.word	0x40020458
 8003e3c:	40020470 	.word	0x40020470
 8003e40:	40020488 	.word	0x40020488
 8003e44:	400204a0 	.word	0x400204a0
 8003e48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 020e 	bic.w	r2, r2, #14
 8003e5a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a6c      	ldr	r2, [pc, #432]	; (8004014 <HAL_DMA_Abort_IT+0x3a8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d04a      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a6b      	ldr	r2, [pc, #428]	; (8004018 <HAL_DMA_Abort_IT+0x3ac>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d045      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a69      	ldr	r2, [pc, #420]	; (800401c <HAL_DMA_Abort_IT+0x3b0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d040      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a68      	ldr	r2, [pc, #416]	; (8004020 <HAL_DMA_Abort_IT+0x3b4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d03b      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a66      	ldr	r2, [pc, #408]	; (8004024 <HAL_DMA_Abort_IT+0x3b8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d036      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a65      	ldr	r2, [pc, #404]	; (8004028 <HAL_DMA_Abort_IT+0x3bc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d031      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a63      	ldr	r2, [pc, #396]	; (800402c <HAL_DMA_Abort_IT+0x3c0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d02c      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a62      	ldr	r2, [pc, #392]	; (8004030 <HAL_DMA_Abort_IT+0x3c4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d027      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a60      	ldr	r2, [pc, #384]	; (8004034 <HAL_DMA_Abort_IT+0x3c8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d022      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a5f      	ldr	r2, [pc, #380]	; (8004038 <HAL_DMA_Abort_IT+0x3cc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d01d      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a5d      	ldr	r2, [pc, #372]	; (800403c <HAL_DMA_Abort_IT+0x3d0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d018      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a5c      	ldr	r2, [pc, #368]	; (8004040 <HAL_DMA_Abort_IT+0x3d4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a5a      	ldr	r2, [pc, #360]	; (8004044 <HAL_DMA_Abort_IT+0x3d8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00e      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a59      	ldr	r2, [pc, #356]	; (8004048 <HAL_DMA_Abort_IT+0x3dc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a57      	ldr	r2, [pc, #348]	; (800404c <HAL_DMA_Abort_IT+0x3e0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_DMA_Abort_IT+0x290>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a56      	ldr	r2, [pc, #344]	; (8004050 <HAL_DMA_Abort_IT+0x3e4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d108      	bne.n	8003f0e <HAL_DMA_Abort_IT+0x2a2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e007      	b.n	8003f1e <HAL_DMA_Abort_IT+0x2b2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0201 	bic.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a3c      	ldr	r2, [pc, #240]	; (8004014 <HAL_DMA_Abort_IT+0x3a8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d072      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a3a      	ldr	r2, [pc, #232]	; (8004018 <HAL_DMA_Abort_IT+0x3ac>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d06d      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a39      	ldr	r2, [pc, #228]	; (800401c <HAL_DMA_Abort_IT+0x3b0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d068      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a37      	ldr	r2, [pc, #220]	; (8004020 <HAL_DMA_Abort_IT+0x3b4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d063      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a36      	ldr	r2, [pc, #216]	; (8004024 <HAL_DMA_Abort_IT+0x3b8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d05e      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a34      	ldr	r2, [pc, #208]	; (8004028 <HAL_DMA_Abort_IT+0x3bc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d059      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a33      	ldr	r2, [pc, #204]	; (800402c <HAL_DMA_Abort_IT+0x3c0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d054      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a31      	ldr	r2, [pc, #196]	; (8004030 <HAL_DMA_Abort_IT+0x3c4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d04f      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a30      	ldr	r2, [pc, #192]	; (8004034 <HAL_DMA_Abort_IT+0x3c8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d04a      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a2e      	ldr	r2, [pc, #184]	; (8004038 <HAL_DMA_Abort_IT+0x3cc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d045      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a2d      	ldr	r2, [pc, #180]	; (800403c <HAL_DMA_Abort_IT+0x3d0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d040      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a2b      	ldr	r2, [pc, #172]	; (8004040 <HAL_DMA_Abort_IT+0x3d4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d03b      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <HAL_DMA_Abort_IT+0x3d8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d036      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a28      	ldr	r2, [pc, #160]	; (8004048 <HAL_DMA_Abort_IT+0x3dc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d031      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a27      	ldr	r2, [pc, #156]	; (800404c <HAL_DMA_Abort_IT+0x3e0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d02c      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a25      	ldr	r2, [pc, #148]	; (8004050 <HAL_DMA_Abort_IT+0x3e4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d027      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a24      	ldr	r2, [pc, #144]	; (8004054 <HAL_DMA_Abort_IT+0x3e8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d022      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a22      	ldr	r2, [pc, #136]	; (8004058 <HAL_DMA_Abort_IT+0x3ec>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01d      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a21      	ldr	r2, [pc, #132]	; (800405c <HAL_DMA_Abort_IT+0x3f0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d018      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <HAL_DMA_Abort_IT+0x3f4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1e      	ldr	r2, [pc, #120]	; (8004064 <HAL_DMA_Abort_IT+0x3f8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <HAL_DMA_Abort_IT+0x3fc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d009      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1b      	ldr	r2, [pc, #108]	; (800406c <HAL_DMA_Abort_IT+0x400>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_DMA_Abort_IT+0x3a2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a19      	ldr	r2, [pc, #100]	; (8004070 <HAL_DMA_Abort_IT+0x404>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d132      	bne.n	8004074 <HAL_DMA_Abort_IT+0x408>
 800400e:	2301      	movs	r3, #1
 8004010:	e031      	b.n	8004076 <HAL_DMA_Abort_IT+0x40a>
 8004012:	bf00      	nop
 8004014:	40020010 	.word	0x40020010
 8004018:	40020028 	.word	0x40020028
 800401c:	40020040 	.word	0x40020040
 8004020:	40020058 	.word	0x40020058
 8004024:	40020070 	.word	0x40020070
 8004028:	40020088 	.word	0x40020088
 800402c:	400200a0 	.word	0x400200a0
 8004030:	400200b8 	.word	0x400200b8
 8004034:	40020410 	.word	0x40020410
 8004038:	40020428 	.word	0x40020428
 800403c:	40020440 	.word	0x40020440
 8004040:	40020458 	.word	0x40020458
 8004044:	40020470 	.word	0x40020470
 8004048:	40020488 	.word	0x40020488
 800404c:	400204a0 	.word	0x400204a0
 8004050:	400204b8 	.word	0x400204b8
 8004054:	58025408 	.word	0x58025408
 8004058:	5802541c 	.word	0x5802541c
 800405c:	58025430 	.word	0x58025430
 8004060:	58025444 	.word	0x58025444
 8004064:	58025458 	.word	0x58025458
 8004068:	5802546c 	.word	0x5802546c
 800406c:	58025480 	.word	0x58025480
 8004070:	58025494 	.word	0x58025494
 8004074:	2300      	movs	r3, #0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d028      	beq.n	80040cc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004088:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2201      	movs	r2, #1
 800409a:	409a      	lsls	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop

080040f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b089      	sub	sp, #36	; 0x24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004106:	4b89      	ldr	r3, [pc, #548]	; (800432c <HAL_GPIO_Init+0x234>)
 8004108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800410a:	e194      	b.n	8004436 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	2101      	movs	r1, #1
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	fa01 f303 	lsl.w	r3, r1, r3
 8004118:	4013      	ands	r3, r2
 800411a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8186 	beq.w	8004430 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	2b01      	cmp	r3, #1
 800412e:	d005      	beq.n	800413c <HAL_GPIO_Init+0x44>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d130      	bne.n	800419e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2203      	movs	r2, #3
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4313      	orrs	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004172:	2201      	movs	r2, #1
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	f003 0201 	and.w	r2, r3, #1
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4313      	orrs	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	d017      	beq.n	80041da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	2203      	movs	r2, #3
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d123      	bne.n	800422e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	08da      	lsrs	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3208      	adds	r2, #8
 80041ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	220f      	movs	r2, #15
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4013      	ands	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	08da      	lsrs	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3208      	adds	r2, #8
 8004228:	69b9      	ldr	r1, [r7, #24]
 800422a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	2203      	movs	r2, #3
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43db      	mvns	r3, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4013      	ands	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 0203 	and.w	r2, r3, #3
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80e0 	beq.w	8004430 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004270:	4b2f      	ldr	r3, [pc, #188]	; (8004330 <HAL_GPIO_Init+0x238>)
 8004272:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004276:	4a2e      	ldr	r2, [pc, #184]	; (8004330 <HAL_GPIO_Init+0x238>)
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004280:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <HAL_GPIO_Init+0x238>)
 8004282:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800428e:	4a29      	ldr	r2, [pc, #164]	; (8004334 <HAL_GPIO_Init+0x23c>)
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	089b      	lsrs	r3, r3, #2
 8004294:	3302      	adds	r3, #2
 8004296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	220f      	movs	r2, #15
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4013      	ands	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a20      	ldr	r2, [pc, #128]	; (8004338 <HAL_GPIO_Init+0x240>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d052      	beq.n	8004360 <HAL_GPIO_Init+0x268>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1f      	ldr	r2, [pc, #124]	; (800433c <HAL_GPIO_Init+0x244>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d031      	beq.n	8004326 <HAL_GPIO_Init+0x22e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <HAL_GPIO_Init+0x248>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d02b      	beq.n	8004322 <HAL_GPIO_Init+0x22a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <HAL_GPIO_Init+0x24c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d025      	beq.n	800431e <HAL_GPIO_Init+0x226>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <HAL_GPIO_Init+0x250>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01f      	beq.n	800431a <HAL_GPIO_Init+0x222>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HAL_GPIO_Init+0x254>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d019      	beq.n	8004316 <HAL_GPIO_Init+0x21e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a1a      	ldr	r2, [pc, #104]	; (8004350 <HAL_GPIO_Init+0x258>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <HAL_GPIO_Init+0x21a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a19      	ldr	r2, [pc, #100]	; (8004354 <HAL_GPIO_Init+0x25c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00d      	beq.n	800430e <HAL_GPIO_Init+0x216>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_GPIO_Init+0x260>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d007      	beq.n	800430a <HAL_GPIO_Init+0x212>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a17      	ldr	r2, [pc, #92]	; (800435c <HAL_GPIO_Init+0x264>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d101      	bne.n	8004306 <HAL_GPIO_Init+0x20e>
 8004302:	2309      	movs	r3, #9
 8004304:	e02d      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 8004306:	230a      	movs	r3, #10
 8004308:	e02b      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 800430a:	2308      	movs	r3, #8
 800430c:	e029      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 800430e:	2307      	movs	r3, #7
 8004310:	e027      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 8004312:	2306      	movs	r3, #6
 8004314:	e025      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 8004316:	2305      	movs	r3, #5
 8004318:	e023      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 800431a:	2304      	movs	r3, #4
 800431c:	e021      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 800431e:	2303      	movs	r3, #3
 8004320:	e01f      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 8004322:	2302      	movs	r3, #2
 8004324:	e01d      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 8004326:	2301      	movs	r3, #1
 8004328:	e01b      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 800432a:	bf00      	nop
 800432c:	58000080 	.word	0x58000080
 8004330:	58024400 	.word	0x58024400
 8004334:	58000400 	.word	0x58000400
 8004338:	58020000 	.word	0x58020000
 800433c:	58020400 	.word	0x58020400
 8004340:	58020800 	.word	0x58020800
 8004344:	58020c00 	.word	0x58020c00
 8004348:	58021000 	.word	0x58021000
 800434c:	58021400 	.word	0x58021400
 8004350:	58021800 	.word	0x58021800
 8004354:	58021c00 	.word	0x58021c00
 8004358:	58022000 	.word	0x58022000
 800435c:	58022400 	.word	0x58022400
 8004360:	2300      	movs	r3, #0
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	f002 0203 	and.w	r2, r2, #3
 8004368:	0092      	lsls	r2, r2, #2
 800436a:	4093      	lsls	r3, r2
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004372:	4938      	ldr	r1, [pc, #224]	; (8004454 <HAL_GPIO_Init+0x35c>)
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	089b      	lsrs	r3, r3, #2
 8004378:	3302      	adds	r3, #2
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	43db      	mvns	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4013      	ands	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80043d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	43db      	mvns	r3, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	3301      	adds	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	f47f ae63 	bne.w	800410c <HAL_GPIO_Init+0x14>
  }
}
 8004446:	bf00      	nop
 8004448:	bf00      	nop
 800444a:	3724      	adds	r7, #36	; 0x24
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	58000400 	.word	0x58000400

08004458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	887b      	ldrh	r3, [r7, #2]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
 8004474:	e001      	b.n	800447a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004476:	2300      	movs	r3, #0
 8004478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800447a:	7bfb      	ldrb	r3, [r7, #15]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	807b      	strh	r3, [r7, #2]
 8004494:	4613      	mov	r3, r2
 8004496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004498:	787b      	ldrb	r3, [r7, #1]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800449e:	887a      	ldrh	r2, [r7, #2]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80044a4:	e003      	b.n	80044ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044a6:	887b      	ldrh	r3, [r7, #2]
 80044a8:	041a      	lsls	r2, r3, #16
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	619a      	str	r2, [r3, #24]
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	4603      	mov	r3, r0
 80044c2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80044c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fc fa93 	bl	8000a0c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80044e6:	bf00      	nop
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80044f8:	4b19      	ldr	r3, [pc, #100]	; (8004560 <HAL_PWREx_ConfigSupply+0x70>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b04      	cmp	r3, #4
 8004502:	d00a      	beq.n	800451a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004504:	4b16      	ldr	r3, [pc, #88]	; (8004560 <HAL_PWREx_ConfigSupply+0x70>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	429a      	cmp	r2, r3
 8004510:	d001      	beq.n	8004516 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e01f      	b.n	8004556 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	e01d      	b.n	8004556 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800451a:	4b11      	ldr	r3, [pc, #68]	; (8004560 <HAL_PWREx_ConfigSupply+0x70>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f023 0207 	bic.w	r2, r3, #7
 8004522:	490f      	ldr	r1, [pc, #60]	; (8004560 <HAL_PWREx_ConfigSupply+0x70>)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4313      	orrs	r3, r2
 8004528:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800452a:	f7fd fbcf 	bl	8001ccc <HAL_GetTick>
 800452e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004530:	e009      	b.n	8004546 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004532:	f7fd fbcb 	bl	8001ccc <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004540:	d901      	bls.n	8004546 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e007      	b.n	8004556 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_PWREx_ConfigSupply+0x70>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800454e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004552:	d1ee      	bne.n	8004532 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	58024800 	.word	0x58024800

08004564 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08c      	sub	sp, #48	; 0x30
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	f000 bc48 	b.w	8004e08 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8088 	beq.w	8004696 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004586:	4b99      	ldr	r3, [pc, #612]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004590:	4b96      	ldr	r3, [pc, #600]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004598:	2b10      	cmp	r3, #16
 800459a:	d007      	beq.n	80045ac <HAL_RCC_OscConfig+0x48>
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	2b18      	cmp	r3, #24
 80045a0:	d111      	bne.n	80045c6 <HAL_RCC_OscConfig+0x62>
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d10c      	bne.n	80045c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ac:	4b8f      	ldr	r3, [pc, #572]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d06d      	beq.n	8004694 <HAL_RCC_OscConfig+0x130>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d169      	bne.n	8004694 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	f000 bc21 	b.w	8004e08 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ce:	d106      	bne.n	80045de <HAL_RCC_OscConfig+0x7a>
 80045d0:	4b86      	ldr	r3, [pc, #536]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a85      	ldr	r2, [pc, #532]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80045d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	e02e      	b.n	800463c <HAL_RCC_OscConfig+0xd8>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10c      	bne.n	8004600 <HAL_RCC_OscConfig+0x9c>
 80045e6:	4b81      	ldr	r3, [pc, #516]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a80      	ldr	r2, [pc, #512]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80045ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	4b7e      	ldr	r3, [pc, #504]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a7d      	ldr	r2, [pc, #500]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80045f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	e01d      	b.n	800463c <HAL_RCC_OscConfig+0xd8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004608:	d10c      	bne.n	8004624 <HAL_RCC_OscConfig+0xc0>
 800460a:	4b78      	ldr	r3, [pc, #480]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a77      	ldr	r2, [pc, #476]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	4b75      	ldr	r3, [pc, #468]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a74      	ldr	r2, [pc, #464]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e00b      	b.n	800463c <HAL_RCC_OscConfig+0xd8>
 8004624:	4b71      	ldr	r3, [pc, #452]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a70      	ldr	r2, [pc, #448]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 800462a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	4b6e      	ldr	r3, [pc, #440]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a6d      	ldr	r2, [pc, #436]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800463a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d013      	beq.n	800466c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fd fb42 	bl	8001ccc <HAL_GetTick>
 8004648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800464c:	f7fd fb3e 	bl	8001ccc <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	; 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e3d4      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800465e:	4b63      	ldr	r3, [pc, #396]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0xe8>
 800466a:	e014      	b.n	8004696 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fd fb2e 	bl	8001ccc <HAL_GetTick>
 8004670:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004674:	f7fd fb2a 	bl	8001ccc <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b64      	cmp	r3, #100	; 0x64
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e3c0      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004686:	4b59      	ldr	r3, [pc, #356]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x110>
 8004692:	e000      	b.n	8004696 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80ca 	beq.w	8004838 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046a4:	4b51      	ldr	r3, [pc, #324]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046ae:	4b4f      	ldr	r3, [pc, #316]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d007      	beq.n	80046ca <HAL_RCC_OscConfig+0x166>
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	2b18      	cmp	r3, #24
 80046be:	d156      	bne.n	800476e <HAL_RCC_OscConfig+0x20a>
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d151      	bne.n	800476e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ca:	4b48      	ldr	r3, [pc, #288]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_RCC_OscConfig+0x17e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e392      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046e2:	4b42      	ldr	r3, [pc, #264]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 0219 	bic.w	r2, r3, #25
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	493f      	ldr	r1, [pc, #252]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fd faea 	bl	8001ccc <HAL_GetTick>
 80046f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046fc:	f7fd fae6 	bl	8001ccc <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e37c      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800470e:	4b37      	ldr	r3, [pc, #220]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471a:	f7fd fb07 	bl	8001d2c <HAL_GetREVID>
 800471e:	4603      	mov	r3, r0
 8004720:	f241 0203 	movw	r2, #4099	; 0x1003
 8004724:	4293      	cmp	r3, r2
 8004726:	d817      	bhi.n	8004758 <HAL_RCC_OscConfig+0x1f4>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b40      	cmp	r3, #64	; 0x40
 800472e:	d108      	bne.n	8004742 <HAL_RCC_OscConfig+0x1de>
 8004730:	4b2e      	ldr	r3, [pc, #184]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004738:	4a2c      	ldr	r2, [pc, #176]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 800473a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800473e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004740:	e07a      	b.n	8004838 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004742:	4b2a      	ldr	r3, [pc, #168]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	031b      	lsls	r3, r3, #12
 8004750:	4926      	ldr	r1, [pc, #152]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004752:	4313      	orrs	r3, r2
 8004754:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004756:	e06f      	b.n	8004838 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004758:	4b24      	ldr	r3, [pc, #144]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	4921      	ldr	r1, [pc, #132]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800476c:	e064      	b.n	8004838 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d047      	beq.n	8004806 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004776:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 0219 	bic.w	r2, r3, #25
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	491a      	ldr	r1, [pc, #104]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 8004784:	4313      	orrs	r3, r2
 8004786:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fd faa0 	bl	8001ccc <HAL_GetTick>
 800478c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004790:	f7fd fa9c 	bl	8001ccc <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e332      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047a2:	4b12      	ldr	r3, [pc, #72]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ae:	f7fd fabd 	bl	8001d2c <HAL_GetREVID>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d819      	bhi.n	80047f0 <HAL_RCC_OscConfig+0x28c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	d108      	bne.n	80047d6 <HAL_RCC_OscConfig+0x272>
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80047cc:	4a07      	ldr	r2, [pc, #28]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80047ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d2:	6053      	str	r3, [r2, #4]
 80047d4:	e030      	b.n	8004838 <HAL_RCC_OscConfig+0x2d4>
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	031b      	lsls	r3, r3, #12
 80047e4:	4901      	ldr	r1, [pc, #4]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	604b      	str	r3, [r1, #4]
 80047ea:	e025      	b.n	8004838 <HAL_RCC_OscConfig+0x2d4>
 80047ec:	58024400 	.word	0x58024400
 80047f0:	4b9a      	ldr	r3, [pc, #616]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	061b      	lsls	r3, r3, #24
 80047fe:	4997      	ldr	r1, [pc, #604]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 8004800:	4313      	orrs	r3, r2
 8004802:	604b      	str	r3, [r1, #4]
 8004804:	e018      	b.n	8004838 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004806:	4b95      	ldr	r3, [pc, #596]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a94      	ldr	r2, [pc, #592]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fd fa5b 	bl	8001ccc <HAL_GetTick>
 8004816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800481a:	f7fd fa57 	bl	8001ccc <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e2ed      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800482c:	4b8b      	ldr	r3, [pc, #556]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f0      	bne.n	800481a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80a9 	beq.w	8004998 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004846:	4b85      	ldr	r3, [pc, #532]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800484e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004850:	4b82      	ldr	r3, [pc, #520]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d007      	beq.n	800486c <HAL_RCC_OscConfig+0x308>
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2b18      	cmp	r3, #24
 8004860:	d13a      	bne.n	80048d8 <HAL_RCC_OscConfig+0x374>
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	2b01      	cmp	r3, #1
 800486a:	d135      	bne.n	80048d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800486c:	4b7b      	ldr	r3, [pc, #492]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_OscConfig+0x320>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	2b80      	cmp	r3, #128	; 0x80
 800487e:	d001      	beq.n	8004884 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e2c1      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004884:	f7fd fa52 	bl	8001d2c <HAL_GetREVID>
 8004888:	4603      	mov	r3, r0
 800488a:	f241 0203 	movw	r2, #4099	; 0x1003
 800488e:	4293      	cmp	r3, r2
 8004890:	d817      	bhi.n	80048c2 <HAL_RCC_OscConfig+0x35e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	2b20      	cmp	r3, #32
 8004898:	d108      	bne.n	80048ac <HAL_RCC_OscConfig+0x348>
 800489a:	4b70      	ldr	r3, [pc, #448]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80048a2:	4a6e      	ldr	r2, [pc, #440]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 80048a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048a8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048aa:	e075      	b.n	8004998 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048ac:	4b6b      	ldr	r3, [pc, #428]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	069b      	lsls	r3, r3, #26
 80048ba:	4968      	ldr	r1, [pc, #416]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048c0:	e06a      	b.n	8004998 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048c2:	4b66      	ldr	r3, [pc, #408]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	061b      	lsls	r3, r3, #24
 80048d0:	4962      	ldr	r1, [pc, #392]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048d6:	e05f      	b.n	8004998 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d042      	beq.n	8004966 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80048e0:	4b5e      	ldr	r3, [pc, #376]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a5d      	ldr	r2, [pc, #372]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 80048e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fd f9ee 	bl	8001ccc <HAL_GetTick>
 80048f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048f4:	f7fd f9ea 	bl	8001ccc <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e280      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004906:	4b55      	ldr	r3, [pc, #340]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004912:	f7fd fa0b 	bl	8001d2c <HAL_GetREVID>
 8004916:	4603      	mov	r3, r0
 8004918:	f241 0203 	movw	r2, #4099	; 0x1003
 800491c:	4293      	cmp	r3, r2
 800491e:	d817      	bhi.n	8004950 <HAL_RCC_OscConfig+0x3ec>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	2b20      	cmp	r3, #32
 8004926:	d108      	bne.n	800493a <HAL_RCC_OscConfig+0x3d6>
 8004928:	4b4c      	ldr	r3, [pc, #304]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004930:	4a4a      	ldr	r2, [pc, #296]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 8004932:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004936:	6053      	str	r3, [r2, #4]
 8004938:	e02e      	b.n	8004998 <HAL_RCC_OscConfig+0x434>
 800493a:	4b48      	ldr	r3, [pc, #288]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	069b      	lsls	r3, r3, #26
 8004948:	4944      	ldr	r1, [pc, #272]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 800494a:	4313      	orrs	r3, r2
 800494c:	604b      	str	r3, [r1, #4]
 800494e:	e023      	b.n	8004998 <HAL_RCC_OscConfig+0x434>
 8004950:	4b42      	ldr	r3, [pc, #264]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	061b      	lsls	r3, r3, #24
 800495e:	493f      	ldr	r1, [pc, #252]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 8004960:	4313      	orrs	r3, r2
 8004962:	60cb      	str	r3, [r1, #12]
 8004964:	e018      	b.n	8004998 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004966:	4b3d      	ldr	r3, [pc, #244]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a3c      	ldr	r2, [pc, #240]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 800496c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004972:	f7fd f9ab 	bl	8001ccc <HAL_GetTick>
 8004976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800497a:	f7fd f9a7 	bl	8001ccc <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e23d      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800498c:	4b33      	ldr	r3, [pc, #204]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f0      	bne.n	800497a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d036      	beq.n	8004a12 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d019      	beq.n	80049e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ac:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 80049ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b0:	4a2a      	ldr	r2, [pc, #168]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fd f988 	bl	8001ccc <HAL_GetTick>
 80049bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c0:	f7fd f984 	bl	8001ccc <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e21a      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049d2:	4b22      	ldr	r3, [pc, #136]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 80049d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f0      	beq.n	80049c0 <HAL_RCC_OscConfig+0x45c>
 80049de:	e018      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e0:	4b1e      	ldr	r3, [pc, #120]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 80049e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e4:	4a1d      	ldr	r2, [pc, #116]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 80049e6:	f023 0301 	bic.w	r3, r3, #1
 80049ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fd f96e 	bl	8001ccc <HAL_GetTick>
 80049f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f4:	f7fd f96a 	bl	8001ccc <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e200      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a06:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 8004a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d039      	beq.n	8004a92 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d01c      	beq.n	8004a60 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a26:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a0c      	ldr	r2, [pc, #48]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 8004a2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a32:	f7fd f94b 	bl	8001ccc <HAL_GetTick>
 8004a36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a3a:	f7fd f947 	bl	8001ccc <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e1dd      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a4c:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <HAL_RCC_OscConfig+0x4f8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x4d6>
 8004a58:	e01b      	b.n	8004a92 <HAL_RCC_OscConfig+0x52e>
 8004a5a:	bf00      	nop
 8004a5c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a60:	4b9b      	ldr	r3, [pc, #620]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a9a      	ldr	r2, [pc, #616]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a6c:	f7fd f92e 	bl	8001ccc <HAL_GetTick>
 8004a70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a74:	f7fd f92a 	bl	8001ccc <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e1c0      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a86:	4b92      	ldr	r3, [pc, #584]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 8081 	beq.w	8004ba2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004aa0:	4b8c      	ldr	r3, [pc, #560]	; (8004cd4 <HAL_RCC_OscConfig+0x770>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a8b      	ldr	r2, [pc, #556]	; (8004cd4 <HAL_RCC_OscConfig+0x770>)
 8004aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004aac:	f7fd f90e 	bl	8001ccc <HAL_GetTick>
 8004ab0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab4:	f7fd f90a 	bl	8001ccc <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b64      	cmp	r3, #100	; 0x64
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e1a0      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ac6:	4b83      	ldr	r3, [pc, #524]	; (8004cd4 <HAL_RCC_OscConfig+0x770>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d106      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x584>
 8004ada:	4b7d      	ldr	r3, [pc, #500]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	4a7c      	ldr	r2, [pc, #496]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae6:	e02d      	b.n	8004b44 <HAL_RCC_OscConfig+0x5e0>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10c      	bne.n	8004b0a <HAL_RCC_OscConfig+0x5a6>
 8004af0:	4b77      	ldr	r3, [pc, #476]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	4a76      	ldr	r2, [pc, #472]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	6713      	str	r3, [r2, #112]	; 0x70
 8004afc:	4b74      	ldr	r3, [pc, #464]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	4a73      	ldr	r2, [pc, #460]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004b02:	f023 0304 	bic.w	r3, r3, #4
 8004b06:	6713      	str	r3, [r2, #112]	; 0x70
 8004b08:	e01c      	b.n	8004b44 <HAL_RCC_OscConfig+0x5e0>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b05      	cmp	r3, #5
 8004b10:	d10c      	bne.n	8004b2c <HAL_RCC_OscConfig+0x5c8>
 8004b12:	4b6f      	ldr	r3, [pc, #444]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	4a6e      	ldr	r2, [pc, #440]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004b18:	f043 0304 	orr.w	r3, r3, #4
 8004b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1e:	4b6c      	ldr	r3, [pc, #432]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	4a6b      	ldr	r2, [pc, #428]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004b24:	f043 0301 	orr.w	r3, r3, #1
 8004b28:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2a:	e00b      	b.n	8004b44 <HAL_RCC_OscConfig+0x5e0>
 8004b2c:	4b68      	ldr	r3, [pc, #416]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b30:	4a67      	ldr	r2, [pc, #412]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004b32:	f023 0301 	bic.w	r3, r3, #1
 8004b36:	6713      	str	r3, [r2, #112]	; 0x70
 8004b38:	4b65      	ldr	r3, [pc, #404]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3c:	4a64      	ldr	r2, [pc, #400]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004b3e:	f023 0304 	bic.w	r3, r3, #4
 8004b42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d015      	beq.n	8004b78 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4c:	f7fd f8be 	bl	8001ccc <HAL_GetTick>
 8004b50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b52:	e00a      	b.n	8004b6a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b54:	f7fd f8ba 	bl	8001ccc <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e14e      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b6a:	4b59      	ldr	r3, [pc, #356]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0ee      	beq.n	8004b54 <HAL_RCC_OscConfig+0x5f0>
 8004b76:	e014      	b.n	8004ba2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b78:	f7fd f8a8 	bl	8001ccc <HAL_GetTick>
 8004b7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b80:	f7fd f8a4 	bl	8001ccc <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e138      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b96:	4b4e      	ldr	r3, [pc, #312]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1ee      	bne.n	8004b80 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 812d 	beq.w	8004e06 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004bac:	4b48      	ldr	r3, [pc, #288]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bb4:	2b18      	cmp	r3, #24
 8004bb6:	f000 80bd 	beq.w	8004d34 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	f040 809e 	bne.w	8004d00 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc4:	4b42      	ldr	r3, [pc, #264]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a41      	ldr	r2, [pc, #260]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fd f87c 	bl	8001ccc <HAL_GetTick>
 8004bd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fd f878 	bl	8001ccc <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e10e      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bea:	4b39      	ldr	r3, [pc, #228]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf6:	4b36      	ldr	r3, [pc, #216]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bfa:	4b37      	ldr	r3, [pc, #220]	; (8004cd8 <HAL_RCC_OscConfig+0x774>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c06:	0112      	lsls	r2, r2, #4
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	4931      	ldr	r1, [pc, #196]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	628b      	str	r3, [r1, #40]	; 0x28
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	3b01      	subs	r3, #1
 8004c16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	025b      	lsls	r3, r3, #9
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	041b      	lsls	r3, r3, #16
 8004c2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	061b      	lsls	r3, r3, #24
 8004c3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c40:	4923      	ldr	r1, [pc, #140]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c46:	4b22      	ldr	r3, [pc, #136]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	4a21      	ldr	r2, [pc, #132]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c52:	4b1f      	ldr	r3, [pc, #124]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c56:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c5e:	00d2      	lsls	r2, r2, #3
 8004c60:	491b      	ldr	r1, [pc, #108]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c66:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	f023 020c 	bic.w	r2, r3, #12
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	4917      	ldr	r1, [pc, #92]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c78:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	f023 0202 	bic.w	r2, r3, #2
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c84:	4912      	ldr	r1, [pc, #72]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c8a:	4b11      	ldr	r3, [pc, #68]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	4a10      	ldr	r2, [pc, #64]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c96:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	4a0d      	ldr	r2, [pc, #52]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004cae:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	4a07      	ldr	r2, [pc, #28]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cba:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <HAL_RCC_OscConfig+0x76c>)
 8004cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc6:	f7fd f801 	bl	8001ccc <HAL_GetTick>
 8004cca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ccc:	e011      	b.n	8004cf2 <HAL_RCC_OscConfig+0x78e>
 8004cce:	bf00      	nop
 8004cd0:	58024400 	.word	0x58024400
 8004cd4:	58024800 	.word	0x58024800
 8004cd8:	fffffc0c 	.word	0xfffffc0c
 8004cdc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7fc fff4 	bl	8001ccc <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e08a      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cf2:	4b47      	ldr	r3, [pc, #284]	; (8004e10 <HAL_RCC_OscConfig+0x8ac>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x77c>
 8004cfe:	e082      	b.n	8004e06 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d00:	4b43      	ldr	r3, [pc, #268]	; (8004e10 <HAL_RCC_OscConfig+0x8ac>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a42      	ldr	r2, [pc, #264]	; (8004e10 <HAL_RCC_OscConfig+0x8ac>)
 8004d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0c:	f7fc ffde 	bl	8001ccc <HAL_GetTick>
 8004d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d14:	f7fc ffda 	bl	8001ccc <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e070      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d26:	4b3a      	ldr	r3, [pc, #232]	; (8004e10 <HAL_RCC_OscConfig+0x8ac>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x7b0>
 8004d32:	e068      	b.n	8004e06 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d34:	4b36      	ldr	r3, [pc, #216]	; (8004e10 <HAL_RCC_OscConfig+0x8ac>)
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d3a:	4b35      	ldr	r3, [pc, #212]	; (8004e10 <HAL_RCC_OscConfig+0x8ac>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d031      	beq.n	8004dac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f003 0203 	and.w	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d12a      	bne.n	8004dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d122      	bne.n	8004dac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d70:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d11a      	bne.n	8004dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	0a5b      	lsrs	r3, r3, #9
 8004d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d82:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d111      	bne.n	8004dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	0c1b      	lsrs	r3, r3, #16
 8004d8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d94:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d108      	bne.n	8004dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	0e1b      	lsrs	r3, r3, #24
 8004d9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e02b      	b.n	8004e08 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004db0:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <HAL_RCC_OscConfig+0x8ac>)
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	08db      	lsrs	r3, r3, #3
 8004db6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d01f      	beq.n	8004e06 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004dc6:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <HAL_RCC_OscConfig+0x8ac>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	4a11      	ldr	r2, [pc, #68]	; (8004e10 <HAL_RCC_OscConfig+0x8ac>)
 8004dcc:	f023 0301 	bic.w	r3, r3, #1
 8004dd0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dd2:	f7fc ff7b 	bl	8001ccc <HAL_GetTick>
 8004dd6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004dd8:	bf00      	nop
 8004dda:	f7fc ff77 	bl	8001ccc <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d0f9      	beq.n	8004dda <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004de6:	4b0a      	ldr	r3, [pc, #40]	; (8004e10 <HAL_RCC_OscConfig+0x8ac>)
 8004de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dea:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <HAL_RCC_OscConfig+0x8b0>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004df2:	00d2      	lsls	r2, r2, #3
 8004df4:	4906      	ldr	r1, [pc, #24]	; (8004e10 <HAL_RCC_OscConfig+0x8ac>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004dfa:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <HAL_RCC_OscConfig+0x8ac>)
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	4a04      	ldr	r2, [pc, #16]	; (8004e10 <HAL_RCC_OscConfig+0x8ac>)
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3730      	adds	r7, #48	; 0x30
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	58024400 	.word	0x58024400
 8004e14:	ffff0007 	.word	0xffff0007

08004e18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e19c      	b.n	8005166 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b8a      	ldr	r3, [pc, #552]	; (8005058 <HAL_RCC_ClockConfig+0x240>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d910      	bls.n	8004e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b87      	ldr	r3, [pc, #540]	; (8005058 <HAL_RCC_ClockConfig+0x240>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f023 020f 	bic.w	r2, r3, #15
 8004e42:	4985      	ldr	r1, [pc, #532]	; (8005058 <HAL_RCC_ClockConfig+0x240>)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4a:	4b83      	ldr	r3, [pc, #524]	; (8005058 <HAL_RCC_ClockConfig+0x240>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d001      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e184      	b.n	8005166 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d010      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	4b7b      	ldr	r3, [pc, #492]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d908      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e78:	4b78      	ldr	r3, [pc, #480]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	4975      	ldr	r1, [pc, #468]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d010      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695a      	ldr	r2, [r3, #20]
 8004e9a:	4b70      	ldr	r3, [pc, #448]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d908      	bls.n	8004eb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ea6:	4b6d      	ldr	r3, [pc, #436]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	496a      	ldr	r1, [pc, #424]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d010      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699a      	ldr	r2, [r3, #24]
 8004ec8:	4b64      	ldr	r3, [pc, #400]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d908      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ed4:	4b61      	ldr	r3, [pc, #388]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	495e      	ldr	r1, [pc, #376]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d010      	beq.n	8004f14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69da      	ldr	r2, [r3, #28]
 8004ef6:	4b59      	ldr	r3, [pc, #356]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d908      	bls.n	8004f14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f02:	4b56      	ldr	r3, [pc, #344]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	4953      	ldr	r1, [pc, #332]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d010      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	4b4d      	ldr	r3, [pc, #308]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f003 030f 	and.w	r3, r3, #15
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d908      	bls.n	8004f42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f30:	4b4a      	ldr	r3, [pc, #296]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f023 020f 	bic.w	r2, r3, #15
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4947      	ldr	r1, [pc, #284]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d055      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f4e:	4b43      	ldr	r3, [pc, #268]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	4940      	ldr	r1, [pc, #256]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f68:	4b3c      	ldr	r3, [pc, #240]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d121      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0f6      	b.n	8005166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d107      	bne.n	8004f90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f80:	4b36      	ldr	r3, [pc, #216]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d115      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0ea      	b.n	8005166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d107      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f98:	4b30      	ldr	r3, [pc, #192]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d109      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e0de      	b.n	8005166 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fa8:	4b2c      	ldr	r3, [pc, #176]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0d6      	b.n	8005166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fb8:	4b28      	ldr	r3, [pc, #160]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f023 0207 	bic.w	r2, r3, #7
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4925      	ldr	r1, [pc, #148]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fca:	f7fc fe7f 	bl	8001ccc <HAL_GetTick>
 8004fce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd0:	e00a      	b.n	8004fe8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd2:	f7fc fe7b 	bl	8001ccc <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e0be      	b.n	8005166 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe8:	4b1c      	ldr	r3, [pc, #112]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d1eb      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d010      	beq.n	8005028 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	4b14      	ldr	r3, [pc, #80]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	429a      	cmp	r2, r3
 8005014:	d208      	bcs.n	8005028 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005016:	4b11      	ldr	r3, [pc, #68]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f023 020f 	bic.w	r2, r3, #15
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	490e      	ldr	r1, [pc, #56]	; (800505c <HAL_RCC_ClockConfig+0x244>)
 8005024:	4313      	orrs	r3, r2
 8005026:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_RCC_ClockConfig+0x240>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d214      	bcs.n	8005060 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005036:	4b08      	ldr	r3, [pc, #32]	; (8005058 <HAL_RCC_ClockConfig+0x240>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f023 020f 	bic.w	r2, r3, #15
 800503e:	4906      	ldr	r1, [pc, #24]	; (8005058 <HAL_RCC_ClockConfig+0x240>)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005046:	4b04      	ldr	r3, [pc, #16]	; (8005058 <HAL_RCC_ClockConfig+0x240>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d005      	beq.n	8005060 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e086      	b.n	8005166 <HAL_RCC_ClockConfig+0x34e>
 8005058:	52002000 	.word	0x52002000
 800505c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d010      	beq.n	800508e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	4b3f      	ldr	r3, [pc, #252]	; (8005170 <HAL_RCC_ClockConfig+0x358>)
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005078:	429a      	cmp	r2, r3
 800507a:	d208      	bcs.n	800508e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800507c:	4b3c      	ldr	r3, [pc, #240]	; (8005170 <HAL_RCC_ClockConfig+0x358>)
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	4939      	ldr	r1, [pc, #228]	; (8005170 <HAL_RCC_ClockConfig+0x358>)
 800508a:	4313      	orrs	r3, r2
 800508c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d010      	beq.n	80050bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695a      	ldr	r2, [r3, #20]
 800509e:	4b34      	ldr	r3, [pc, #208]	; (8005170 <HAL_RCC_ClockConfig+0x358>)
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d208      	bcs.n	80050bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050aa:	4b31      	ldr	r3, [pc, #196]	; (8005170 <HAL_RCC_ClockConfig+0x358>)
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	492e      	ldr	r1, [pc, #184]	; (8005170 <HAL_RCC_ClockConfig+0x358>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d010      	beq.n	80050ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699a      	ldr	r2, [r3, #24]
 80050cc:	4b28      	ldr	r3, [pc, #160]	; (8005170 <HAL_RCC_ClockConfig+0x358>)
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d208      	bcs.n	80050ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050d8:	4b25      	ldr	r3, [pc, #148]	; (8005170 <HAL_RCC_ClockConfig+0x358>)
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	4922      	ldr	r1, [pc, #136]	; (8005170 <HAL_RCC_ClockConfig+0x358>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d010      	beq.n	8005118 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69da      	ldr	r2, [r3, #28]
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <HAL_RCC_ClockConfig+0x358>)
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005102:	429a      	cmp	r2, r3
 8005104:	d208      	bcs.n	8005118 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005106:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <HAL_RCC_ClockConfig+0x358>)
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	4917      	ldr	r1, [pc, #92]	; (8005170 <HAL_RCC_ClockConfig+0x358>)
 8005114:	4313      	orrs	r3, r2
 8005116:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005118:	f000 f834 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 800511c:	4602      	mov	r2, r0
 800511e:	4b14      	ldr	r3, [pc, #80]	; (8005170 <HAL_RCC_ClockConfig+0x358>)
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	0a1b      	lsrs	r3, r3, #8
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	4912      	ldr	r1, [pc, #72]	; (8005174 <HAL_RCC_ClockConfig+0x35c>)
 800512a:	5ccb      	ldrb	r3, [r1, r3]
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
 8005134:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005136:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <HAL_RCC_ClockConfig+0x358>)
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <HAL_RCC_ClockConfig+0x35c>)
 8005140:	5cd3      	ldrb	r3, [r2, r3]
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
 800514c:	4a0a      	ldr	r2, [pc, #40]	; (8005178 <HAL_RCC_ClockConfig+0x360>)
 800514e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005150:	4a0a      	ldr	r2, [pc, #40]	; (800517c <HAL_RCC_ClockConfig+0x364>)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005156:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <HAL_RCC_ClockConfig+0x368>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f7fc fd6c 	bl	8001c38 <HAL_InitTick>
 8005160:	4603      	mov	r3, r0
 8005162:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005164:	7bfb      	ldrb	r3, [r7, #15]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	58024400 	.word	0x58024400
 8005174:	0800b12c 	.word	0x0800b12c
 8005178:	24000004 	.word	0x24000004
 800517c:	24000000 	.word	0x24000000
 8005180:	24000008 	.word	0x24000008

08005184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005184:	b480      	push	{r7}
 8005186:	b089      	sub	sp, #36	; 0x24
 8005188:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800518a:	4bb3      	ldr	r3, [pc, #716]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005192:	2b18      	cmp	r3, #24
 8005194:	f200 8155 	bhi.w	8005442 <HAL_RCC_GetSysClockFreq+0x2be>
 8005198:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800519a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519e:	bf00      	nop
 80051a0:	08005205 	.word	0x08005205
 80051a4:	08005443 	.word	0x08005443
 80051a8:	08005443 	.word	0x08005443
 80051ac:	08005443 	.word	0x08005443
 80051b0:	08005443 	.word	0x08005443
 80051b4:	08005443 	.word	0x08005443
 80051b8:	08005443 	.word	0x08005443
 80051bc:	08005443 	.word	0x08005443
 80051c0:	0800522b 	.word	0x0800522b
 80051c4:	08005443 	.word	0x08005443
 80051c8:	08005443 	.word	0x08005443
 80051cc:	08005443 	.word	0x08005443
 80051d0:	08005443 	.word	0x08005443
 80051d4:	08005443 	.word	0x08005443
 80051d8:	08005443 	.word	0x08005443
 80051dc:	08005443 	.word	0x08005443
 80051e0:	08005231 	.word	0x08005231
 80051e4:	08005443 	.word	0x08005443
 80051e8:	08005443 	.word	0x08005443
 80051ec:	08005443 	.word	0x08005443
 80051f0:	08005443 	.word	0x08005443
 80051f4:	08005443 	.word	0x08005443
 80051f8:	08005443 	.word	0x08005443
 80051fc:	08005443 	.word	0x08005443
 8005200:	08005237 	.word	0x08005237
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005204:	4b94      	ldr	r3, [pc, #592]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b00      	cmp	r3, #0
 800520e:	d009      	beq.n	8005224 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005210:	4b91      	ldr	r3, [pc, #580]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	08db      	lsrs	r3, r3, #3
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	4a90      	ldr	r2, [pc, #576]	; (800545c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
 8005220:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005222:	e111      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005224:	4b8d      	ldr	r3, [pc, #564]	; (800545c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005226:	61bb      	str	r3, [r7, #24]
      break;
 8005228:	e10e      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800522a:	4b8d      	ldr	r3, [pc, #564]	; (8005460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800522c:	61bb      	str	r3, [r7, #24]
      break;
 800522e:	e10b      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005230:	4b8c      	ldr	r3, [pc, #560]	; (8005464 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005232:	61bb      	str	r3, [r7, #24]
      break;
 8005234:	e108      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005236:	4b88      	ldr	r3, [pc, #544]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005240:	4b85      	ldr	r3, [pc, #532]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800524a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800524c:	4b82      	ldr	r3, [pc, #520]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005256:	4b80      	ldr	r3, [pc, #512]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525a:	08db      	lsrs	r3, r3, #3
 800525c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	fb02 f303 	mul.w	r3, r2, r3
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 80e1 	beq.w	800543c <HAL_RCC_GetSysClockFreq+0x2b8>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b02      	cmp	r3, #2
 800527e:	f000 8083 	beq.w	8005388 <HAL_RCC_GetSysClockFreq+0x204>
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b02      	cmp	r3, #2
 8005286:	f200 80a1 	bhi.w	80053cc <HAL_RCC_GetSysClockFreq+0x248>
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_RCC_GetSysClockFreq+0x114>
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d056      	beq.n	8005344 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005296:	e099      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005298:	4b6f      	ldr	r3, [pc, #444]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d02d      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052a4:	4b6c      	ldr	r3, [pc, #432]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	08db      	lsrs	r3, r3, #3
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	4a6b      	ldr	r2, [pc, #428]	; (800545c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
 80052b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	ee07 3a90 	vmov	s15, r3
 80052bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ce:	4b62      	ldr	r3, [pc, #392]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052de:	ed97 6a02 	vldr	s12, [r7, #8]
 80052e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80052fe:	e087      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800546c <HAL_RCC_GetSysClockFreq+0x2e8>
 800530e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005312:	4b51      	ldr	r3, [pc, #324]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005322:	ed97 6a02 	vldr	s12, [r7, #8]
 8005326:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800532a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800532e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005342:	e065      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005470 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005356:	4b40      	ldr	r3, [pc, #256]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005366:	ed97 6a02 	vldr	s12, [r7, #8]
 800536a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800536e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800537a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005386:	e043      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005392:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005474 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800539a:	4b2f      	ldr	r3, [pc, #188]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053ca:	e021      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005470 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053de:	4b1e      	ldr	r3, [pc, #120]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80053f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800540e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005410:	4b11      	ldr	r3, [pc, #68]	; (8005458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	0a5b      	lsrs	r3, r3, #9
 8005416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800541a:	3301      	adds	r3, #1
 800541c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	ee07 3a90 	vmov	s15, r3
 8005424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005428:	edd7 6a07 	vldr	s13, [r7, #28]
 800542c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005434:	ee17 3a90 	vmov	r3, s15
 8005438:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800543a:	e005      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	61bb      	str	r3, [r7, #24]
      break;
 8005440:	e002      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005442:	4b07      	ldr	r3, [pc, #28]	; (8005460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005444:	61bb      	str	r3, [r7, #24]
      break;
 8005446:	bf00      	nop
  }

  return sysclockfreq;
 8005448:	69bb      	ldr	r3, [r7, #24]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3724      	adds	r7, #36	; 0x24
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	58024400 	.word	0x58024400
 800545c:	03d09000 	.word	0x03d09000
 8005460:	003d0900 	.word	0x003d0900
 8005464:	017d7840 	.word	0x017d7840
 8005468:	46000000 	.word	0x46000000
 800546c:	4c742400 	.word	0x4c742400
 8005470:	4a742400 	.word	0x4a742400
 8005474:	4bbebc20 	.word	0x4bbebc20

08005478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800547e:	f7ff fe81 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8005482:	4602      	mov	r2, r0
 8005484:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	0a1b      	lsrs	r3, r3, #8
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	490f      	ldr	r1, [pc, #60]	; (80054cc <HAL_RCC_GetHCLKFreq+0x54>)
 8005490:	5ccb      	ldrb	r3, [r1, r3]
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	fa22 f303 	lsr.w	r3, r2, r3
 800549a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800549c:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	4a09      	ldr	r2, [pc, #36]	; (80054cc <HAL_RCC_GetHCLKFreq+0x54>)
 80054a6:	5cd3      	ldrb	r3, [r2, r3]
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	fa22 f303 	lsr.w	r3, r2, r3
 80054b2:	4a07      	ldr	r2, [pc, #28]	; (80054d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80054b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054b6:	4a07      	ldr	r2, [pc, #28]	; (80054d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80054bc:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80054be:	681b      	ldr	r3, [r3, #0]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	58024400 	.word	0x58024400
 80054cc:	0800b12c 	.word	0x0800b12c
 80054d0:	24000004 	.word	0x24000004
 80054d4:	24000000 	.word	0x24000000

080054d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80054dc:	f7ff ffcc 	bl	8005478 <HAL_RCC_GetHCLKFreq>
 80054e0:	4602      	mov	r2, r0
 80054e2:	4b06      	ldr	r3, [pc, #24]	; (80054fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	091b      	lsrs	r3, r3, #4
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	4904      	ldr	r1, [pc, #16]	; (8005500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054ee:	5ccb      	ldrb	r3, [r1, r3]
 80054f0:	f003 031f 	and.w	r3, r3, #31
 80054f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	58024400 	.word	0x58024400
 8005500:	0800b12c 	.word	0x0800b12c

08005504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005508:	f7ff ffb6 	bl	8005478 <HAL_RCC_GetHCLKFreq>
 800550c:	4602      	mov	r2, r0
 800550e:	4b06      	ldr	r3, [pc, #24]	; (8005528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	0a1b      	lsrs	r3, r3, #8
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	4904      	ldr	r1, [pc, #16]	; (800552c <HAL_RCC_GetPCLK2Freq+0x28>)
 800551a:	5ccb      	ldrb	r3, [r1, r3]
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005524:	4618      	mov	r0, r3
 8005526:	bd80      	pop	{r7, pc}
 8005528:	58024400 	.word	0x58024400
 800552c:	0800b12c 	.word	0x0800b12c

08005530 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005534:	b0ca      	sub	sp, #296	; 0x128
 8005536:	af00      	add	r7, sp, #0
 8005538:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800553c:	2300      	movs	r3, #0
 800553e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005542:	2300      	movs	r3, #0
 8005544:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005554:	2500      	movs	r5, #0
 8005556:	ea54 0305 	orrs.w	r3, r4, r5
 800555a:	d049      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800555c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005562:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005566:	d02f      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005568:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800556c:	d828      	bhi.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800556e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005572:	d01a      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005578:	d822      	bhi.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800557e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005582:	d007      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005584:	e01c      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005586:	4bb8      	ldr	r3, [pc, #736]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	4ab7      	ldr	r2, [pc, #732]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800558c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005590:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005592:	e01a      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005598:	3308      	adds	r3, #8
 800559a:	2102      	movs	r1, #2
 800559c:	4618      	mov	r0, r3
 800559e:	f002 fb61 	bl	8007c64 <RCCEx_PLL2_Config>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055a8:	e00f      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ae:	3328      	adds	r3, #40	; 0x28
 80055b0:	2102      	movs	r1, #2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f002 fc08 	bl	8007dc8 <RCCEx_PLL3_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055be:	e004      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055c6:	e000      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80055c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80055d2:	4ba5      	ldr	r3, [pc, #660]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055e0:	4aa1      	ldr	r2, [pc, #644]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055e2:	430b      	orrs	r3, r1
 80055e4:	6513      	str	r3, [r2, #80]	; 0x50
 80055e6:	e003      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80055fc:	f04f 0900 	mov.w	r9, #0
 8005600:	ea58 0309 	orrs.w	r3, r8, r9
 8005604:	d047      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560c:	2b04      	cmp	r3, #4
 800560e:	d82a      	bhi.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005610:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005616:	bf00      	nop
 8005618:	0800562d 	.word	0x0800562d
 800561c:	0800563b 	.word	0x0800563b
 8005620:	08005651 	.word	0x08005651
 8005624:	0800566f 	.word	0x0800566f
 8005628:	0800566f 	.word	0x0800566f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800562c:	4b8e      	ldr	r3, [pc, #568]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	4a8d      	ldr	r2, [pc, #564]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005638:	e01a      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563e:	3308      	adds	r3, #8
 8005640:	2100      	movs	r1, #0
 8005642:	4618      	mov	r0, r3
 8005644:	f002 fb0e 	bl	8007c64 <RCCEx_PLL2_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800564e:	e00f      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005654:	3328      	adds	r3, #40	; 0x28
 8005656:	2100      	movs	r1, #0
 8005658:	4618      	mov	r0, r3
 800565a:	f002 fbb5 	bl	8007dc8 <RCCEx_PLL3_Config>
 800565e:	4603      	mov	r3, r0
 8005660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005664:	e004      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800566c:	e000      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800566e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005678:	4b7b      	ldr	r3, [pc, #492]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800567a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567c:	f023 0107 	bic.w	r1, r3, #7
 8005680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005686:	4a78      	ldr	r2, [pc, #480]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005688:	430b      	orrs	r3, r1
 800568a:	6513      	str	r3, [r2, #80]	; 0x50
 800568c:	e003      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80056a2:	f04f 0b00 	mov.w	fp, #0
 80056a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80056aa:	d04c      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b6:	d030      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80056b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056bc:	d829      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80056be:	2bc0      	cmp	r3, #192	; 0xc0
 80056c0:	d02d      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056c2:	2bc0      	cmp	r3, #192	; 0xc0
 80056c4:	d825      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80056c6:	2b80      	cmp	r3, #128	; 0x80
 80056c8:	d018      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80056ca:	2b80      	cmp	r3, #128	; 0x80
 80056cc:	d821      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d007      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80056d6:	e01c      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d8:	4b63      	ldr	r3, [pc, #396]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	4a62      	ldr	r2, [pc, #392]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80056e4:	e01c      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ea:	3308      	adds	r3, #8
 80056ec:	2100      	movs	r1, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f002 fab8 	bl	8007c64 <RCCEx_PLL2_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80056fa:	e011      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005700:	3328      	adds	r3, #40	; 0x28
 8005702:	2100      	movs	r1, #0
 8005704:	4618      	mov	r0, r3
 8005706:	f002 fb5f 	bl	8007dc8 <RCCEx_PLL3_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005710:	e006      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005718:	e002      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800571e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005728:	4b4f      	ldr	r3, [pc, #316]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800572a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005736:	4a4c      	ldr	r2, [pc, #304]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005738:	430b      	orrs	r3, r1
 800573a:	6513      	str	r3, [r2, #80]	; 0x50
 800573c:	e003      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005752:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005756:	2300      	movs	r3, #0
 8005758:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800575c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005760:	460b      	mov	r3, r1
 8005762:	4313      	orrs	r3, r2
 8005764:	d053      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800576e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005772:	d035      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005774:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005778:	d82e      	bhi.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800577a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800577e:	d031      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005780:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005784:	d828      	bhi.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800578a:	d01a      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800578c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005790:	d822      	bhi.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800579a:	d007      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800579c:	e01c      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800579e:	4b32      	ldr	r3, [pc, #200]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	4a31      	ldr	r2, [pc, #196]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057aa:	e01c      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b0:	3308      	adds	r3, #8
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f002 fa55 	bl	8007c64 <RCCEx_PLL2_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80057c0:	e011      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c6:	3328      	adds	r3, #40	; 0x28
 80057c8:	2100      	movs	r1, #0
 80057ca:	4618      	mov	r0, r3
 80057cc:	f002 fafc 	bl	8007dc8 <RCCEx_PLL3_Config>
 80057d0:	4603      	mov	r3, r0
 80057d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057d6:	e006      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057de:	e002      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80057e0:	bf00      	nop
 80057e2:	e000      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80057e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80057ee:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80057f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057fe:	4a1a      	ldr	r2, [pc, #104]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005800:	430b      	orrs	r3, r1
 8005802:	6593      	str	r3, [r2, #88]	; 0x58
 8005804:	e003      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800580a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800581a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800581e:	2300      	movs	r3, #0
 8005820:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005824:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005828:	460b      	mov	r3, r1
 800582a:	4313      	orrs	r3, r2
 800582c:	d056      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005832:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005836:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800583a:	d038      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800583c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005840:	d831      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005842:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005846:	d034      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005848:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800584c:	d82b      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800584e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005852:	d01d      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005854:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005858:	d825      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d006      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800585e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005864:	e01f      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005866:	bf00      	nop
 8005868:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800586c:	4ba2      	ldr	r3, [pc, #648]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	4aa1      	ldr	r2, [pc, #644]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005878:	e01c      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587e:	3308      	adds	r3, #8
 8005880:	2100      	movs	r1, #0
 8005882:	4618      	mov	r0, r3
 8005884:	f002 f9ee 	bl	8007c64 <RCCEx_PLL2_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800588e:	e011      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005894:	3328      	adds	r3, #40	; 0x28
 8005896:	2100      	movs	r1, #0
 8005898:	4618      	mov	r0, r3
 800589a:	f002 fa95 	bl	8007dc8 <RCCEx_PLL3_Config>
 800589e:	4603      	mov	r3, r0
 80058a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058ac:	e002      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80058b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10b      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80058bc:	4b8e      	ldr	r3, [pc, #568]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058cc:	4a8a      	ldr	r2, [pc, #552]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ce:	430b      	orrs	r3, r1
 80058d0:	6593      	str	r3, [r2, #88]	; 0x58
 80058d2:	e003      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80058dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80058e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80058ec:	2300      	movs	r3, #0
 80058ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80058f6:	460b      	mov	r3, r1
 80058f8:	4313      	orrs	r3, r2
 80058fa:	d03a      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005902:	2b30      	cmp	r3, #48	; 0x30
 8005904:	d01f      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005906:	2b30      	cmp	r3, #48	; 0x30
 8005908:	d819      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800590a:	2b20      	cmp	r3, #32
 800590c:	d00c      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800590e:	2b20      	cmp	r3, #32
 8005910:	d815      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d019      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005916:	2b10      	cmp	r3, #16
 8005918:	d111      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800591a:	4b77      	ldr	r3, [pc, #476]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	4a76      	ldr	r2, [pc, #472]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005924:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005926:	e011      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800592c:	3308      	adds	r3, #8
 800592e:	2102      	movs	r1, #2
 8005930:	4618      	mov	r0, r3
 8005932:	f002 f997 	bl	8007c64 <RCCEx_PLL2_Config>
 8005936:	4603      	mov	r3, r0
 8005938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800593c:	e006      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005944:	e002      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005946:	bf00      	nop
 8005948:	e000      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800594a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800594c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005954:	4b68      	ldr	r3, [pc, #416]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005958:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005962:	4a65      	ldr	r2, [pc, #404]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005964:	430b      	orrs	r3, r1
 8005966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005968:	e003      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800596e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800597e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005982:	2300      	movs	r3, #0
 8005984:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005988:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800598c:	460b      	mov	r3, r1
 800598e:	4313      	orrs	r3, r2
 8005990:	d051      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800599c:	d035      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800599e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059a2:	d82e      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059a8:	d031      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80059aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059ae:	d828      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b4:	d01a      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80059b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ba:	d822      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80059c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c4:	d007      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80059c6:	e01c      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c8:	4b4b      	ldr	r3, [pc, #300]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	4a4a      	ldr	r2, [pc, #296]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059d4:	e01c      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059da:	3308      	adds	r3, #8
 80059dc:	2100      	movs	r1, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f002 f940 	bl	8007c64 <RCCEx_PLL2_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059ea:	e011      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f0:	3328      	adds	r3, #40	; 0x28
 80059f2:	2100      	movs	r1, #0
 80059f4:	4618      	mov	r0, r3
 80059f6:	f002 f9e7 	bl	8007dc8 <RCCEx_PLL3_Config>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a00:	e006      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a08:	e002      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a0a:	bf00      	nop
 8005a0c:	e000      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005a18:	4b37      	ldr	r3, [pc, #220]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a26:	4a34      	ldr	r2, [pc, #208]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6513      	str	r3, [r2, #80]	; 0x50
 8005a2c:	e003      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005a42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a46:	2300      	movs	r3, #0
 8005a48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a4c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005a50:	460b      	mov	r3, r1
 8005a52:	4313      	orrs	r3, r2
 8005a54:	d056      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a60:	d033      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005a62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a66:	d82c      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a6c:	d02f      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005a6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a72:	d826      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a78:	d02b      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005a7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a7e:	d820      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a84:	d012      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005a86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a8a:	d81a      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d022      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a94:	d115      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a9a:	3308      	adds	r3, #8
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f002 f8e0 	bl	8007c64 <RCCEx_PLL2_Config>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005aaa:	e015      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab0:	3328      	adds	r3, #40	; 0x28
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f002 f987 	bl	8007dc8 <RCCEx_PLL3_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ac8:	e006      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005aca:	bf00      	nop
 8005acc:	e004      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ace:	bf00      	nop
 8005ad0:	e002      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ad2:	bf00      	nop
 8005ad4:	e000      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10d      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ae0:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aee:	4a02      	ldr	r2, [pc, #8]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6513      	str	r3, [r2, #80]	; 0x50
 8005af4:	e006      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005af6:	bf00      	nop
 8005af8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005b10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b14:	2300      	movs	r3, #0
 8005b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b1a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4313      	orrs	r3, r2
 8005b22:	d055      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b30:	d033      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b36:	d82c      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3c:	d02f      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b42:	d826      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b48:	d02b      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005b4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b4e:	d820      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b54:	d012      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b5a:	d81a      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d022      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b64:	d115      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f002 f878 	bl	8007c64 <RCCEx_PLL2_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b7a:	e015      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b80:	3328      	adds	r3, #40	; 0x28
 8005b82:	2101      	movs	r1, #1
 8005b84:	4618      	mov	r0, r3
 8005b86:	f002 f91f 	bl	8007dc8 <RCCEx_PLL3_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b90:	e00a      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b98:	e006      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b9a:	bf00      	nop
 8005b9c:	e004      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b9e:	bf00      	nop
 8005ba0:	e002      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ba2:	bf00      	nop
 8005ba4:	e000      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10b      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005bb0:	4ba3      	ldr	r3, [pc, #652]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bc0:	4a9f      	ldr	r2, [pc, #636]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8005bc6:	e003      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005be0:	2300      	movs	r3, #0
 8005be2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005be6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bea:	460b      	mov	r3, r1
 8005bec:	4313      	orrs	r3, r2
 8005bee:	d037      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bfa:	d00e      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c00:	d816      	bhi.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d018      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c0a:	d111      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0c:	4b8c      	ldr	r3, [pc, #560]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	4a8b      	ldr	r2, [pc, #556]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c18:	e00f      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1e:	3308      	adds	r3, #8
 8005c20:	2101      	movs	r1, #1
 8005c22:	4618      	mov	r0, r3
 8005c24:	f002 f81e 	bl	8007c64 <RCCEx_PLL2_Config>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c2e:	e004      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c36:	e000      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c42:	4b7f      	ldr	r3, [pc, #508]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c46:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	4a7b      	ldr	r2, [pc, #492]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c52:	430b      	orrs	r3, r1
 8005c54:	6513      	str	r3, [r2, #80]	; 0x50
 8005c56:	e003      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c70:	2300      	movs	r3, #0
 8005c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	d039      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d81c      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005c8a:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005ccd 	.word	0x08005ccd
 8005c94:	08005ca1 	.word	0x08005ca1
 8005c98:	08005caf 	.word	0x08005caf
 8005c9c:	08005ccd 	.word	0x08005ccd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca0:	4b67      	ldr	r3, [pc, #412]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	4a66      	ldr	r2, [pc, #408]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005caa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005cac:	e00f      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	2102      	movs	r1, #2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f001 ffd4 	bl	8007c64 <RCCEx_PLL2_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005cc2:	e004      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cca:	e000      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005cd6:	4b5a      	ldr	r3, [pc, #360]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cda:	f023 0103 	bic.w	r1, r3, #3
 8005cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce4:	4a56      	ldr	r2, [pc, #344]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cea:	e003      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005d00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d04:	2300      	movs	r3, #0
 8005d06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f000 809f 	beq.w	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d16:	4b4b      	ldr	r3, [pc, #300]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a4a      	ldr	r2, [pc, #296]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d22:	f7fb ffd3 	bl	8001ccc <HAL_GetTick>
 8005d26:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d2a:	e00b      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2c:	f7fb ffce 	bl	8001ccc <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b64      	cmp	r3, #100	; 0x64
 8005d3a:	d903      	bls.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d42:	e005      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d44:	4b3f      	ldr	r3, [pc, #252]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0ed      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005d50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d179      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d58:	4b39      	ldr	r3, [pc, #228]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d64:	4053      	eors	r3, r2
 8005d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d015      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d6e:	4b34      	ldr	r3, [pc, #208]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d7a:	4b31      	ldr	r3, [pc, #196]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7e:	4a30      	ldr	r2, [pc, #192]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d84:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d86:	4b2e      	ldr	r3, [pc, #184]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8a:	4a2d      	ldr	r2, [pc, #180]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d90:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d92:	4a2b      	ldr	r2, [pc, #172]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da6:	d118      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da8:	f7fb ff90 	bl	8001ccc <HAL_GetTick>
 8005dac:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005db0:	e00d      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db2:	f7fb ff8b 	bl	8001ccc <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005dbc:	1ad2      	subs	r2, r2, r3
 8005dbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d903      	bls.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005dcc:	e005      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dce:	4b1c      	ldr	r3, [pc, #112]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0eb      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d129      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005df2:	d10e      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005df4:	4b12      	ldr	r3, [pc, #72]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e04:	091a      	lsrs	r2, r3, #4
 8005e06:	4b10      	ldr	r3, [pc, #64]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	4a0d      	ldr	r2, [pc, #52]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	6113      	str	r3, [r2, #16]
 8005e10:	e005      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005e12:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e1c:	6113      	str	r3, [r2, #16]
 8005e1e:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e2e:	4a04      	ldr	r2, [pc, #16]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e30:	430b      	orrs	r3, r1
 8005e32:	6713      	str	r3, [r2, #112]	; 0x70
 8005e34:	e00e      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005e3e:	e009      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005e40:	58024400 	.word	0x58024400
 8005e44:	58024800 	.word	0x58024800
 8005e48:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f002 0301 	and.w	r3, r2, #1
 8005e60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e64:	2300      	movs	r3, #0
 8005e66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f000 8089 	beq.w	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e7c:	2b28      	cmp	r3, #40	; 0x28
 8005e7e:	d86b      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005e80:	a201      	add	r2, pc, #4	; (adr r2, 8005e88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e86:	bf00      	nop
 8005e88:	08005f61 	.word	0x08005f61
 8005e8c:	08005f59 	.word	0x08005f59
 8005e90:	08005f59 	.word	0x08005f59
 8005e94:	08005f59 	.word	0x08005f59
 8005e98:	08005f59 	.word	0x08005f59
 8005e9c:	08005f59 	.word	0x08005f59
 8005ea0:	08005f59 	.word	0x08005f59
 8005ea4:	08005f59 	.word	0x08005f59
 8005ea8:	08005f2d 	.word	0x08005f2d
 8005eac:	08005f59 	.word	0x08005f59
 8005eb0:	08005f59 	.word	0x08005f59
 8005eb4:	08005f59 	.word	0x08005f59
 8005eb8:	08005f59 	.word	0x08005f59
 8005ebc:	08005f59 	.word	0x08005f59
 8005ec0:	08005f59 	.word	0x08005f59
 8005ec4:	08005f59 	.word	0x08005f59
 8005ec8:	08005f43 	.word	0x08005f43
 8005ecc:	08005f59 	.word	0x08005f59
 8005ed0:	08005f59 	.word	0x08005f59
 8005ed4:	08005f59 	.word	0x08005f59
 8005ed8:	08005f59 	.word	0x08005f59
 8005edc:	08005f59 	.word	0x08005f59
 8005ee0:	08005f59 	.word	0x08005f59
 8005ee4:	08005f59 	.word	0x08005f59
 8005ee8:	08005f61 	.word	0x08005f61
 8005eec:	08005f59 	.word	0x08005f59
 8005ef0:	08005f59 	.word	0x08005f59
 8005ef4:	08005f59 	.word	0x08005f59
 8005ef8:	08005f59 	.word	0x08005f59
 8005efc:	08005f59 	.word	0x08005f59
 8005f00:	08005f59 	.word	0x08005f59
 8005f04:	08005f59 	.word	0x08005f59
 8005f08:	08005f61 	.word	0x08005f61
 8005f0c:	08005f59 	.word	0x08005f59
 8005f10:	08005f59 	.word	0x08005f59
 8005f14:	08005f59 	.word	0x08005f59
 8005f18:	08005f59 	.word	0x08005f59
 8005f1c:	08005f59 	.word	0x08005f59
 8005f20:	08005f59 	.word	0x08005f59
 8005f24:	08005f59 	.word	0x08005f59
 8005f28:	08005f61 	.word	0x08005f61
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f30:	3308      	adds	r3, #8
 8005f32:	2101      	movs	r1, #1
 8005f34:	4618      	mov	r0, r3
 8005f36:	f001 fe95 	bl	8007c64 <RCCEx_PLL2_Config>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f40:	e00f      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f46:	3328      	adds	r3, #40	; 0x28
 8005f48:	2101      	movs	r1, #1
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f001 ff3c 	bl	8007dc8 <RCCEx_PLL3_Config>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f56:	e004      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f5e:	e000      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10a      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f6a:	4bbf      	ldr	r3, [pc, #764]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f78:	4abb      	ldr	r2, [pc, #748]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f7a:	430b      	orrs	r3, r1
 8005f7c:	6553      	str	r3, [r2, #84]	; 0x54
 8005f7e:	e003      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	f002 0302 	and.w	r3, r2, #2
 8005f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f9e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	d041      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fae:	2b05      	cmp	r3, #5
 8005fb0:	d824      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08006005 	.word	0x08006005
 8005fbc:	08005fd1 	.word	0x08005fd1
 8005fc0:	08005fe7 	.word	0x08005fe7
 8005fc4:	08006005 	.word	0x08006005
 8005fc8:	08006005 	.word	0x08006005
 8005fcc:	08006005 	.word	0x08006005
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f001 fe43 	bl	8007c64 <RCCEx_PLL2_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fe4:	e00f      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fea:	3328      	adds	r3, #40	; 0x28
 8005fec:	2101      	movs	r1, #1
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 feea 	bl	8007dc8 <RCCEx_PLL3_Config>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ffa:	e004      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006002:	e000      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800600e:	4b96      	ldr	r3, [pc, #600]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006012:	f023 0107 	bic.w	r1, r3, #7
 8006016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800601a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800601c:	4a92      	ldr	r2, [pc, #584]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800601e:	430b      	orrs	r3, r1
 8006020:	6553      	str	r3, [r2, #84]	; 0x54
 8006022:	e003      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006024:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006028:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f002 0304 	and.w	r3, r2, #4
 8006038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800603c:	2300      	movs	r3, #0
 800603e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006042:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006046:	460b      	mov	r3, r1
 8006048:	4313      	orrs	r3, r2
 800604a:	d044      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006054:	2b05      	cmp	r3, #5
 8006056:	d825      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	080060ad 	.word	0x080060ad
 8006064:	08006079 	.word	0x08006079
 8006068:	0800608f 	.word	0x0800608f
 800606c:	080060ad 	.word	0x080060ad
 8006070:	080060ad 	.word	0x080060ad
 8006074:	080060ad 	.word	0x080060ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800607c:	3308      	adds	r3, #8
 800607e:	2101      	movs	r1, #1
 8006080:	4618      	mov	r0, r3
 8006082:	f001 fdef 	bl	8007c64 <RCCEx_PLL2_Config>
 8006086:	4603      	mov	r3, r0
 8006088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800608c:	e00f      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800608e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006092:	3328      	adds	r3, #40	; 0x28
 8006094:	2101      	movs	r1, #1
 8006096:	4618      	mov	r0, r3
 8006098:	f001 fe96 	bl	8007dc8 <RCCEx_PLL3_Config>
 800609c:	4603      	mov	r3, r0
 800609e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80060a2:	e004      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060aa:	e000      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80060ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10b      	bne.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060b6:	4b6c      	ldr	r3, [pc, #432]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ba:	f023 0107 	bic.w	r1, r3, #7
 80060be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060c6:	4a68      	ldr	r2, [pc, #416]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060c8:	430b      	orrs	r3, r1
 80060ca:	6593      	str	r3, [r2, #88]	; 0x58
 80060cc:	e003      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f002 0320 	and.w	r3, r2, #32
 80060e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060e6:	2300      	movs	r3, #0
 80060e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060f0:	460b      	mov	r3, r1
 80060f2:	4313      	orrs	r3, r2
 80060f4:	d055      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80060f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006102:	d033      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006108:	d82c      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d02f      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006114:	d826      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006116:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800611a:	d02b      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800611c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006120:	d820      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006126:	d012      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800612c:	d81a      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d022      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006136:	d115      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800613c:	3308      	adds	r3, #8
 800613e:	2100      	movs	r1, #0
 8006140:	4618      	mov	r0, r3
 8006142:	f001 fd8f 	bl	8007c64 <RCCEx_PLL2_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800614c:	e015      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800614e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006152:	3328      	adds	r3, #40	; 0x28
 8006154:	2102      	movs	r1, #2
 8006156:	4618      	mov	r0, r3
 8006158:	f001 fe36 	bl	8007dc8 <RCCEx_PLL3_Config>
 800615c:	4603      	mov	r3, r0
 800615e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006162:	e00a      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800616a:	e006      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800616c:	bf00      	nop
 800616e:	e004      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006170:	bf00      	nop
 8006172:	e002      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006174:	bf00      	nop
 8006176:	e000      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800617a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10b      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006182:	4b39      	ldr	r3, [pc, #228]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006186:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006192:	4a35      	ldr	r2, [pc, #212]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006194:	430b      	orrs	r3, r1
 8006196:	6553      	str	r3, [r2, #84]	; 0x54
 8006198:	e003      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800619e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80061ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061b2:	2300      	movs	r3, #0
 80061b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80061bc:	460b      	mov	r3, r1
 80061be:	4313      	orrs	r3, r2
 80061c0:	d058      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061ce:	d033      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80061d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061d4:	d82c      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061da:	d02f      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80061dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e0:	d826      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061e6:	d02b      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80061e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061ec:	d820      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f2:	d012      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80061f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f8:	d81a      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d022      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80061fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006202:	d115      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006208:	3308      	adds	r3, #8
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f001 fd29 	bl	8007c64 <RCCEx_PLL2_Config>
 8006212:	4603      	mov	r3, r0
 8006214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006218:	e015      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621e:	3328      	adds	r3, #40	; 0x28
 8006220:	2102      	movs	r1, #2
 8006222:	4618      	mov	r0, r3
 8006224:	f001 fdd0 	bl	8007dc8 <RCCEx_PLL3_Config>
 8006228:	4603      	mov	r3, r0
 800622a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800622e:	e00a      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006236:	e006      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006238:	bf00      	nop
 800623a:	e004      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800623c:	bf00      	nop
 800623e:	e002      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006240:	bf00      	nop
 8006242:	e000      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10e      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800624e:	4b06      	ldr	r3, [pc, #24]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006252:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800625a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800625e:	4a02      	ldr	r2, [pc, #8]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006260:	430b      	orrs	r3, r1
 8006262:	6593      	str	r3, [r2, #88]	; 0x58
 8006264:	e006      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006266:	bf00      	nop
 8006268:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006270:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006284:	2300      	movs	r3, #0
 8006286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800628a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800628e:	460b      	mov	r3, r1
 8006290:	4313      	orrs	r3, r2
 8006292:	d055      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006298:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800629c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062a0:	d033      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80062a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062a6:	d82c      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ac:	d02f      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80062ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b2:	d826      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80062b8:	d02b      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80062ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80062be:	d820      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062c4:	d012      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80062c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062ca:	d81a      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d022      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80062d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d4:	d115      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062da:	3308      	adds	r3, #8
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 fcc0 	bl	8007c64 <RCCEx_PLL2_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062ea:	e015      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f0:	3328      	adds	r3, #40	; 0x28
 80062f2:	2102      	movs	r1, #2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 fd67 	bl	8007dc8 <RCCEx_PLL3_Config>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006300:	e00a      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006308:	e006      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800630a:	bf00      	nop
 800630c:	e004      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800630e:	bf00      	nop
 8006310:	e002      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006312:	bf00      	nop
 8006314:	e000      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006318:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10b      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006320:	4ba1      	ldr	r3, [pc, #644]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006324:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800632c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006330:	4a9d      	ldr	r2, [pc, #628]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006332:	430b      	orrs	r3, r1
 8006334:	6593      	str	r3, [r2, #88]	; 0x58
 8006336:	e003      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006338:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800633c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006348:	f002 0308 	and.w	r3, r2, #8
 800634c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006350:	2300      	movs	r3, #0
 8006352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006356:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800635a:	460b      	mov	r3, r1
 800635c:	4313      	orrs	r3, r2
 800635e:	d01e      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636c:	d10c      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800636e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006372:	3328      	adds	r3, #40	; 0x28
 8006374:	2102      	movs	r1, #2
 8006376:	4618      	mov	r0, r3
 8006378:	f001 fd26 	bl	8007dc8 <RCCEx_PLL3_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006388:	4b87      	ldr	r3, [pc, #540]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800638a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006398:	4a83      	ldr	r2, [pc, #524]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800639a:	430b      	orrs	r3, r1
 800639c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800639e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f002 0310 	and.w	r3, r2, #16
 80063aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063ae:	2300      	movs	r3, #0
 80063b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80063b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80063b8:	460b      	mov	r3, r1
 80063ba:	4313      	orrs	r3, r2
 80063bc:	d01e      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80063be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ca:	d10c      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d0:	3328      	adds	r3, #40	; 0x28
 80063d2:	2102      	movs	r1, #2
 80063d4:	4618      	mov	r0, r3
 80063d6:	f001 fcf7 	bl	8007dc8 <RCCEx_PLL3_Config>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063e6:	4b70      	ldr	r3, [pc, #448]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063f6:	4a6c      	ldr	r2, [pc, #432]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063f8:	430b      	orrs	r3, r1
 80063fa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006408:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800640c:	2300      	movs	r3, #0
 800640e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006412:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006416:	460b      	mov	r3, r1
 8006418:	4313      	orrs	r3, r2
 800641a:	d03e      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800641c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006420:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006428:	d022      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800642a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800642e:	d81b      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006438:	d00b      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800643a:	e015      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006440:	3308      	adds	r3, #8
 8006442:	2100      	movs	r1, #0
 8006444:	4618      	mov	r0, r3
 8006446:	f001 fc0d 	bl	8007c64 <RCCEx_PLL2_Config>
 800644a:	4603      	mov	r3, r0
 800644c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006450:	e00f      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006456:	3328      	adds	r3, #40	; 0x28
 8006458:	2102      	movs	r1, #2
 800645a:	4618      	mov	r0, r3
 800645c:	f001 fcb4 	bl	8007dc8 <RCCEx_PLL3_Config>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006466:	e004      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800646e:	e000      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800647a:	4b4b      	ldr	r3, [pc, #300]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800647c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006486:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800648a:	4a47      	ldr	r2, [pc, #284]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800648c:	430b      	orrs	r3, r1
 800648e:	6593      	str	r3, [r2, #88]	; 0x58
 8006490:	e003      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006496:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800649a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80064a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80064a8:	2300      	movs	r3, #0
 80064aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80064ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80064b0:	460b      	mov	r3, r1
 80064b2:	4313      	orrs	r3, r2
 80064b4:	d03b      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064c2:	d01f      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80064c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064c8:	d818      	bhi.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80064ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ce:	d003      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80064d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064d4:	d007      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80064d6:	e011      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d8:	4b33      	ldr	r3, [pc, #204]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064dc:	4a32      	ldr	r2, [pc, #200]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80064e4:	e00f      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ea:	3328      	adds	r3, #40	; 0x28
 80064ec:	2101      	movs	r1, #1
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 fc6a 	bl	8007dc8 <RCCEx_PLL3_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80064fa:	e004      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006502:	e000      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10b      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800650e:	4b26      	ldr	r3, [pc, #152]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006512:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651e:	4a22      	ldr	r2, [pc, #136]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006520:	430b      	orrs	r3, r1
 8006522:	6553      	str	r3, [r2, #84]	; 0x54
 8006524:	e003      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800652a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800652e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800653a:	673b      	str	r3, [r7, #112]	; 0x70
 800653c:	2300      	movs	r3, #0
 800653e:	677b      	str	r3, [r7, #116]	; 0x74
 8006540:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006544:	460b      	mov	r3, r1
 8006546:	4313      	orrs	r3, r2
 8006548:	d034      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800654a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006558:	d007      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800655a:	e011      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800655c:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006560:	4a11      	ldr	r2, [pc, #68]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006568:	e00e      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800656a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656e:	3308      	adds	r3, #8
 8006570:	2102      	movs	r1, #2
 8006572:	4618      	mov	r0, r3
 8006574:	f001 fb76 	bl	8007c64 <RCCEx_PLL2_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800657e:	e003      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10d      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006590:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659e:	4a02      	ldr	r2, [pc, #8]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065a0:	430b      	orrs	r3, r1
 80065a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065a4:	e006      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80065a6:	bf00      	nop
 80065a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80065c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80065c2:	2300      	movs	r3, #0
 80065c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80065ca:	460b      	mov	r3, r1
 80065cc:	4313      	orrs	r3, r2
 80065ce:	d00c      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d4:	3328      	adds	r3, #40	; 0x28
 80065d6:	2102      	movs	r1, #2
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 fbf5 	bl	8007dc8 <RCCEx_PLL3_Config>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80065f6:	663b      	str	r3, [r7, #96]	; 0x60
 80065f8:	2300      	movs	r3, #0
 80065fa:	667b      	str	r3, [r7, #100]	; 0x64
 80065fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006600:	460b      	mov	r3, r1
 8006602:	4313      	orrs	r3, r2
 8006604:	d038      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800660a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800660e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006612:	d018      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006618:	d811      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800661a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800661e:	d014      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006624:	d80b      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d011      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800662a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662e:	d106      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006630:	4bc3      	ldr	r3, [pc, #780]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	4ac2      	ldr	r2, [pc, #776]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800663c:	e008      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006644:	e004      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006646:	bf00      	nop
 8006648:	e002      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800664a:	bf00      	nop
 800664c:	e000      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800664e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006650:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10b      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006658:	4bb9      	ldr	r3, [pc, #740]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800665a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006668:	4ab5      	ldr	r2, [pc, #724]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800666a:	430b      	orrs	r3, r1
 800666c:	6553      	str	r3, [r2, #84]	; 0x54
 800666e:	e003      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006684:	65bb      	str	r3, [r7, #88]	; 0x58
 8006686:	2300      	movs	r3, #0
 8006688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800668a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800668e:	460b      	mov	r3, r1
 8006690:	4313      	orrs	r3, r2
 8006692:	d009      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006694:	4baa      	ldr	r3, [pc, #680]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006698:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800669c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a2:	4aa7      	ldr	r2, [pc, #668]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066a4:	430b      	orrs	r3, r1
 80066a6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80066b4:	653b      	str	r3, [r7, #80]	; 0x50
 80066b6:	2300      	movs	r3, #0
 80066b8:	657b      	str	r3, [r7, #84]	; 0x54
 80066ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80066be:	460b      	mov	r3, r1
 80066c0:	4313      	orrs	r3, r2
 80066c2:	d00a      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80066c4:	4b9e      	ldr	r3, [pc, #632]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80066cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80066d4:	4a9a      	ldr	r2, [pc, #616]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066d6:	430b      	orrs	r3, r1
 80066d8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80066e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e8:	2300      	movs	r3, #0
 80066ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80066f0:	460b      	mov	r3, r1
 80066f2:	4313      	orrs	r3, r2
 80066f4:	d009      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066f6:	4b92      	ldr	r3, [pc, #584]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80066fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006704:	4a8e      	ldr	r2, [pc, #568]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006706:	430b      	orrs	r3, r1
 8006708:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800670a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006716:	643b      	str	r3, [r7, #64]	; 0x40
 8006718:	2300      	movs	r3, #0
 800671a:	647b      	str	r3, [r7, #68]	; 0x44
 800671c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006720:	460b      	mov	r3, r1
 8006722:	4313      	orrs	r3, r2
 8006724:	d00e      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006726:	4b86      	ldr	r3, [pc, #536]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	4a85      	ldr	r2, [pc, #532]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800672c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006730:	6113      	str	r3, [r2, #16]
 8006732:	4b83      	ldr	r3, [pc, #524]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006734:	6919      	ldr	r1, [r3, #16]
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800673a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800673e:	4a80      	ldr	r2, [pc, #512]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006740:	430b      	orrs	r3, r1
 8006742:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006750:	63bb      	str	r3, [r7, #56]	; 0x38
 8006752:	2300      	movs	r3, #0
 8006754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006756:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800675a:	460b      	mov	r3, r1
 800675c:	4313      	orrs	r3, r2
 800675e:	d009      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006760:	4b77      	ldr	r3, [pc, #476]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006764:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	4a74      	ldr	r2, [pc, #464]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006770:	430b      	orrs	r3, r1
 8006772:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006780:	633b      	str	r3, [r7, #48]	; 0x30
 8006782:	2300      	movs	r3, #0
 8006784:	637b      	str	r3, [r7, #52]	; 0x34
 8006786:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800678a:	460b      	mov	r3, r1
 800678c:	4313      	orrs	r3, r2
 800678e:	d00a      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006790:	4b6b      	ldr	r3, [pc, #428]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006794:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800679c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067a0:	4a67      	ldr	r2, [pc, #412]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067a2:	430b      	orrs	r3, r1
 80067a4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	2100      	movs	r1, #0
 80067b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80067bc:	460b      	mov	r3, r1
 80067be:	4313      	orrs	r3, r2
 80067c0:	d011      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c6:	3308      	adds	r3, #8
 80067c8:	2100      	movs	r1, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 fa4a 	bl	8007c64 <RCCEx_PLL2_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80067d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80067e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	2100      	movs	r1, #0
 80067f0:	6239      	str	r1, [r7, #32]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
 80067f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80067fc:	460b      	mov	r3, r1
 80067fe:	4313      	orrs	r3, r2
 8006800:	d011      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006806:	3308      	adds	r3, #8
 8006808:	2101      	movs	r1, #1
 800680a:	4618      	mov	r0, r3
 800680c:	f001 fa2a 	bl	8007c64 <RCCEx_PLL2_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006822:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	2100      	movs	r1, #0
 8006830:	61b9      	str	r1, [r7, #24]
 8006832:	f003 0304 	and.w	r3, r3, #4
 8006836:	61fb      	str	r3, [r7, #28]
 8006838:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800683c:	460b      	mov	r3, r1
 800683e:	4313      	orrs	r3, r2
 8006840:	d011      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006846:	3308      	adds	r3, #8
 8006848:	2102      	movs	r1, #2
 800684a:	4618      	mov	r0, r3
 800684c:	f001 fa0a 	bl	8007c64 <RCCEx_PLL2_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006862:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	2100      	movs	r1, #0
 8006870:	6139      	str	r1, [r7, #16]
 8006872:	f003 0308 	and.w	r3, r3, #8
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800687c:	460b      	mov	r3, r1
 800687e:	4313      	orrs	r3, r2
 8006880:	d011      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006886:	3328      	adds	r3, #40	; 0x28
 8006888:	2100      	movs	r1, #0
 800688a:	4618      	mov	r0, r3
 800688c:	f001 fa9c 	bl	8007dc8 <RCCEx_PLL3_Config>
 8006890:	4603      	mov	r3, r0
 8006892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	2100      	movs	r1, #0
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	f003 0310 	and.w	r3, r3, #16
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80068bc:	460b      	mov	r3, r1
 80068be:	4313      	orrs	r3, r2
 80068c0:	d011      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c6:	3328      	adds	r3, #40	; 0x28
 80068c8:	2101      	movs	r1, #1
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 fa7c 	bl	8007dc8 <RCCEx_PLL3_Config>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80068d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80068e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	2100      	movs	r1, #0
 80068f0:	6039      	str	r1, [r7, #0]
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	607b      	str	r3, [r7, #4]
 80068f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068fc:	460b      	mov	r3, r1
 80068fe:	4313      	orrs	r3, r2
 8006900:	d011      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006906:	3328      	adds	r3, #40	; 0x28
 8006908:	2102      	movs	r1, #2
 800690a:	4618      	mov	r0, r3
 800690c:	f001 fa5c 	bl	8007dc8 <RCCEx_PLL3_Config>
 8006910:	4603      	mov	r3, r0
 8006912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006922:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006926:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e000      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
}
 8006934:	4618      	mov	r0, r3
 8006936:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800693a:	46bd      	mov	sp, r7
 800693c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006940:	58024400 	.word	0x58024400

08006944 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b090      	sub	sp, #64	; 0x40
 8006948:	af00      	add	r7, sp, #0
 800694a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800694e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006952:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006956:	430b      	orrs	r3, r1
 8006958:	f040 8094 	bne.w	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800695c:	4b9e      	ldr	r3, [pc, #632]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800695e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	2b04      	cmp	r3, #4
 800696a:	f200 8087 	bhi.w	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800696e:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006974:	08006989 	.word	0x08006989
 8006978:	080069b1 	.word	0x080069b1
 800697c:	080069d9 	.word	0x080069d9
 8006980:	08006a75 	.word	0x08006a75
 8006984:	08006a01 	.word	0x08006a01
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006988:	4b93      	ldr	r3, [pc, #588]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006994:	d108      	bne.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800699a:	4618      	mov	r0, r3
 800699c:	f001 f810 	bl	80079c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069a4:	f000 bd45 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ac:	f000 bd41 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069b0:	4b89      	ldr	r3, [pc, #548]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069bc:	d108      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069be:	f107 0318 	add.w	r3, r7, #24
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fd54 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069cc:	f000 bd31 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d4:	f000 bd2d 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069d8:	4b7f      	ldr	r3, [pc, #508]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069e4:	d108      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069e6:	f107 030c 	add.w	r3, r7, #12
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fe94 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069f4:	f000 bd1d 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fc:	f000 bd19 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a00:	4b75      	ldr	r3, [pc, #468]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a0a:	4b73      	ldr	r3, [pc, #460]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d10c      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d109      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a1c:	4b6e      	ldr	r3, [pc, #440]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	08db      	lsrs	r3, r3, #3
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	4a6d      	ldr	r2, [pc, #436]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a28:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a2e:	e01f      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a30:	4b69      	ldr	r3, [pc, #420]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3c:	d106      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a44:	d102      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a46:	4b66      	ldr	r3, [pc, #408]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a4a:	e011      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a4c:	4b62      	ldr	r3, [pc, #392]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a58:	d106      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a60:	d102      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a62:	4b60      	ldr	r3, [pc, #384]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a66:	e003      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a6c:	f000 bce1 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a70:	f000 bcdf 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a74:	4b5c      	ldr	r3, [pc, #368]	; (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a78:	f000 bcdb 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a80:	f000 bcd7 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006a84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a88:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	f040 80ad 	bne.w	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006a92:	4b51      	ldr	r3, [pc, #324]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a96:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006a9a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa2:	d056      	beq.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aaa:	f200 8090 	bhi.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	2bc0      	cmp	r3, #192	; 0xc0
 8006ab2:	f000 8088 	beq.w	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	2bc0      	cmp	r3, #192	; 0xc0
 8006aba:	f200 8088 	bhi.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	2b80      	cmp	r3, #128	; 0x80
 8006ac2:	d032      	beq.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	2b80      	cmp	r3, #128	; 0x80
 8006ac8:	f200 8081 	bhi.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	2b40      	cmp	r3, #64	; 0x40
 8006ad6:	d014      	beq.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006ad8:	e079      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ada:	4b3f      	ldr	r3, [pc, #252]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ae6:	d108      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 ff67 	bl	80079c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006af6:	f000 bc9c 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006afe:	f000 bc98 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b02:	4b35      	ldr	r3, [pc, #212]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b0e:	d108      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b10:	f107 0318 	add.w	r3, r7, #24
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 fcab 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b1e:	f000 bc88 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b26:	f000 bc84 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b2a:	4b2b      	ldr	r3, [pc, #172]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b36:	d108      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b38:	f107 030c 	add.w	r3, r7, #12
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fdeb 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b46:	f000 bc74 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b4e:	f000 bc70 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b52:	4b21      	ldr	r3, [pc, #132]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b5c:	4b1e      	ldr	r3, [pc, #120]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d10c      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b6e:	4b1a      	ldr	r3, [pc, #104]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	08db      	lsrs	r3, r3, #3
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	4a18      	ldr	r2, [pc, #96]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b80:	e01f      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b82:	4b15      	ldr	r3, [pc, #84]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8e:	d106      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b96:	d102      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b98:	4b11      	ldr	r3, [pc, #68]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b9c:	e011      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b9e:	4b0e      	ldr	r3, [pc, #56]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006baa:	d106      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb2:	d102      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bb4:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb8:	e003      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006bbe:	f000 bc38 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bc2:	f000 bc36 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006bc6:	4b08      	ldr	r3, [pc, #32]	; (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bca:	f000 bc32 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd2:	f000 bc2e 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bd6:	bf00      	nop
 8006bd8:	58024400 	.word	0x58024400
 8006bdc:	03d09000 	.word	0x03d09000
 8006be0:	003d0900 	.word	0x003d0900
 8006be4:	017d7840 	.word	0x017d7840
 8006be8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bf0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	f040 809c 	bne.w	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006bfa:	4b9e      	ldr	r3, [pc, #632]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006c02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c0a:	d054      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c12:	f200 808b 	bhi.w	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c1c:	f000 8083 	beq.w	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c26:	f200 8081 	bhi.w	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c30:	d02f      	beq.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c38:	d878      	bhi.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c46:	d012      	beq.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006c48:	e070      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c4a:	4b8a      	ldr	r3, [pc, #552]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c56:	d107      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 feaf 	bl	80079c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c66:	e3e4      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c6c:	e3e1      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c6e:	4b81      	ldr	r3, [pc, #516]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c7a:	d107      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c7c:	f107 0318 	add.w	r3, r7, #24
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fbf5 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c8a:	e3d2      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c90:	e3cf      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c92:	4b78      	ldr	r3, [pc, #480]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c9e:	d107      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ca0:	f107 030c 	add.w	r3, r7, #12
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 fd37 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cae:	e3c0      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cb4:	e3bd      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cb6:	4b6f      	ldr	r3, [pc, #444]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cbe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cc0:	4b6c      	ldr	r3, [pc, #432]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d10c      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cd2:	4b68      	ldr	r3, [pc, #416]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	08db      	lsrs	r3, r3, #3
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	4a66      	ldr	r2, [pc, #408]	; (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006cde:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce4:	e01e      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ce6:	4b63      	ldr	r3, [pc, #396]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf2:	d106      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cfa:	d102      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cfc:	4b5f      	ldr	r3, [pc, #380]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d00:	e010      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d02:	4b5c      	ldr	r3, [pc, #368]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d0e:	d106      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d16:	d102      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d18:	4b59      	ldr	r3, [pc, #356]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d1c:	e002      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d22:	e386      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d24:	e385      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d26:	4b57      	ldr	r3, [pc, #348]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006d28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d2a:	e382      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d30:	e37f      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d36:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006d3a:	430b      	orrs	r3, r1
 8006d3c:	f040 80a7 	bne.w	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006d40:	4b4c      	ldr	r3, [pc, #304]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d44:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006d48:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d50:	d055      	beq.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d58:	f200 8096 	bhi.w	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d62:	f000 8084 	beq.w	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d6c:	f200 808c 	bhi.w	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d76:	d030      	beq.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d7e:	f200 8083 	bhi.w	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d004      	beq.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d8e:	d012      	beq.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006d90:	e07a      	b.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d92:	4b38      	ldr	r3, [pc, #224]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d9e:	d107      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fe0b 	bl	80079c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dae:	e340      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006db4:	e33d      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006db6:	4b2f      	ldr	r3, [pc, #188]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dc2:	d107      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dc4:	f107 0318 	add.w	r3, r7, #24
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fb51 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dd2:	e32e      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dd8:	e32b      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dda:	4b26      	ldr	r3, [pc, #152]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006de6:	d107      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006de8:	f107 030c 	add.w	r3, r7, #12
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fc93 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006df6:	e31c      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dfc:	e319      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dfe:	4b1d      	ldr	r3, [pc, #116]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e08:	4b1a      	ldr	r3, [pc, #104]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d10c      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d109      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e1a:	4b16      	ldr	r3, [pc, #88]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	08db      	lsrs	r3, r3, #3
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	4a14      	ldr	r2, [pc, #80]	; (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006e26:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e2c:	e01e      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e2e:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3a:	d106      	bne.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e42:	d102      	bne.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e44:	4b0d      	ldr	r3, [pc, #52]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e48:	e010      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e4a:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e56:	d106      	bne.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e5e:	d102      	bne.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e60:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e64:	e002      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e6a:	e2e2      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e6c:	e2e1      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e72:	e2de      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e74:	58024400 	.word	0x58024400
 8006e78:	03d09000 	.word	0x03d09000
 8006e7c:	003d0900 	.word	0x003d0900
 8006e80:	017d7840 	.word	0x017d7840
 8006e84:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e8c:	e2d1      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e92:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006e96:	430b      	orrs	r3, r1
 8006e98:	f040 809c 	bne.w	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006e9c:	4b93      	ldr	r3, [pc, #588]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006ea4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eac:	d054      	beq.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb4:	f200 808b 	bhi.w	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ebe:	f000 8083 	beq.w	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ec8:	f200 8081 	bhi.w	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed2:	d02f      	beq.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eda:	d878      	bhi.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee8:	d012      	beq.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006eea:	e070      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006eec:	4b7f      	ldr	r3, [pc, #508]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ef8:	d107      	bne.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fd5e 	bl	80079c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f08:	e293      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f0e:	e290      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f10:	4b76      	ldr	r3, [pc, #472]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f1c:	d107      	bne.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f1e:	f107 0318 	add.w	r3, r7, #24
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 faa4 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f2c:	e281      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f32:	e27e      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f34:	4b6d      	ldr	r3, [pc, #436]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f40:	d107      	bne.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f42:	f107 030c 	add.w	r3, r7, #12
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fbe6 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f50:	e26f      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f56:	e26c      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f58:	4b64      	ldr	r3, [pc, #400]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f62:	4b62      	ldr	r3, [pc, #392]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d10c      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d109      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f74:	4b5d      	ldr	r3, [pc, #372]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	08db      	lsrs	r3, r3, #3
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	4a5c      	ldr	r2, [pc, #368]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006f80:	fa22 f303 	lsr.w	r3, r2, r3
 8006f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f86:	e01e      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f88:	4b58      	ldr	r3, [pc, #352]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f94:	d106      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f9c:	d102      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f9e:	4b55      	ldr	r3, [pc, #340]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fa2:	e010      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fa4:	4b51      	ldr	r3, [pc, #324]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb0:	d106      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fb8:	d102      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006fba:	4b4f      	ldr	r3, [pc, #316]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fbe:	e002      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006fc4:	e235      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fc6:	e234      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006fc8:	4b4c      	ldr	r3, [pc, #304]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fcc:	e231      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fd2:	e22e      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fd8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	f040 808f 	bne.w	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006fe2:	4b42      	ldr	r3, [pc, #264]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006fea:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ff2:	d06b      	beq.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ffa:	d874      	bhi.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007002:	d056      	beq.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800700a:	d86c      	bhi.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007012:	d03b      	beq.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007016:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800701a:	d864      	bhi.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007022:	d021      	beq.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800702a:	d85c      	bhi.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	2b00      	cmp	r3, #0
 8007030:	d004      	beq.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007038:	d004      	beq.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800703a:	e054      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800703c:	f7fe fa4c 	bl	80054d8 <HAL_RCC_GetPCLK1Freq>
 8007040:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007042:	e1f6      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007044:	4b29      	ldr	r3, [pc, #164]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800704c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007050:	d107      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007052:	f107 0318 	add.w	r3, r7, #24
 8007056:	4618      	mov	r0, r3
 8007058:	f000 fa0a 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007060:	e1e7      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007066:	e1e4      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007068:	4b20      	ldr	r3, [pc, #128]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007074:	d107      	bne.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007076:	f107 030c 	add.w	r3, r7, #12
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fb4c 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007084:	e1d5      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800708a:	e1d2      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800708c:	4b17      	ldr	r3, [pc, #92]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b04      	cmp	r3, #4
 8007096:	d109      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007098:	4b14      	ldr	r3, [pc, #80]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	08db      	lsrs	r3, r3, #3
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	4a13      	ldr	r2, [pc, #76]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80070a4:	fa22 f303 	lsr.w	r3, r2, r3
 80070a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070aa:	e1c2      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070b0:	e1bf      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80070b2:	4b0e      	ldr	r3, [pc, #56]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070be:	d102      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80070c0:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070c4:	e1b5      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ca:	e1b2      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070cc:	4b07      	ldr	r3, [pc, #28]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070d8:	d102      	bne.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80070da:	4b07      	ldr	r3, [pc, #28]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80070dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070de:	e1a8      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070e4:	e1a5      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ea:	e1a2      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070ec:	58024400 	.word	0x58024400
 80070f0:	03d09000 	.word	0x03d09000
 80070f4:	003d0900 	.word	0x003d0900
 80070f8:	017d7840 	.word	0x017d7840
 80070fc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007104:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007108:	430b      	orrs	r3, r1
 800710a:	d173      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800710c:	4b9c      	ldr	r3, [pc, #624]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800710e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007114:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800711c:	d02f      	beq.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007124:	d863      	bhi.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007132:	d012      	beq.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007134:	e05b      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007136:	4b92      	ldr	r3, [pc, #584]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800713e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007142:	d107      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007144:	f107 0318 	add.w	r3, r7, #24
 8007148:	4618      	mov	r0, r3
 800714a:	f000 f991 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007152:	e16e      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007158:	e16b      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800715a:	4b89      	ldr	r3, [pc, #548]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007166:	d107      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007168:	f107 030c 	add.w	r3, r7, #12
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fad3 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007176:	e15c      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800717c:	e159      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800717e:	4b80      	ldr	r3, [pc, #512]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007182:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007186:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007188:	4b7d      	ldr	r3, [pc, #500]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b04      	cmp	r3, #4
 8007192:	d10c      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	2b00      	cmp	r3, #0
 8007198:	d109      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800719a:	4b79      	ldr	r3, [pc, #484]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	08db      	lsrs	r3, r3, #3
 80071a0:	f003 0303 	and.w	r3, r3, #3
 80071a4:	4a77      	ldr	r2, [pc, #476]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80071a6:	fa22 f303 	lsr.w	r3, r2, r3
 80071aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ac:	e01e      	b.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071ae:	4b74      	ldr	r3, [pc, #464]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ba:	d106      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80071bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071c2:	d102      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80071c4:	4b70      	ldr	r3, [pc, #448]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071c8:	e010      	b.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071ca:	4b6d      	ldr	r3, [pc, #436]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071d6:	d106      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80071d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071de:	d102      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071e0:	4b6a      	ldr	r3, [pc, #424]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80071e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071e4:	e002      	b.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80071ea:	e122      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071ec:	e121      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071f2:	e11e      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80071f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80071fc:	430b      	orrs	r3, r1
 80071fe:	d133      	bne.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007200:	4b5f      	ldr	r3, [pc, #380]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007208:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007216:	d012      	beq.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007218:	e023      	b.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800721a:	4b59      	ldr	r3, [pc, #356]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007226:	d107      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fbc7 	bl	80079c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007236:	e0fc      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800723c:	e0f9      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800723e:	4b50      	ldr	r3, [pc, #320]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800724a:	d107      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800724c:	f107 0318 	add.w	r3, r7, #24
 8007250:	4618      	mov	r0, r3
 8007252:	f000 f90d 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800725a:	e0ea      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007260:	e0e7      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007266:	e0e4      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800726c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007270:	430b      	orrs	r3, r1
 8007272:	f040 808d 	bne.w	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007276:	4b42      	ldr	r3, [pc, #264]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800727e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007286:	d06b      	beq.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800728e:	d874      	bhi.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007296:	d056      	beq.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729e:	d86c      	bhi.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072a6:	d03b      	beq.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80072a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072ae:	d864      	bhi.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b6:	d021      	beq.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072be:	d85c      	bhi.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072cc:	d004      	beq.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80072ce:	e054      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80072d0:	f000 f8b8 	bl	8007444 <HAL_RCCEx_GetD3PCLK1Freq>
 80072d4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80072d6:	e0ac      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072d8:	4b29      	ldr	r3, [pc, #164]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072e4:	d107      	bne.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072e6:	f107 0318 	add.w	r3, r7, #24
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 f8c0 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072f4:	e09d      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072fa:	e09a      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072fc:	4b20      	ldr	r3, [pc, #128]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007308:	d107      	bne.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800730a:	f107 030c 	add.w	r3, r7, #12
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fa02 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007318:	e08b      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800731a:	2300      	movs	r3, #0
 800731c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800731e:	e088      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007320:	4b17      	ldr	r3, [pc, #92]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	2b04      	cmp	r3, #4
 800732a:	d109      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800732c:	4b14      	ldr	r3, [pc, #80]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	08db      	lsrs	r3, r3, #3
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	4a13      	ldr	r2, [pc, #76]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007338:	fa22 f303 	lsr.w	r3, r2, r3
 800733c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800733e:	e078      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007344:	e075      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007346:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800734e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007352:	d102      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007354:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007356:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007358:	e06b      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800735e:	e068      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800736c:	d102      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800736e:	4b07      	ldr	r3, [pc, #28]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007370:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007372:	e05e      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007378:	e05b      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800737e:	e058      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007380:	58024400 	.word	0x58024400
 8007384:	03d09000 	.word	0x03d09000
 8007388:	003d0900 	.word	0x003d0900
 800738c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007394:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007398:	430b      	orrs	r3, r1
 800739a:	d148      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800739c:	4b27      	ldr	r3, [pc, #156]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800739e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ac:	d02a      	beq.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80073ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b4:	d838      	bhi.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073c2:	d00d      	beq.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80073c4:	e030      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80073c6:	4b1d      	ldr	r3, [pc, #116]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073d2:	d102      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80073d4:	4b1a      	ldr	r3, [pc, #104]	; (8007440 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80073d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073d8:	e02b      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073de:	e028      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073e0:	4b16      	ldr	r3, [pc, #88]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073ec:	d107      	bne.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fae4 	bl	80079c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073fc:	e019      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007402:	e016      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007404:	4b0d      	ldr	r3, [pc, #52]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800740c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007410:	d107      	bne.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007412:	f107 0318 	add.w	r3, r7, #24
 8007416:	4618      	mov	r0, r3
 8007418:	f000 f82a 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007420:	e007      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007426:	e004      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800742c:	e001      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007434:	4618      	mov	r0, r3
 8007436:	3740      	adds	r7, #64	; 0x40
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	58024400 	.word	0x58024400
 8007440:	017d7840 	.word	0x017d7840

08007444 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007448:	f7fe f816 	bl	8005478 <HAL_RCC_GetHCLKFreq>
 800744c:	4602      	mov	r2, r0
 800744e:	4b06      	ldr	r3, [pc, #24]	; (8007468 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	091b      	lsrs	r3, r3, #4
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	4904      	ldr	r1, [pc, #16]	; (800746c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800745a:	5ccb      	ldrb	r3, [r1, r3]
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007464:	4618      	mov	r0, r3
 8007466:	bd80      	pop	{r7, pc}
 8007468:	58024400 	.word	0x58024400
 800746c:	0800b12c 	.word	0x0800b12c

08007470 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007470:	b480      	push	{r7}
 8007472:	b089      	sub	sp, #36	; 0x24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007478:	4ba1      	ldr	r3, [pc, #644]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007482:	4b9f      	ldr	r3, [pc, #636]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	0b1b      	lsrs	r3, r3, #12
 8007488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800748c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800748e:	4b9c      	ldr	r3, [pc, #624]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007492:	091b      	lsrs	r3, r3, #4
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800749a:	4b99      	ldr	r3, [pc, #612]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800749c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749e:	08db      	lsrs	r3, r3, #3
 80074a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	fb02 f303 	mul.w	r3, r2, r3
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 8111 	beq.w	80076e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	f000 8083 	beq.w	80075cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	f200 80a1 	bhi.w	8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d056      	beq.n	8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80074da:	e099      	b.n	8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074dc:	4b88      	ldr	r3, [pc, #544]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d02d      	beq.n	8007544 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074e8:	4b85      	ldr	r3, [pc, #532]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	08db      	lsrs	r3, r3, #3
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	4a84      	ldr	r2, [pc, #528]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80074f4:	fa22 f303 	lsr.w	r3, r2, r3
 80074f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	ee07 3a90 	vmov	s15, r3
 8007500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007512:	4b7b      	ldr	r3, [pc, #492]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007522:	ed97 6a03 	vldr	s12, [r7, #12]
 8007526:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800752a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007542:	e087      	b.n	8007654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800770c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007556:	4b6a      	ldr	r3, [pc, #424]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007566:	ed97 6a03 	vldr	s12, [r7, #12]
 800756a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800756e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007586:	e065      	b.n	8007654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007592:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759a:	4b59      	ldr	r3, [pc, #356]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ca:	e043      	b.n	8007654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80075da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075de:	4b48      	ldr	r3, [pc, #288]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80075f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800760e:	e021      	b.n	8007654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800761e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007622:	4b37      	ldr	r3, [pc, #220]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007632:	ed97 6a03 	vldr	s12, [r7, #12]
 8007636:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800763a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007652:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007654:	4b2a      	ldr	r3, [pc, #168]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	0a5b      	lsrs	r3, r3, #9
 800765a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800766a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800766e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800767a:	ee17 2a90 	vmov	r2, s15
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007682:	4b1f      	ldr	r3, [pc, #124]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	0c1b      	lsrs	r3, r3, #16
 8007688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800768c:	ee07 3a90 	vmov	s15, r3
 8007690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007698:	ee37 7a87 	vadd.f32	s14, s15, s14
 800769c:	edd7 6a07 	vldr	s13, [r7, #28]
 80076a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076a8:	ee17 2a90 	vmov	r2, s15
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80076b0:	4b13      	ldr	r3, [pc, #76]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	0e1b      	lsrs	r3, r3, #24
 80076b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076d6:	ee17 2a90 	vmov	r2, s15
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80076de:	e008      	b.n	80076f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	609a      	str	r2, [r3, #8]
}
 80076f2:	bf00      	nop
 80076f4:	3724      	adds	r7, #36	; 0x24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	58024400 	.word	0x58024400
 8007704:	03d09000 	.word	0x03d09000
 8007708:	46000000 	.word	0x46000000
 800770c:	4c742400 	.word	0x4c742400
 8007710:	4a742400 	.word	0x4a742400
 8007714:	4bbebc20 	.word	0x4bbebc20

08007718 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007718:	b480      	push	{r7}
 800771a:	b089      	sub	sp, #36	; 0x24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007720:	4ba1      	ldr	r3, [pc, #644]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007724:	f003 0303 	and.w	r3, r3, #3
 8007728:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800772a:	4b9f      	ldr	r3, [pc, #636]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800772c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772e:	0d1b      	lsrs	r3, r3, #20
 8007730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007734:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007736:	4b9c      	ldr	r3, [pc, #624]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773a:	0a1b      	lsrs	r3, r3, #8
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007742:	4b99      	ldr	r3, [pc, #612]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007746:	08db      	lsrs	r3, r3, #3
 8007748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	fb02 f303 	mul.w	r3, r2, r3
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 8111 	beq.w	8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	2b02      	cmp	r3, #2
 800776a:	f000 8083 	beq.w	8007874 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	2b02      	cmp	r3, #2
 8007772:	f200 80a1 	bhi.w	80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d056      	beq.n	8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007782:	e099      	b.n	80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007784:	4b88      	ldr	r3, [pc, #544]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b00      	cmp	r3, #0
 800778e:	d02d      	beq.n	80077ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007790:	4b85      	ldr	r3, [pc, #532]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	08db      	lsrs	r3, r3, #3
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	4a84      	ldr	r2, [pc, #528]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800779c:	fa22 f303 	lsr.w	r3, r2, r3
 80077a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	ee07 3a90 	vmov	s15, r3
 80077a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ba:	4b7b      	ldr	r3, [pc, #492]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c2:	ee07 3a90 	vmov	s15, r3
 80077c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80079b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80077ea:	e087      	b.n	80078fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80079b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80077fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fe:	4b6a      	ldr	r3, [pc, #424]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007812:	eddf 5a67 	vldr	s11, [pc, #412]	; 80079b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800781a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800782e:	e065      	b.n	80078fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800783e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007842:	4b59      	ldr	r3, [pc, #356]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007852:	ed97 6a03 	vldr	s12, [r7, #12]
 8007856:	eddf 5a56 	vldr	s11, [pc, #344]	; 80079b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800785a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007872:	e043      	b.n	80078fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80079bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007886:	4b48      	ldr	r3, [pc, #288]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007896:	ed97 6a03 	vldr	s12, [r7, #12]
 800789a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80079b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800789e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078b6:	e021      	b.n	80078fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	ee07 3a90 	vmov	s15, r3
 80078be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ca:	4b37      	ldr	r3, [pc, #220]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078da:	ed97 6a03 	vldr	s12, [r7, #12]
 80078de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80079b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80078fc:	4b2a      	ldr	r3, [pc, #168]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	0a5b      	lsrs	r3, r3, #9
 8007902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007912:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007916:	edd7 6a07 	vldr	s13, [r7, #28]
 800791a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800791e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007922:	ee17 2a90 	vmov	r2, s15
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800792a:	4b1f      	ldr	r3, [pc, #124]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	0c1b      	lsrs	r3, r3, #16
 8007930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007934:	ee07 3a90 	vmov	s15, r3
 8007938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007940:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007944:	edd7 6a07 	vldr	s13, [r7, #28]
 8007948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800794c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007950:	ee17 2a90 	vmov	r2, s15
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007958:	4b13      	ldr	r3, [pc, #76]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795c:	0e1b      	lsrs	r3, r3, #24
 800795e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800796e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007972:	edd7 6a07 	vldr	s13, [r7, #28]
 8007976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800797a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800797e:	ee17 2a90 	vmov	r2, s15
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007986:	e008      	b.n	800799a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	609a      	str	r2, [r3, #8]
}
 800799a:	bf00      	nop
 800799c:	3724      	adds	r7, #36	; 0x24
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	58024400 	.word	0x58024400
 80079ac:	03d09000 	.word	0x03d09000
 80079b0:	46000000 	.word	0x46000000
 80079b4:	4c742400 	.word	0x4c742400
 80079b8:	4a742400 	.word	0x4a742400
 80079bc:	4bbebc20 	.word	0x4bbebc20

080079c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b089      	sub	sp, #36	; 0x24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079c8:	4ba0      	ldr	r3, [pc, #640]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079cc:	f003 0303 	and.w	r3, r3, #3
 80079d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80079d2:	4b9e      	ldr	r3, [pc, #632]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d6:	091b      	lsrs	r3, r3, #4
 80079d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80079de:	4b9b      	ldr	r3, [pc, #620]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80079e8:	4b98      	ldr	r3, [pc, #608]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ec:	08db      	lsrs	r3, r3, #3
 80079ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	fb02 f303 	mul.w	r3, r2, r3
 80079f8:	ee07 3a90 	vmov	s15, r3
 80079fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a00:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 8111 	beq.w	8007c2e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	f000 8083 	beq.w	8007b1a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	f200 80a1 	bhi.w	8007b5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d056      	beq.n	8007ad6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007a28:	e099      	b.n	8007b5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a2a:	4b88      	ldr	r3, [pc, #544]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d02d      	beq.n	8007a92 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a36:	4b85      	ldr	r3, [pc, #532]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	08db      	lsrs	r3, r3, #3
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	4a83      	ldr	r2, [pc, #524]	; (8007c50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007a42:	fa22 f303 	lsr.w	r3, r2, r3
 8007a46:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	ee07 3a90 	vmov	s15, r3
 8007a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	ee07 3a90 	vmov	s15, r3
 8007a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a60:	4b7a      	ldr	r3, [pc, #488]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a68:	ee07 3a90 	vmov	s15, r3
 8007a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a70:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a74:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007c54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a90:	e087      	b.n	8007ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	ee07 3a90 	vmov	s15, r3
 8007a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007c58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007aa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa4:	4b69      	ldr	r3, [pc, #420]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aac:	ee07 3a90 	vmov	s15, r3
 8007ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ab8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007c54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007abc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ad4:	e065      	b.n	8007ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	ee07 3a90 	vmov	s15, r3
 8007adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007ae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae8:	4b58      	ldr	r3, [pc, #352]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af0:	ee07 3a90 	vmov	s15, r3
 8007af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007afc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007c54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b18:	e043      	b.n	8007ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	ee07 3a90 	vmov	s15, r3
 8007b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b24:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007c60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007b28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b2c:	4b47      	ldr	r3, [pc, #284]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b34:	ee07 3a90 	vmov	s15, r3
 8007b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b40:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007c54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b5c:	e021      	b.n	8007ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	ee07 3a90 	vmov	s15, r3
 8007b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b68:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007c58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007b6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b70:	4b36      	ldr	r3, [pc, #216]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b78:	ee07 3a90 	vmov	s15, r3
 8007b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b80:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b84:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007c54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ba0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007ba2:	4b2a      	ldr	r3, [pc, #168]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba6:	0a5b      	lsrs	r3, r3, #9
 8007ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bac:	ee07 3a90 	vmov	s15, r3
 8007bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc8:	ee17 2a90 	vmov	r2, s15
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007bd0:	4b1e      	ldr	r3, [pc, #120]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd4:	0c1b      	lsrs	r3, r3, #16
 8007bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bf6:	ee17 2a90 	vmov	r2, s15
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007bfe:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c02:	0e1b      	lsrs	r3, r3, #24
 8007c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c08:	ee07 3a90 	vmov	s15, r3
 8007c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c24:	ee17 2a90 	vmov	r2, s15
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007c2c:	e008      	b.n	8007c40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	609a      	str	r2, [r3, #8]
}
 8007c40:	bf00      	nop
 8007c42:	3724      	adds	r7, #36	; 0x24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	58024400 	.word	0x58024400
 8007c50:	03d09000 	.word	0x03d09000
 8007c54:	46000000 	.word	0x46000000
 8007c58:	4c742400 	.word	0x4c742400
 8007c5c:	4a742400 	.word	0x4a742400
 8007c60:	4bbebc20 	.word	0x4bbebc20

08007c64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c72:	4b53      	ldr	r3, [pc, #332]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d101      	bne.n	8007c82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e099      	b.n	8007db6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c82:	4b4f      	ldr	r3, [pc, #316]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a4e      	ldr	r2, [pc, #312]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007c88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c8e:	f7fa f81d 	bl	8001ccc <HAL_GetTick>
 8007c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c94:	e008      	b.n	8007ca8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c96:	f7fa f819 	bl	8001ccc <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d901      	bls.n	8007ca8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e086      	b.n	8007db6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ca8:	4b45      	ldr	r3, [pc, #276]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1f0      	bne.n	8007c96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007cb4:	4b42      	ldr	r3, [pc, #264]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	031b      	lsls	r3, r3, #12
 8007cc2:	493f      	ldr	r1, [pc, #252]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	628b      	str	r3, [r1, #40]	; 0x28
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	025b      	lsls	r3, r3, #9
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	041b      	lsls	r3, r3, #16
 8007ce6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007cea:	431a      	orrs	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	061b      	lsls	r3, r3, #24
 8007cf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007cf8:	4931      	ldr	r1, [pc, #196]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007cfe:	4b30      	ldr	r3, [pc, #192]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	492d      	ldr	r1, [pc, #180]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d10:	4b2b      	ldr	r3, [pc, #172]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	f023 0220 	bic.w	r2, r3, #32
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	4928      	ldr	r1, [pc, #160]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007d22:	4b27      	ldr	r3, [pc, #156]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	4a26      	ldr	r2, [pc, #152]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d28:	f023 0310 	bic.w	r3, r3, #16
 8007d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d2e:	4b24      	ldr	r3, [pc, #144]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d32:	4b24      	ldr	r3, [pc, #144]	; (8007dc4 <RCCEx_PLL2_Config+0x160>)
 8007d34:	4013      	ands	r3, r2
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	69d2      	ldr	r2, [r2, #28]
 8007d3a:	00d2      	lsls	r2, r2, #3
 8007d3c:	4920      	ldr	r1, [pc, #128]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007d42:	4b1f      	ldr	r3, [pc, #124]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d46:	4a1e      	ldr	r2, [pc, #120]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d48:	f043 0310 	orr.w	r3, r3, #16
 8007d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d106      	bne.n	8007d62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007d54:	4b1a      	ldr	r3, [pc, #104]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	4a19      	ldr	r2, [pc, #100]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d60:	e00f      	b.n	8007d82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d106      	bne.n	8007d76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d68:	4b15      	ldr	r3, [pc, #84]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	4a14      	ldr	r2, [pc, #80]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d74:	e005      	b.n	8007d82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d76:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	4a11      	ldr	r2, [pc, #68]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d82:	4b0f      	ldr	r3, [pc, #60]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a0e      	ldr	r2, [pc, #56]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d8e:	f7f9 ff9d 	bl	8001ccc <HAL_GetTick>
 8007d92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d94:	e008      	b.n	8007da8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d96:	f7f9 ff99 	bl	8001ccc <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d901      	bls.n	8007da8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e006      	b.n	8007db6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007da8:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0f0      	beq.n	8007d96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	58024400 	.word	0x58024400
 8007dc4:	ffff0007 	.word	0xffff0007

08007dc8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007dd6:	4b53      	ldr	r3, [pc, #332]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dda:	f003 0303 	and.w	r3, r3, #3
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d101      	bne.n	8007de6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e099      	b.n	8007f1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007de6:	4b4f      	ldr	r3, [pc, #316]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a4e      	ldr	r2, [pc, #312]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007df2:	f7f9 ff6b 	bl	8001ccc <HAL_GetTick>
 8007df6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007df8:	e008      	b.n	8007e0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007dfa:	f7f9 ff67 	bl	8001ccc <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d901      	bls.n	8007e0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e086      	b.n	8007f1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e0c:	4b45      	ldr	r3, [pc, #276]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1f0      	bne.n	8007dfa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007e18:	4b42      	ldr	r3, [pc, #264]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	051b      	lsls	r3, r3, #20
 8007e26:	493f      	ldr	r1, [pc, #252]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	628b      	str	r3, [r1, #40]	; 0x28
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	025b      	lsls	r3, r3, #9
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	431a      	orrs	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	041b      	lsls	r3, r3, #16
 8007e4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	061b      	lsls	r3, r3, #24
 8007e58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e5c:	4931      	ldr	r1, [pc, #196]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e62:	4b30      	ldr	r3, [pc, #192]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	492d      	ldr	r1, [pc, #180]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e74:	4b2b      	ldr	r3, [pc, #172]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	4928      	ldr	r1, [pc, #160]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e86:	4b27      	ldr	r3, [pc, #156]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8a:	4a26      	ldr	r2, [pc, #152]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e92:	4b24      	ldr	r3, [pc, #144]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e96:	4b24      	ldr	r3, [pc, #144]	; (8007f28 <RCCEx_PLL3_Config+0x160>)
 8007e98:	4013      	ands	r3, r2
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	69d2      	ldr	r2, [r2, #28]
 8007e9e:	00d2      	lsls	r2, r2, #3
 8007ea0:	4920      	ldr	r1, [pc, #128]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007ea6:	4b1f      	ldr	r3, [pc, #124]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eaa:	4a1e      	ldr	r2, [pc, #120]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d106      	bne.n	8007ec6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007eb8:	4b1a      	ldr	r3, [pc, #104]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	4a19      	ldr	r2, [pc, #100]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007ebe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ec2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ec4:	e00f      	b.n	8007ee6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d106      	bne.n	8007eda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ecc:	4b15      	ldr	r3, [pc, #84]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	4a14      	ldr	r2, [pc, #80]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007ed2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ed8:	e005      	b.n	8007ee6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007eda:	4b12      	ldr	r3, [pc, #72]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ede:	4a11      	ldr	r2, [pc, #68]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007ee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ee4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007ee6:	4b0f      	ldr	r3, [pc, #60]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a0e      	ldr	r2, [pc, #56]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ef2:	f7f9 feeb 	bl	8001ccc <HAL_GetTick>
 8007ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ef8:	e008      	b.n	8007f0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007efa:	f7f9 fee7 	bl	8001ccc <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d901      	bls.n	8007f0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e006      	b.n	8007f1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f0c:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0f0      	beq.n	8007efa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	58024400 	.word	0x58024400
 8007f28:	ffff0007 	.word	0xffff0007

08007f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e049      	b.n	8007fd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d106      	bne.n	8007f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7f9 fc5c 	bl	8001810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3304      	adds	r3, #4
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	f000 fea6 	bl	8008cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b082      	sub	sp, #8
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e049      	b.n	8008080 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d106      	bne.n	8008006 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f841 	bl	8008088 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2202      	movs	r2, #2
 800800a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3304      	adds	r3, #4
 8008016:	4619      	mov	r1, r3
 8008018:	4610      	mov	r0, r2
 800801a:	f000 fe4f 	bl	8008cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2200      	movs	r2, #0
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f001 fa1e 	bl	80094f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a3e      	ldr	r2, [pc, #248]	; (80081b4 <HAL_TIM_PWM_Stop+0x118>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d013      	beq.n	80080e6 <HAL_TIM_PWM_Stop+0x4a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a3d      	ldr	r2, [pc, #244]	; (80081b8 <HAL_TIM_PWM_Stop+0x11c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d00e      	beq.n	80080e6 <HAL_TIM_PWM_Stop+0x4a>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a3b      	ldr	r2, [pc, #236]	; (80081bc <HAL_TIM_PWM_Stop+0x120>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d009      	beq.n	80080e6 <HAL_TIM_PWM_Stop+0x4a>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a3a      	ldr	r2, [pc, #232]	; (80081c0 <HAL_TIM_PWM_Stop+0x124>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d004      	beq.n	80080e6 <HAL_TIM_PWM_Stop+0x4a>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a38      	ldr	r2, [pc, #224]	; (80081c4 <HAL_TIM_PWM_Stop+0x128>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d101      	bne.n	80080ea <HAL_TIM_PWM_Stop+0x4e>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e000      	b.n	80080ec <HAL_TIM_PWM_Stop+0x50>
 80080ea:	2300      	movs	r3, #0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d017      	beq.n	8008120 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6a1a      	ldr	r2, [r3, #32]
 80080f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80080fa:	4013      	ands	r3, r2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10f      	bne.n	8008120 <HAL_TIM_PWM_Stop+0x84>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6a1a      	ldr	r2, [r3, #32]
 8008106:	f240 4344 	movw	r3, #1092	; 0x444
 800810a:	4013      	ands	r3, r2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d107      	bne.n	8008120 <HAL_TIM_PWM_Stop+0x84>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800811e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6a1a      	ldr	r2, [r3, #32]
 8008126:	f241 1311 	movw	r3, #4369	; 0x1111
 800812a:	4013      	ands	r3, r2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10f      	bne.n	8008150 <HAL_TIM_PWM_Stop+0xb4>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6a1a      	ldr	r2, [r3, #32]
 8008136:	f240 4344 	movw	r3, #1092	; 0x444
 800813a:	4013      	ands	r3, r2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d107      	bne.n	8008150 <HAL_TIM_PWM_Stop+0xb4>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 0201 	bic.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d104      	bne.n	8008160 <HAL_TIM_PWM_Stop+0xc4>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800815e:	e023      	b.n	80081a8 <HAL_TIM_PWM_Stop+0x10c>
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	2b04      	cmp	r3, #4
 8008164:	d104      	bne.n	8008170 <HAL_TIM_PWM_Stop+0xd4>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800816e:	e01b      	b.n	80081a8 <HAL_TIM_PWM_Stop+0x10c>
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b08      	cmp	r3, #8
 8008174:	d104      	bne.n	8008180 <HAL_TIM_PWM_Stop+0xe4>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800817e:	e013      	b.n	80081a8 <HAL_TIM_PWM_Stop+0x10c>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b0c      	cmp	r3, #12
 8008184:	d104      	bne.n	8008190 <HAL_TIM_PWM_Stop+0xf4>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800818e:	e00b      	b.n	80081a8 <HAL_TIM_PWM_Stop+0x10c>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b10      	cmp	r3, #16
 8008194:	d104      	bne.n	80081a0 <HAL_TIM_PWM_Stop+0x104>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800819e:	e003      	b.n	80081a8 <HAL_TIM_PWM_Stop+0x10c>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	40010000 	.word	0x40010000
 80081b8:	40010400 	.word	0x40010400
 80081bc:	40014000 	.word	0x40014000
 80081c0:	40014400 	.word	0x40014400
 80081c4:	40014800 	.word	0x40014800

080081c8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d109      	bne.n	80081f0 <HAL_TIM_PWM_Start_IT+0x28>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	bf14      	ite	ne
 80081e8:	2301      	movne	r3, #1
 80081ea:	2300      	moveq	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	e03c      	b.n	800826a <HAL_TIM_PWM_Start_IT+0xa2>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	d109      	bne.n	800820a <HAL_TIM_PWM_Start_IT+0x42>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b01      	cmp	r3, #1
 8008200:	bf14      	ite	ne
 8008202:	2301      	movne	r3, #1
 8008204:	2300      	moveq	r3, #0
 8008206:	b2db      	uxtb	r3, r3
 8008208:	e02f      	b.n	800826a <HAL_TIM_PWM_Start_IT+0xa2>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b08      	cmp	r3, #8
 800820e:	d109      	bne.n	8008224 <HAL_TIM_PWM_Start_IT+0x5c>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b01      	cmp	r3, #1
 800821a:	bf14      	ite	ne
 800821c:	2301      	movne	r3, #1
 800821e:	2300      	moveq	r3, #0
 8008220:	b2db      	uxtb	r3, r3
 8008222:	e022      	b.n	800826a <HAL_TIM_PWM_Start_IT+0xa2>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b0c      	cmp	r3, #12
 8008228:	d109      	bne.n	800823e <HAL_TIM_PWM_Start_IT+0x76>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b01      	cmp	r3, #1
 8008234:	bf14      	ite	ne
 8008236:	2301      	movne	r3, #1
 8008238:	2300      	moveq	r3, #0
 800823a:	b2db      	uxtb	r3, r3
 800823c:	e015      	b.n	800826a <HAL_TIM_PWM_Start_IT+0xa2>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b10      	cmp	r3, #16
 8008242:	d109      	bne.n	8008258 <HAL_TIM_PWM_Start_IT+0x90>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b01      	cmp	r3, #1
 800824e:	bf14      	ite	ne
 8008250:	2301      	movne	r3, #1
 8008252:	2300      	moveq	r3, #0
 8008254:	b2db      	uxtb	r3, r3
 8008256:	e008      	b.n	800826a <HAL_TIM_PWM_Start_IT+0xa2>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b01      	cmp	r3, #1
 8008262:	bf14      	ite	ne
 8008264:	2301      	movne	r3, #1
 8008266:	2300      	moveq	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e0ec      	b.n	800844c <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d104      	bne.n	8008282 <HAL_TIM_PWM_Start_IT+0xba>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008280:	e023      	b.n	80082ca <HAL_TIM_PWM_Start_IT+0x102>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b04      	cmp	r3, #4
 8008286:	d104      	bne.n	8008292 <HAL_TIM_PWM_Start_IT+0xca>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008290:	e01b      	b.n	80082ca <HAL_TIM_PWM_Start_IT+0x102>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b08      	cmp	r3, #8
 8008296:	d104      	bne.n	80082a2 <HAL_TIM_PWM_Start_IT+0xda>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082a0:	e013      	b.n	80082ca <HAL_TIM_PWM_Start_IT+0x102>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b0c      	cmp	r3, #12
 80082a6:	d104      	bne.n	80082b2 <HAL_TIM_PWM_Start_IT+0xea>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082b0:	e00b      	b.n	80082ca <HAL_TIM_PWM_Start_IT+0x102>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b10      	cmp	r3, #16
 80082b6:	d104      	bne.n	80082c2 <HAL_TIM_PWM_Start_IT+0xfa>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2202      	movs	r2, #2
 80082bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082c0:	e003      	b.n	80082ca <HAL_TIM_PWM_Start_IT+0x102>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2202      	movs	r2, #2
 80082c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b0c      	cmp	r3, #12
 80082ce:	d841      	bhi.n	8008354 <HAL_TIM_PWM_Start_IT+0x18c>
 80082d0:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <HAL_TIM_PWM_Start_IT+0x110>)
 80082d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d6:	bf00      	nop
 80082d8:	0800830d 	.word	0x0800830d
 80082dc:	08008355 	.word	0x08008355
 80082e0:	08008355 	.word	0x08008355
 80082e4:	08008355 	.word	0x08008355
 80082e8:	0800831f 	.word	0x0800831f
 80082ec:	08008355 	.word	0x08008355
 80082f0:	08008355 	.word	0x08008355
 80082f4:	08008355 	.word	0x08008355
 80082f8:	08008331 	.word	0x08008331
 80082fc:	08008355 	.word	0x08008355
 8008300:	08008355 	.word	0x08008355
 8008304:	08008355 	.word	0x08008355
 8008308:	08008343 	.word	0x08008343
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0202 	orr.w	r2, r2, #2
 800831a:	60da      	str	r2, [r3, #12]
      break;
 800831c:	e01d      	b.n	800835a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f042 0204 	orr.w	r2, r2, #4
 800832c:	60da      	str	r2, [r3, #12]
      break;
 800832e:	e014      	b.n	800835a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0208 	orr.w	r2, r2, #8
 800833e:	60da      	str	r2, [r3, #12]
      break;
 8008340:	e00b      	b.n	800835a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f042 0210 	orr.w	r2, r2, #16
 8008350:	60da      	str	r2, [r3, #12]
      break;
 8008352:	e002      	b.n	800835a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	73fb      	strb	r3, [r7, #15]
      break;
 8008358:	bf00      	nop
  }

  if (status == HAL_OK)
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d174      	bne.n	800844a <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2201      	movs	r2, #1
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	4618      	mov	r0, r3
 800836a:	f001 f8c1 	bl	80094f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a38      	ldr	r2, [pc, #224]	; (8008454 <HAL_TIM_PWM_Start_IT+0x28c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d013      	beq.n	80083a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a36      	ldr	r2, [pc, #216]	; (8008458 <HAL_TIM_PWM_Start_IT+0x290>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d00e      	beq.n	80083a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a35      	ldr	r2, [pc, #212]	; (800845c <HAL_TIM_PWM_Start_IT+0x294>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d009      	beq.n	80083a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a33      	ldr	r2, [pc, #204]	; (8008460 <HAL_TIM_PWM_Start_IT+0x298>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d004      	beq.n	80083a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a32      	ldr	r2, [pc, #200]	; (8008464 <HAL_TIM_PWM_Start_IT+0x29c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d101      	bne.n	80083a4 <HAL_TIM_PWM_Start_IT+0x1dc>
 80083a0:	2301      	movs	r3, #1
 80083a2:	e000      	b.n	80083a6 <HAL_TIM_PWM_Start_IT+0x1de>
 80083a4:	2300      	movs	r3, #0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d007      	beq.n	80083ba <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a25      	ldr	r2, [pc, #148]	; (8008454 <HAL_TIM_PWM_Start_IT+0x28c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d022      	beq.n	800840a <HAL_TIM_PWM_Start_IT+0x242>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083cc:	d01d      	beq.n	800840a <HAL_TIM_PWM_Start_IT+0x242>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a25      	ldr	r2, [pc, #148]	; (8008468 <HAL_TIM_PWM_Start_IT+0x2a0>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d018      	beq.n	800840a <HAL_TIM_PWM_Start_IT+0x242>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a23      	ldr	r2, [pc, #140]	; (800846c <HAL_TIM_PWM_Start_IT+0x2a4>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d013      	beq.n	800840a <HAL_TIM_PWM_Start_IT+0x242>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a22      	ldr	r2, [pc, #136]	; (8008470 <HAL_TIM_PWM_Start_IT+0x2a8>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d00e      	beq.n	800840a <HAL_TIM_PWM_Start_IT+0x242>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a19      	ldr	r2, [pc, #100]	; (8008458 <HAL_TIM_PWM_Start_IT+0x290>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d009      	beq.n	800840a <HAL_TIM_PWM_Start_IT+0x242>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a1e      	ldr	r2, [pc, #120]	; (8008474 <HAL_TIM_PWM_Start_IT+0x2ac>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d004      	beq.n	800840a <HAL_TIM_PWM_Start_IT+0x242>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a15      	ldr	r2, [pc, #84]	; (800845c <HAL_TIM_PWM_Start_IT+0x294>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d115      	bne.n	8008436 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	4b19      	ldr	r3, [pc, #100]	; (8008478 <HAL_TIM_PWM_Start_IT+0x2b0>)
 8008412:	4013      	ands	r3, r2
 8008414:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b06      	cmp	r3, #6
 800841a:	d015      	beq.n	8008448 <HAL_TIM_PWM_Start_IT+0x280>
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008422:	d011      	beq.n	8008448 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f042 0201 	orr.w	r2, r2, #1
 8008432:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008434:	e008      	b.n	8008448 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f042 0201 	orr.w	r2, r2, #1
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	e000      	b.n	800844a <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008448:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800844a:	7bfb      	ldrb	r3, [r7, #15]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	40010000 	.word	0x40010000
 8008458:	40010400 	.word	0x40010400
 800845c:	40014000 	.word	0x40014000
 8008460:	40014400 	.word	0x40014400
 8008464:	40014800 	.word	0x40014800
 8008468:	40000400 	.word	0x40000400
 800846c:	40000800 	.word	0x40000800
 8008470:	40000c00 	.word	0x40000c00
 8008474:	40001800 	.word	0x40001800
 8008478:	00010007 	.word	0x00010007

0800847c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b0c      	cmp	r3, #12
 800848e:	d841      	bhi.n	8008514 <HAL_TIM_PWM_Stop_IT+0x98>
 8008490:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8008492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008496:	bf00      	nop
 8008498:	080084cd 	.word	0x080084cd
 800849c:	08008515 	.word	0x08008515
 80084a0:	08008515 	.word	0x08008515
 80084a4:	08008515 	.word	0x08008515
 80084a8:	080084df 	.word	0x080084df
 80084ac:	08008515 	.word	0x08008515
 80084b0:	08008515 	.word	0x08008515
 80084b4:	08008515 	.word	0x08008515
 80084b8:	080084f1 	.word	0x080084f1
 80084bc:	08008515 	.word	0x08008515
 80084c0:	08008515 	.word	0x08008515
 80084c4:	08008515 	.word	0x08008515
 80084c8:	08008503 	.word	0x08008503
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f022 0202 	bic.w	r2, r2, #2
 80084da:	60da      	str	r2, [r3, #12]
      break;
 80084dc:	e01d      	b.n	800851a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68da      	ldr	r2, [r3, #12]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0204 	bic.w	r2, r2, #4
 80084ec:	60da      	str	r2, [r3, #12]
      break;
 80084ee:	e014      	b.n	800851a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0208 	bic.w	r2, r2, #8
 80084fe:	60da      	str	r2, [r3, #12]
      break;
 8008500:	e00b      	b.n	800851a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 0210 	bic.w	r2, r2, #16
 8008510:	60da      	str	r2, [r3, #12]
      break;
 8008512:	e002      	b.n	800851a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	73fb      	strb	r3, [r7, #15]
      break;
 8008518:	bf00      	nop
  }

  if (status == HAL_OK)
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f040 8081 	bne.w	8008624 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2200      	movs	r2, #0
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 ffe0 	bl	80094f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a3e      	ldr	r2, [pc, #248]	; (8008630 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d013      	beq.n	8008562 <HAL_TIM_PWM_Stop_IT+0xe6>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a3d      	ldr	r2, [pc, #244]	; (8008634 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d00e      	beq.n	8008562 <HAL_TIM_PWM_Stop_IT+0xe6>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a3b      	ldr	r2, [pc, #236]	; (8008638 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d009      	beq.n	8008562 <HAL_TIM_PWM_Stop_IT+0xe6>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a3a      	ldr	r2, [pc, #232]	; (800863c <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d004      	beq.n	8008562 <HAL_TIM_PWM_Stop_IT+0xe6>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a38      	ldr	r2, [pc, #224]	; (8008640 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d101      	bne.n	8008566 <HAL_TIM_PWM_Stop_IT+0xea>
 8008562:	2301      	movs	r3, #1
 8008564:	e000      	b.n	8008568 <HAL_TIM_PWM_Stop_IT+0xec>
 8008566:	2300      	movs	r3, #0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d017      	beq.n	800859c <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6a1a      	ldr	r2, [r3, #32]
 8008572:	f241 1311 	movw	r3, #4369	; 0x1111
 8008576:	4013      	ands	r3, r2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10f      	bne.n	800859c <HAL_TIM_PWM_Stop_IT+0x120>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6a1a      	ldr	r2, [r3, #32]
 8008582:	f240 4344 	movw	r3, #1092	; 0x444
 8008586:	4013      	ands	r3, r2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d107      	bne.n	800859c <HAL_TIM_PWM_Stop_IT+0x120>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800859a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6a1a      	ldr	r2, [r3, #32]
 80085a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80085a6:	4013      	ands	r3, r2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10f      	bne.n	80085cc <HAL_TIM_PWM_Stop_IT+0x150>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6a1a      	ldr	r2, [r3, #32]
 80085b2:	f240 4344 	movw	r3, #1092	; 0x444
 80085b6:	4013      	ands	r3, r2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d107      	bne.n	80085cc <HAL_TIM_PWM_Stop_IT+0x150>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0201 	bic.w	r2, r2, #1
 80085ca:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d104      	bne.n	80085dc <HAL_TIM_PWM_Stop_IT+0x160>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085da:	e023      	b.n	8008624 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d104      	bne.n	80085ec <HAL_TIM_PWM_Stop_IT+0x170>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085ea:	e01b      	b.n	8008624 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	d104      	bne.n	80085fc <HAL_TIM_PWM_Stop_IT+0x180>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085fa:	e013      	b.n	8008624 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2b0c      	cmp	r3, #12
 8008600:	d104      	bne.n	800860c <HAL_TIM_PWM_Stop_IT+0x190>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800860a:	e00b      	b.n	8008624 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2b10      	cmp	r3, #16
 8008610:	d104      	bne.n	800861c <HAL_TIM_PWM_Stop_IT+0x1a0>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800861a:	e003      	b.n	8008624 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8008624:	7bfb      	ldrb	r3, [r7, #15]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	40010000 	.word	0x40010000
 8008634:	40010400 	.word	0x40010400
 8008638:	40014000 	.word	0x40014000
 800863c:	40014400 	.word	0x40014400
 8008640:	40014800 	.word	0x40014800

08008644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d020      	beq.n	80086a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01b      	beq.n	80086a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f06f 0202 	mvn.w	r2, #2
 8008678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	f003 0303 	and.w	r3, r3, #3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fb00 	bl	8008c94 <HAL_TIM_IC_CaptureCallback>
 8008694:	e005      	b.n	80086a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 faf2 	bl	8008c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7f8 f9c9 	bl	8000a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f003 0304 	and.w	r3, r3, #4
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d020      	beq.n	80086f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f003 0304 	and.w	r3, r3, #4
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01b      	beq.n	80086f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f06f 0204 	mvn.w	r2, #4
 80086c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2202      	movs	r2, #2
 80086ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fada 	bl	8008c94 <HAL_TIM_IC_CaptureCallback>
 80086e0:	e005      	b.n	80086ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 facc 	bl	8008c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7f8 f9a3 	bl	8000a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f003 0308 	and.w	r3, r3, #8
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d020      	beq.n	8008740 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f003 0308 	and.w	r3, r3, #8
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01b      	beq.n	8008740 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f06f 0208 	mvn.w	r2, #8
 8008710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2204      	movs	r2, #4
 8008716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fab4 	bl	8008c94 <HAL_TIM_IC_CaptureCallback>
 800872c:	e005      	b.n	800873a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 faa6 	bl	8008c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7f8 f97d 	bl	8000a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f003 0310 	and.w	r3, r3, #16
 8008746:	2b00      	cmp	r3, #0
 8008748:	d020      	beq.n	800878c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f003 0310 	and.w	r3, r3, #16
 8008750:	2b00      	cmp	r3, #0
 8008752:	d01b      	beq.n	800878c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f06f 0210 	mvn.w	r2, #16
 800875c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2208      	movs	r2, #8
 8008762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fa8e 	bl	8008c94 <HAL_TIM_IC_CaptureCallback>
 8008778:	e005      	b.n	8008786 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa80 	bl	8008c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7f8 f957 	bl	8000a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00c      	beq.n	80087b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	2b00      	cmp	r3, #0
 800879e:	d007      	beq.n	80087b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f06f 0201 	mvn.w	r2, #1
 80087a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fa5e 	bl	8008c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d104      	bne.n	80087c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00c      	beq.n	80087de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d007      	beq.n	80087de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80087d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 ff47 	bl	800966c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00c      	beq.n	8008802 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d007      	beq.n	8008802 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80087fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 ff3f 	bl	8009680 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00c      	beq.n	8008826 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	d007      	beq.n	8008826 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800881e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fa41 	bl	8008ca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f003 0320 	and.w	r3, r3, #32
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00c      	beq.n	800884a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f003 0320 	and.w	r3, r3, #32
 8008836:	2b00      	cmp	r3, #0
 8008838:	d007      	beq.n	800884a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f06f 0220 	mvn.w	r2, #32
 8008842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 ff07 	bl	8009658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800884a:	bf00      	nop
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800886a:	2b01      	cmp	r3, #1
 800886c:	d101      	bne.n	8008872 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800886e:	2302      	movs	r3, #2
 8008870:	e0ff      	b.n	8008a72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b14      	cmp	r3, #20
 800887e:	f200 80f0 	bhi.w	8008a62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088dd 	.word	0x080088dd
 800888c:	08008a63 	.word	0x08008a63
 8008890:	08008a63 	.word	0x08008a63
 8008894:	08008a63 	.word	0x08008a63
 8008898:	0800891d 	.word	0x0800891d
 800889c:	08008a63 	.word	0x08008a63
 80088a0:	08008a63 	.word	0x08008a63
 80088a4:	08008a63 	.word	0x08008a63
 80088a8:	0800895f 	.word	0x0800895f
 80088ac:	08008a63 	.word	0x08008a63
 80088b0:	08008a63 	.word	0x08008a63
 80088b4:	08008a63 	.word	0x08008a63
 80088b8:	0800899f 	.word	0x0800899f
 80088bc:	08008a63 	.word	0x08008a63
 80088c0:	08008a63 	.word	0x08008a63
 80088c4:	08008a63 	.word	0x08008a63
 80088c8:	080089e1 	.word	0x080089e1
 80088cc:	08008a63 	.word	0x08008a63
 80088d0:	08008a63 	.word	0x08008a63
 80088d4:	08008a63 	.word	0x08008a63
 80088d8:	08008a21 	.word	0x08008a21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68b9      	ldr	r1, [r7, #8]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fa90 	bl	8008e08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	699a      	ldr	r2, [r3, #24]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0208 	orr.w	r2, r2, #8
 80088f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699a      	ldr	r2, [r3, #24]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f022 0204 	bic.w	r2, r2, #4
 8008906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6999      	ldr	r1, [r3, #24]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	691a      	ldr	r2, [r3, #16]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	619a      	str	r2, [r3, #24]
      break;
 800891a:	e0a5      	b.n	8008a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68b9      	ldr	r1, [r7, #8]
 8008922:	4618      	mov	r0, r3
 8008924:	f000 fb00 	bl	8008f28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	699a      	ldr	r2, [r3, #24]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	699a      	ldr	r2, [r3, #24]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6999      	ldr	r1, [r3, #24]
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	021a      	lsls	r2, r3, #8
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	619a      	str	r2, [r3, #24]
      break;
 800895c:	e084      	b.n	8008a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fb69 	bl	800903c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69da      	ldr	r2, [r3, #28]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f042 0208 	orr.w	r2, r2, #8
 8008978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	69da      	ldr	r2, [r3, #28]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f022 0204 	bic.w	r2, r2, #4
 8008988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	69d9      	ldr	r1, [r3, #28]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	691a      	ldr	r2, [r3, #16]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	61da      	str	r2, [r3, #28]
      break;
 800899c:	e064      	b.n	8008a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 fbd1 	bl	800914c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	69da      	ldr	r2, [r3, #28]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	69da      	ldr	r2, [r3, #28]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	69d9      	ldr	r1, [r3, #28]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	021a      	lsls	r2, r3, #8
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	430a      	orrs	r2, r1
 80089dc:	61da      	str	r2, [r3, #28]
      break;
 80089de:	e043      	b.n	8008a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68b9      	ldr	r1, [r7, #8]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 fc1a 	bl	8009220 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0208 	orr.w	r2, r2, #8
 80089fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 0204 	bic.w	r2, r2, #4
 8008a0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	691a      	ldr	r2, [r3, #16]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a1e:	e023      	b.n	8008a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68b9      	ldr	r1, [r7, #8]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 fc5e 	bl	80092e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	021a      	lsls	r2, r3, #8
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a60:	e002      	b.n	8008a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	75fb      	strb	r3, [r7, #23]
      break;
 8008a66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3718      	adds	r7, #24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop

08008a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d101      	bne.n	8008a98 <HAL_TIM_ConfigClockSource+0x1c>
 8008a94:	2302      	movs	r3, #2
 8008a96:	e0dc      	b.n	8008c52 <HAL_TIM_ConfigClockSource+0x1d6>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	4b6a      	ldr	r3, [pc, #424]	; (8008c5c <HAL_TIM_ConfigClockSource+0x1e0>)
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008abe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a64      	ldr	r2, [pc, #400]	; (8008c60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	f000 80a9 	beq.w	8008c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ad4:	4a62      	ldr	r2, [pc, #392]	; (8008c60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	f200 80ae 	bhi.w	8008c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8008adc:	4a61      	ldr	r2, [pc, #388]	; (8008c64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	f000 80a1 	beq.w	8008c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ae4:	4a5f      	ldr	r2, [pc, #380]	; (8008c64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	f200 80a6 	bhi.w	8008c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8008aec:	4a5e      	ldr	r2, [pc, #376]	; (8008c68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	f000 8099 	beq.w	8008c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8008af4:	4a5c      	ldr	r2, [pc, #368]	; (8008c68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	f200 809e 	bhi.w	8008c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8008afc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b00:	f000 8091 	beq.w	8008c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b08:	f200 8096 	bhi.w	8008c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b10:	f000 8089 	beq.w	8008c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b18:	f200 808e 	bhi.w	8008c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b20:	d03e      	beq.n	8008ba0 <HAL_TIM_ConfigClockSource+0x124>
 8008b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b26:	f200 8087 	bhi.w	8008c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b2e:	f000 8086 	beq.w	8008c3e <HAL_TIM_ConfigClockSource+0x1c2>
 8008b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b36:	d87f      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b38:	2b70      	cmp	r3, #112	; 0x70
 8008b3a:	d01a      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0xf6>
 8008b3c:	2b70      	cmp	r3, #112	; 0x70
 8008b3e:	d87b      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b40:	2b60      	cmp	r3, #96	; 0x60
 8008b42:	d050      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0x16a>
 8008b44:	2b60      	cmp	r3, #96	; 0x60
 8008b46:	d877      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b48:	2b50      	cmp	r3, #80	; 0x50
 8008b4a:	d03c      	beq.n	8008bc6 <HAL_TIM_ConfigClockSource+0x14a>
 8008b4c:	2b50      	cmp	r3, #80	; 0x50
 8008b4e:	d873      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b50:	2b40      	cmp	r3, #64	; 0x40
 8008b52:	d058      	beq.n	8008c06 <HAL_TIM_ConfigClockSource+0x18a>
 8008b54:	2b40      	cmp	r3, #64	; 0x40
 8008b56:	d86f      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b58:	2b30      	cmp	r3, #48	; 0x30
 8008b5a:	d064      	beq.n	8008c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b5c:	2b30      	cmp	r3, #48	; 0x30
 8008b5e:	d86b      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b60:	2b20      	cmp	r3, #32
 8008b62:	d060      	beq.n	8008c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b64:	2b20      	cmp	r3, #32
 8008b66:	d867      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d05c      	beq.n	8008c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b6c:	2b10      	cmp	r3, #16
 8008b6e:	d05a      	beq.n	8008c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b70:	e062      	b.n	8008c38 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b82:	f000 fc95 	bl	80094b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	609a      	str	r2, [r3, #8]
      break;
 8008b9e:	e04f      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bb0:	f000 fc7e 	bl	80094b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689a      	ldr	r2, [r3, #8]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bc2:	609a      	str	r2, [r3, #8]
      break;
 8008bc4:	e03c      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	f000 fbee 	bl	80093b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2150      	movs	r1, #80	; 0x50
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 fc48 	bl	8009474 <TIM_ITRx_SetConfig>
      break;
 8008be4:	e02c      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	f000 fc0d 	bl	8009412 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2160      	movs	r1, #96	; 0x60
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fc38 	bl	8009474 <TIM_ITRx_SetConfig>
      break;
 8008c04:	e01c      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c12:	461a      	mov	r2, r3
 8008c14:	f000 fbce 	bl	80093b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2140      	movs	r1, #64	; 0x40
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 fc28 	bl	8009474 <TIM_ITRx_SetConfig>
      break;
 8008c24:	e00c      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4610      	mov	r0, r2
 8008c32:	f000 fc1f 	bl	8009474 <TIM_ITRx_SetConfig>
      break;
 8008c36:	e003      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c3c:	e000      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	ffceff88 	.word	0xffceff88
 8008c60:	00100040 	.word	0x00100040
 8008c64:	00100030 	.word	0x00100030
 8008c68:	00100020 	.word	0x00100020

08008c6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a46      	ldr	r2, [pc, #280]	; (8008de8 <TIM_Base_SetConfig+0x12c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d013      	beq.n	8008cfc <TIM_Base_SetConfig+0x40>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cda:	d00f      	beq.n	8008cfc <TIM_Base_SetConfig+0x40>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a43      	ldr	r2, [pc, #268]	; (8008dec <TIM_Base_SetConfig+0x130>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d00b      	beq.n	8008cfc <TIM_Base_SetConfig+0x40>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a42      	ldr	r2, [pc, #264]	; (8008df0 <TIM_Base_SetConfig+0x134>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d007      	beq.n	8008cfc <TIM_Base_SetConfig+0x40>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a41      	ldr	r2, [pc, #260]	; (8008df4 <TIM_Base_SetConfig+0x138>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d003      	beq.n	8008cfc <TIM_Base_SetConfig+0x40>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a40      	ldr	r2, [pc, #256]	; (8008df8 <TIM_Base_SetConfig+0x13c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d108      	bne.n	8008d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a35      	ldr	r2, [pc, #212]	; (8008de8 <TIM_Base_SetConfig+0x12c>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d01f      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d1c:	d01b      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a32      	ldr	r2, [pc, #200]	; (8008dec <TIM_Base_SetConfig+0x130>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d017      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a31      	ldr	r2, [pc, #196]	; (8008df0 <TIM_Base_SetConfig+0x134>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d013      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a30      	ldr	r2, [pc, #192]	; (8008df4 <TIM_Base_SetConfig+0x138>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00f      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a2f      	ldr	r2, [pc, #188]	; (8008df8 <TIM_Base_SetConfig+0x13c>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d00b      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a2e      	ldr	r2, [pc, #184]	; (8008dfc <TIM_Base_SetConfig+0x140>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d007      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a2d      	ldr	r2, [pc, #180]	; (8008e00 <TIM_Base_SetConfig+0x144>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d003      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a2c      	ldr	r2, [pc, #176]	; (8008e04 <TIM_Base_SetConfig+0x148>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d108      	bne.n	8008d68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	689a      	ldr	r2, [r3, #8]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a16      	ldr	r2, [pc, #88]	; (8008de8 <TIM_Base_SetConfig+0x12c>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d00f      	beq.n	8008db4 <TIM_Base_SetConfig+0xf8>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <TIM_Base_SetConfig+0x13c>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d00b      	beq.n	8008db4 <TIM_Base_SetConfig+0xf8>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a17      	ldr	r2, [pc, #92]	; (8008dfc <TIM_Base_SetConfig+0x140>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d007      	beq.n	8008db4 <TIM_Base_SetConfig+0xf8>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a16      	ldr	r2, [pc, #88]	; (8008e00 <TIM_Base_SetConfig+0x144>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d003      	beq.n	8008db4 <TIM_Base_SetConfig+0xf8>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a15      	ldr	r2, [pc, #84]	; (8008e04 <TIM_Base_SetConfig+0x148>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d103      	bne.n	8008dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	691a      	ldr	r2, [r3, #16]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d105      	bne.n	8008dda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f023 0201 	bic.w	r2, r3, #1
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	611a      	str	r2, [r3, #16]
  }
}
 8008dda:	bf00      	nop
 8008ddc:	3714      	adds	r7, #20
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	40010000 	.word	0x40010000
 8008dec:	40000400 	.word	0x40000400
 8008df0:	40000800 	.word	0x40000800
 8008df4:	40000c00 	.word	0x40000c00
 8008df8:	40010400 	.word	0x40010400
 8008dfc:	40014000 	.word	0x40014000
 8008e00:	40014400 	.word	0x40014400
 8008e04:	40014800 	.word	0x40014800

08008e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	f023 0201 	bic.w	r2, r3, #1
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4b37      	ldr	r3, [pc, #220]	; (8008f10 <TIM_OC1_SetConfig+0x108>)
 8008e34:	4013      	ands	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0303 	bic.w	r3, r3, #3
 8008e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f023 0302 	bic.w	r3, r3, #2
 8008e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a2d      	ldr	r2, [pc, #180]	; (8008f14 <TIM_OC1_SetConfig+0x10c>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d00f      	beq.n	8008e84 <TIM_OC1_SetConfig+0x7c>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a2c      	ldr	r2, [pc, #176]	; (8008f18 <TIM_OC1_SetConfig+0x110>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d00b      	beq.n	8008e84 <TIM_OC1_SetConfig+0x7c>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a2b      	ldr	r2, [pc, #172]	; (8008f1c <TIM_OC1_SetConfig+0x114>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d007      	beq.n	8008e84 <TIM_OC1_SetConfig+0x7c>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a2a      	ldr	r2, [pc, #168]	; (8008f20 <TIM_OC1_SetConfig+0x118>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d003      	beq.n	8008e84 <TIM_OC1_SetConfig+0x7c>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a29      	ldr	r2, [pc, #164]	; (8008f24 <TIM_OC1_SetConfig+0x11c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d10c      	bne.n	8008e9e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f023 0308 	bic.w	r3, r3, #8
 8008e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f023 0304 	bic.w	r3, r3, #4
 8008e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a1c      	ldr	r2, [pc, #112]	; (8008f14 <TIM_OC1_SetConfig+0x10c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d00f      	beq.n	8008ec6 <TIM_OC1_SetConfig+0xbe>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a1b      	ldr	r2, [pc, #108]	; (8008f18 <TIM_OC1_SetConfig+0x110>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d00b      	beq.n	8008ec6 <TIM_OC1_SetConfig+0xbe>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a1a      	ldr	r2, [pc, #104]	; (8008f1c <TIM_OC1_SetConfig+0x114>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d007      	beq.n	8008ec6 <TIM_OC1_SetConfig+0xbe>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a19      	ldr	r2, [pc, #100]	; (8008f20 <TIM_OC1_SetConfig+0x118>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d003      	beq.n	8008ec6 <TIM_OC1_SetConfig+0xbe>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a18      	ldr	r2, [pc, #96]	; (8008f24 <TIM_OC1_SetConfig+0x11c>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d111      	bne.n	8008eea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	621a      	str	r2, [r3, #32]
}
 8008f04:	bf00      	nop
 8008f06:	371c      	adds	r7, #28
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	fffeff8f 	.word	0xfffeff8f
 8008f14:	40010000 	.word	0x40010000
 8008f18:	40010400 	.word	0x40010400
 8008f1c:	40014000 	.word	0x40014000
 8008f20:	40014400 	.word	0x40014400
 8008f24:	40014800 	.word	0x40014800

08008f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	f023 0210 	bic.w	r2, r3, #16
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	4b34      	ldr	r3, [pc, #208]	; (8009024 <TIM_OC2_SetConfig+0xfc>)
 8008f54:	4013      	ands	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	021b      	lsls	r3, r3, #8
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f023 0320 	bic.w	r3, r3, #32
 8008f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	011b      	lsls	r3, r3, #4
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a29      	ldr	r2, [pc, #164]	; (8009028 <TIM_OC2_SetConfig+0x100>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d003      	beq.n	8008f90 <TIM_OC2_SetConfig+0x68>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a28      	ldr	r2, [pc, #160]	; (800902c <TIM_OC2_SetConfig+0x104>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d10d      	bne.n	8008fac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008faa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a1e      	ldr	r2, [pc, #120]	; (8009028 <TIM_OC2_SetConfig+0x100>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d00f      	beq.n	8008fd4 <TIM_OC2_SetConfig+0xac>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a1d      	ldr	r2, [pc, #116]	; (800902c <TIM_OC2_SetConfig+0x104>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d00b      	beq.n	8008fd4 <TIM_OC2_SetConfig+0xac>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a1c      	ldr	r2, [pc, #112]	; (8009030 <TIM_OC2_SetConfig+0x108>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d007      	beq.n	8008fd4 <TIM_OC2_SetConfig+0xac>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a1b      	ldr	r2, [pc, #108]	; (8009034 <TIM_OC2_SetConfig+0x10c>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d003      	beq.n	8008fd4 <TIM_OC2_SetConfig+0xac>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a1a      	ldr	r2, [pc, #104]	; (8009038 <TIM_OC2_SetConfig+0x110>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d113      	bne.n	8008ffc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	621a      	str	r2, [r3, #32]
}
 8009016:	bf00      	nop
 8009018:	371c      	adds	r7, #28
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	feff8fff 	.word	0xfeff8fff
 8009028:	40010000 	.word	0x40010000
 800902c:	40010400 	.word	0x40010400
 8009030:	40014000 	.word	0x40014000
 8009034:	40014400 	.word	0x40014400
 8009038:	40014800 	.word	0x40014800

0800903c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	4b33      	ldr	r3, [pc, #204]	; (8009134 <TIM_OC3_SetConfig+0xf8>)
 8009068:	4013      	ands	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 0303 	bic.w	r3, r3, #3
 8009072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	4313      	orrs	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	021b      	lsls	r3, r3, #8
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	4313      	orrs	r3, r2
 8009090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a28      	ldr	r2, [pc, #160]	; (8009138 <TIM_OC3_SetConfig+0xfc>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d003      	beq.n	80090a2 <TIM_OC3_SetConfig+0x66>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a27      	ldr	r2, [pc, #156]	; (800913c <TIM_OC3_SetConfig+0x100>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d10d      	bne.n	80090be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	021b      	lsls	r3, r3, #8
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a1d      	ldr	r2, [pc, #116]	; (8009138 <TIM_OC3_SetConfig+0xfc>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d00f      	beq.n	80090e6 <TIM_OC3_SetConfig+0xaa>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a1c      	ldr	r2, [pc, #112]	; (800913c <TIM_OC3_SetConfig+0x100>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d00b      	beq.n	80090e6 <TIM_OC3_SetConfig+0xaa>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a1b      	ldr	r2, [pc, #108]	; (8009140 <TIM_OC3_SetConfig+0x104>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d007      	beq.n	80090e6 <TIM_OC3_SetConfig+0xaa>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a1a      	ldr	r2, [pc, #104]	; (8009144 <TIM_OC3_SetConfig+0x108>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d003      	beq.n	80090e6 <TIM_OC3_SetConfig+0xaa>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a19      	ldr	r2, [pc, #100]	; (8009148 <TIM_OC3_SetConfig+0x10c>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d113      	bne.n	800910e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	4313      	orrs	r3, r2
 8009100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	011b      	lsls	r3, r3, #4
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	4313      	orrs	r3, r2
 800910c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	621a      	str	r2, [r3, #32]
}
 8009128:	bf00      	nop
 800912a:	371c      	adds	r7, #28
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	fffeff8f 	.word	0xfffeff8f
 8009138:	40010000 	.word	0x40010000
 800913c:	40010400 	.word	0x40010400
 8009140:	40014000 	.word	0x40014000
 8009144:	40014400 	.word	0x40014400
 8009148:	40014800 	.word	0x40014800

0800914c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	4b24      	ldr	r3, [pc, #144]	; (8009208 <TIM_OC4_SetConfig+0xbc>)
 8009178:	4013      	ands	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	4313      	orrs	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	031b      	lsls	r3, r3, #12
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a19      	ldr	r2, [pc, #100]	; (800920c <TIM_OC4_SetConfig+0xc0>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00f      	beq.n	80091cc <TIM_OC4_SetConfig+0x80>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a18      	ldr	r2, [pc, #96]	; (8009210 <TIM_OC4_SetConfig+0xc4>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00b      	beq.n	80091cc <TIM_OC4_SetConfig+0x80>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a17      	ldr	r2, [pc, #92]	; (8009214 <TIM_OC4_SetConfig+0xc8>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d007      	beq.n	80091cc <TIM_OC4_SetConfig+0x80>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a16      	ldr	r2, [pc, #88]	; (8009218 <TIM_OC4_SetConfig+0xcc>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d003      	beq.n	80091cc <TIM_OC4_SetConfig+0x80>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a15      	ldr	r2, [pc, #84]	; (800921c <TIM_OC4_SetConfig+0xd0>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d109      	bne.n	80091e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	695b      	ldr	r3, [r3, #20]
 80091d8:	019b      	lsls	r3, r3, #6
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	4313      	orrs	r3, r2
 80091de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	621a      	str	r2, [r3, #32]
}
 80091fa:	bf00      	nop
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	feff8fff 	.word	0xfeff8fff
 800920c:	40010000 	.word	0x40010000
 8009210:	40010400 	.word	0x40010400
 8009214:	40014000 	.word	0x40014000
 8009218:	40014400 	.word	0x40014400
 800921c:	40014800 	.word	0x40014800

08009220 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	4b21      	ldr	r3, [pc, #132]	; (80092d0 <TIM_OC5_SetConfig+0xb0>)
 800924c:	4013      	ands	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	4313      	orrs	r3, r2
 8009258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009260:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	041b      	lsls	r3, r3, #16
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	4313      	orrs	r3, r2
 800926c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a18      	ldr	r2, [pc, #96]	; (80092d4 <TIM_OC5_SetConfig+0xb4>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d00f      	beq.n	8009296 <TIM_OC5_SetConfig+0x76>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a17      	ldr	r2, [pc, #92]	; (80092d8 <TIM_OC5_SetConfig+0xb8>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d00b      	beq.n	8009296 <TIM_OC5_SetConfig+0x76>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a16      	ldr	r2, [pc, #88]	; (80092dc <TIM_OC5_SetConfig+0xbc>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d007      	beq.n	8009296 <TIM_OC5_SetConfig+0x76>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a15      	ldr	r2, [pc, #84]	; (80092e0 <TIM_OC5_SetConfig+0xc0>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d003      	beq.n	8009296 <TIM_OC5_SetConfig+0x76>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a14      	ldr	r2, [pc, #80]	; (80092e4 <TIM_OC5_SetConfig+0xc4>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d109      	bne.n	80092aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800929c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	021b      	lsls	r3, r3, #8
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	621a      	str	r2, [r3, #32]
}
 80092c4:	bf00      	nop
 80092c6:	371c      	adds	r7, #28
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	fffeff8f 	.word	0xfffeff8f
 80092d4:	40010000 	.word	0x40010000
 80092d8:	40010400 	.word	0x40010400
 80092dc:	40014000 	.word	0x40014000
 80092e0:	40014400 	.word	0x40014400
 80092e4:	40014800 	.word	0x40014800

080092e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a1b      	ldr	r3, [r3, #32]
 80092fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800930e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	4b22      	ldr	r3, [pc, #136]	; (800939c <TIM_OC6_SetConfig+0xb4>)
 8009314:	4013      	ands	r3, r2
 8009316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	021b      	lsls	r3, r3, #8
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	4313      	orrs	r3, r2
 8009322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800932a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	051b      	lsls	r3, r3, #20
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4313      	orrs	r3, r2
 8009336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a19      	ldr	r2, [pc, #100]	; (80093a0 <TIM_OC6_SetConfig+0xb8>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00f      	beq.n	8009360 <TIM_OC6_SetConfig+0x78>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a18      	ldr	r2, [pc, #96]	; (80093a4 <TIM_OC6_SetConfig+0xbc>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d00b      	beq.n	8009360 <TIM_OC6_SetConfig+0x78>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a17      	ldr	r2, [pc, #92]	; (80093a8 <TIM_OC6_SetConfig+0xc0>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d007      	beq.n	8009360 <TIM_OC6_SetConfig+0x78>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a16      	ldr	r2, [pc, #88]	; (80093ac <TIM_OC6_SetConfig+0xc4>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d003      	beq.n	8009360 <TIM_OC6_SetConfig+0x78>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a15      	ldr	r2, [pc, #84]	; (80093b0 <TIM_OC6_SetConfig+0xc8>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d109      	bne.n	8009374 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009366:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	029b      	lsls	r3, r3, #10
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	4313      	orrs	r3, r2
 8009372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	621a      	str	r2, [r3, #32]
}
 800938e:	bf00      	nop
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	feff8fff 	.word	0xfeff8fff
 80093a0:	40010000 	.word	0x40010000
 80093a4:	40010400 	.word	0x40010400
 80093a8:	40014000 	.word	0x40014000
 80093ac:	40014400 	.word	0x40014400
 80093b0:	40014800 	.word	0x40014800

080093b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b087      	sub	sp, #28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	f023 0201 	bic.w	r2, r3, #1
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	011b      	lsls	r3, r3, #4
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f023 030a 	bic.w	r3, r3, #10
 80093f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	621a      	str	r2, [r3, #32]
}
 8009406:	bf00      	nop
 8009408:	371c      	adds	r7, #28
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009412:	b480      	push	{r7}
 8009414:	b087      	sub	sp, #28
 8009416:	af00      	add	r7, sp, #0
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	60b9      	str	r1, [r7, #8]
 800941c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6a1b      	ldr	r3, [r3, #32]
 8009428:	f023 0210 	bic.w	r2, r3, #16
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800943c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	031b      	lsls	r3, r3, #12
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	4313      	orrs	r3, r2
 8009446:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800944e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	011b      	lsls	r3, r3, #4
 8009454:	697a      	ldr	r2, [r7, #20]
 8009456:	4313      	orrs	r3, r2
 8009458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	621a      	str	r2, [r3, #32]
}
 8009466:	bf00      	nop
 8009468:	371c      	adds	r7, #28
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
	...

08009474 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	4b09      	ldr	r3, [pc, #36]	; (80094ac <TIM_ITRx_SetConfig+0x38>)
 8009488:	4013      	ands	r3, r2
 800948a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800948c:	683a      	ldr	r2, [r7, #0]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	4313      	orrs	r3, r2
 8009492:	f043 0307 	orr.w	r3, r3, #7
 8009496:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	609a      	str	r2, [r3, #8]
}
 800949e:	bf00      	nop
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	ffcfff8f 	.word	0xffcfff8f

080094b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b087      	sub	sp, #28
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
 80094bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	021a      	lsls	r2, r3, #8
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	431a      	orrs	r2, r3
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	4313      	orrs	r3, r2
 80094dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	609a      	str	r2, [r3, #8]
}
 80094e4:	bf00      	nop
 80094e6:	371c      	adds	r7, #28
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b087      	sub	sp, #28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	f003 031f 	and.w	r3, r3, #31
 8009502:	2201      	movs	r2, #1
 8009504:	fa02 f303 	lsl.w	r3, r2, r3
 8009508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6a1a      	ldr	r2, [r3, #32]
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	43db      	mvns	r3, r3
 8009512:	401a      	ands	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6a1a      	ldr	r2, [r3, #32]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f003 031f 	and.w	r3, r3, #31
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	fa01 f303 	lsl.w	r3, r1, r3
 8009528:	431a      	orrs	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	621a      	str	r2, [r3, #32]
}
 800952e:	bf00      	nop
 8009530:	371c      	adds	r7, #28
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
	...

0800953c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800954c:	2b01      	cmp	r3, #1
 800954e:	d101      	bne.n	8009554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009550:	2302      	movs	r3, #2
 8009552:	e06d      	b.n	8009630 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2202      	movs	r2, #2
 8009560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a30      	ldr	r2, [pc, #192]	; (800963c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d004      	beq.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a2f      	ldr	r2, [pc, #188]	; (8009640 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d108      	bne.n	800959a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800958e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	4313      	orrs	r3, r2
 8009598:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a20      	ldr	r2, [pc, #128]	; (800963c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d022      	beq.n	8009604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095c6:	d01d      	beq.n	8009604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a1d      	ldr	r2, [pc, #116]	; (8009644 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d018      	beq.n	8009604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a1c      	ldr	r2, [pc, #112]	; (8009648 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d013      	beq.n	8009604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a1a      	ldr	r2, [pc, #104]	; (800964c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d00e      	beq.n	8009604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a15      	ldr	r2, [pc, #84]	; (8009640 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d009      	beq.n	8009604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a16      	ldr	r2, [pc, #88]	; (8009650 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d004      	beq.n	8009604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a15      	ldr	r2, [pc, #84]	; (8009654 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d10c      	bne.n	800961e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800960a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	4313      	orrs	r3, r2
 8009614:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3714      	adds	r7, #20
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	40010000 	.word	0x40010000
 8009640:	40010400 	.word	0x40010400
 8009644:	40000400 	.word	0x40000400
 8009648:	40000800 	.word	0x40000800
 800964c:	40000c00 	.word	0x40000c00
 8009650:	40001800 	.word	0x40001800
 8009654:	40014000 	.word	0x40014000

08009658 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e042      	b.n	800972c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d106      	bne.n	80096be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7f8 f9e5 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2224      	movs	r2, #36	; 0x24
 80096c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 0201 	bic.w	r2, r2, #1
 80096d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f001 f96a 	bl	800a9b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fbff 	bl	8009ee8 <UART_SetConfig>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d101      	bne.n	80096f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e01b      	b.n	800972c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f042 0201 	orr.w	r2, r2, #1
 8009722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f001 f9e9 	bl	800aafc <UART_CheckIdleState>
 800972a:	4603      	mov	r3, r0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b0ba      	sub	sp, #232	; 0xe8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800975a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800975e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009762:	4013      	ands	r3, r2
 8009764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800976c:	2b00      	cmp	r3, #0
 800976e:	d11b      	bne.n	80097a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009774:	f003 0320 	and.w	r3, r3, #32
 8009778:	2b00      	cmp	r3, #0
 800977a:	d015      	beq.n	80097a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800977c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009780:	f003 0320 	and.w	r3, r3, #32
 8009784:	2b00      	cmp	r3, #0
 8009786:	d105      	bne.n	8009794 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800978c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d009      	beq.n	80097a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 8377 	beq.w	8009e8c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	4798      	blx	r3
      }
      return;
 80097a6:	e371      	b.n	8009e8c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80097a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f000 8123 	beq.w	80099f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80097b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80097b6:	4b8d      	ldr	r3, [pc, #564]	; (80099ec <HAL_UART_IRQHandler+0x2b8>)
 80097b8:	4013      	ands	r3, r2
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d106      	bne.n	80097cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80097be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80097c2:	4b8b      	ldr	r3, [pc, #556]	; (80099f0 <HAL_UART_IRQHandler+0x2bc>)
 80097c4:	4013      	ands	r3, r2
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 8116 	beq.w	80099f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d011      	beq.n	80097fc <HAL_UART_IRQHandler+0xc8>
 80097d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00b      	beq.n	80097fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2201      	movs	r2, #1
 80097ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097f2:	f043 0201 	orr.w	r2, r3, #1
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009800:	f003 0302 	and.w	r3, r3, #2
 8009804:	2b00      	cmp	r3, #0
 8009806:	d011      	beq.n	800982c <HAL_UART_IRQHandler+0xf8>
 8009808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00b      	beq.n	800982c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2202      	movs	r2, #2
 800981a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009822:	f043 0204 	orr.w	r2, r3, #4
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800982c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009830:	f003 0304 	and.w	r3, r3, #4
 8009834:	2b00      	cmp	r3, #0
 8009836:	d011      	beq.n	800985c <HAL_UART_IRQHandler+0x128>
 8009838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00b      	beq.n	800985c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2204      	movs	r2, #4
 800984a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009852:	f043 0202 	orr.w	r2, r3, #2
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800985c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009860:	f003 0308 	and.w	r3, r3, #8
 8009864:	2b00      	cmp	r3, #0
 8009866:	d017      	beq.n	8009898 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800986c:	f003 0320 	and.w	r3, r3, #32
 8009870:	2b00      	cmp	r3, #0
 8009872:	d105      	bne.n	8009880 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009874:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009878:	4b5c      	ldr	r3, [pc, #368]	; (80099ec <HAL_UART_IRQHandler+0x2b8>)
 800987a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00b      	beq.n	8009898 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2208      	movs	r2, #8
 8009886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800988e:	f043 0208 	orr.w	r2, r3, #8
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800989c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d012      	beq.n	80098ca <HAL_UART_IRQHandler+0x196>
 80098a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00c      	beq.n	80098ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c0:	f043 0220 	orr.w	r2, r3, #32
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 82dd 	beq.w	8009e90 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098da:	f003 0320 	and.w	r3, r3, #32
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d013      	beq.n	800990a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098e6:	f003 0320 	and.w	r3, r3, #32
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d105      	bne.n	80098fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d007      	beq.n	800990a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d003      	beq.n	800990a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009910:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991e:	2b40      	cmp	r3, #64	; 0x40
 8009920:	d005      	beq.n	800992e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009926:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800992a:	2b00      	cmp	r3, #0
 800992c:	d054      	beq.n	80099d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f001 f9fc 	bl	800ad2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993e:	2b40      	cmp	r3, #64	; 0x40
 8009940:	d146      	bne.n	80099d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3308      	adds	r3, #8
 8009948:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800995c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3308      	adds	r3, #8
 800996a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800996e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009972:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009976:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800997a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800997e:	e841 2300 	strex	r3, r2, [r1]
 8009982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1d9      	bne.n	8009942 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009994:	2b00      	cmp	r3, #0
 8009996:	d017      	beq.n	80099c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800999e:	4a15      	ldr	r2, [pc, #84]	; (80099f4 <HAL_UART_IRQHandler+0x2c0>)
 80099a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fa f95f 	bl	8003c6c <HAL_DMA_Abort_IT>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d019      	beq.n	80099e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80099c2:	4610      	mov	r0, r2
 80099c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099c6:	e00f      	b.n	80099e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fa77 	bl	8009ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ce:	e00b      	b.n	80099e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fa73 	bl	8009ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d6:	e007      	b.n	80099e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fa6f 	bl	8009ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80099e6:	e253      	b.n	8009e90 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099e8:	bf00      	nop
    return;
 80099ea:	e251      	b.n	8009e90 <HAL_UART_IRQHandler+0x75c>
 80099ec:	10000001 	.word	0x10000001
 80099f0:	04000120 	.word	0x04000120
 80099f4:	0800adf9 	.word	0x0800adf9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	f040 81e7 	bne.w	8009dd0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a06:	f003 0310 	and.w	r3, r3, #16
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f000 81e0 	beq.w	8009dd0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a14:	f003 0310 	and.w	r3, r3, #16
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f000 81d9 	beq.w	8009dd0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2210      	movs	r2, #16
 8009a24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a30:	2b40      	cmp	r3, #64	; 0x40
 8009a32:	f040 8151 	bne.w	8009cd8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a96      	ldr	r2, [pc, #600]	; (8009c98 <HAL_UART_IRQHandler+0x564>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d068      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a93      	ldr	r2, [pc, #588]	; (8009c9c <HAL_UART_IRQHandler+0x568>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d061      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a91      	ldr	r2, [pc, #580]	; (8009ca0 <HAL_UART_IRQHandler+0x56c>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d05a      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a8e      	ldr	r2, [pc, #568]	; (8009ca4 <HAL_UART_IRQHandler+0x570>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d053      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a8c      	ldr	r2, [pc, #560]	; (8009ca8 <HAL_UART_IRQHandler+0x574>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d04c      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a89      	ldr	r2, [pc, #548]	; (8009cac <HAL_UART_IRQHandler+0x578>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d045      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a87      	ldr	r2, [pc, #540]	; (8009cb0 <HAL_UART_IRQHandler+0x57c>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d03e      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a84      	ldr	r2, [pc, #528]	; (8009cb4 <HAL_UART_IRQHandler+0x580>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d037      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a82      	ldr	r2, [pc, #520]	; (8009cb8 <HAL_UART_IRQHandler+0x584>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d030      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a7f      	ldr	r2, [pc, #508]	; (8009cbc <HAL_UART_IRQHandler+0x588>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d029      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a7d      	ldr	r2, [pc, #500]	; (8009cc0 <HAL_UART_IRQHandler+0x58c>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d022      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a7a      	ldr	r2, [pc, #488]	; (8009cc4 <HAL_UART_IRQHandler+0x590>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d01b      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a78      	ldr	r2, [pc, #480]	; (8009cc8 <HAL_UART_IRQHandler+0x594>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d014      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a75      	ldr	r2, [pc, #468]	; (8009ccc <HAL_UART_IRQHandler+0x598>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d00d      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a73      	ldr	r2, [pc, #460]	; (8009cd0 <HAL_UART_IRQHandler+0x59c>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d006      	beq.n	8009b16 <HAL_UART_IRQHandler+0x3e2>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a70      	ldr	r2, [pc, #448]	; (8009cd4 <HAL_UART_IRQHandler+0x5a0>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d106      	bne.n	8009b24 <HAL_UART_IRQHandler+0x3f0>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	e005      	b.n	8009b30 <HAL_UART_IRQHandler+0x3fc>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f000 81ab 	beq.w	8009e94 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	f080 81a3 	bcs.w	8009e94 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b5e:	69db      	ldr	r3, [r3, #28]
 8009b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b64:	f000 8087 	beq.w	8009c76 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b74:	e853 3f00 	ldrex	r3, [r3]
 8009b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009b92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009b9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ba2:	e841 2300 	strex	r3, r2, [r1]
 8009ba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1da      	bne.n	8009b68 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bbc:	e853 3f00 	ldrex	r3, [r3]
 8009bc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bc4:	f023 0301 	bic.w	r3, r3, #1
 8009bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009bd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009bda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009bde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009be2:	e841 2300 	strex	r3, r2, [r1]
 8009be6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e1      	bne.n	8009bb2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bf8:	e853 3f00 	ldrex	r3, [r3]
 8009bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009c12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009c18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c1a:	e841 2300 	strex	r3, r2, [r1]
 8009c1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1e3      	bne.n	8009bee <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2220      	movs	r2, #32
 8009c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c3c:	e853 3f00 	ldrex	r3, [r3]
 8009c40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c44:	f023 0310 	bic.w	r3, r3, #16
 8009c48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	461a      	mov	r2, r3
 8009c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c56:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c5e:	e841 2300 	strex	r3, r2, [r1]
 8009c62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1e4      	bne.n	8009c34 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7f9 fcdd 	bl	8003630 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2202      	movs	r2, #2
 8009c7a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 f91d 	bl	8009ed0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c96:	e0fd      	b.n	8009e94 <HAL_UART_IRQHandler+0x760>
 8009c98:	40020010 	.word	0x40020010
 8009c9c:	40020028 	.word	0x40020028
 8009ca0:	40020040 	.word	0x40020040
 8009ca4:	40020058 	.word	0x40020058
 8009ca8:	40020070 	.word	0x40020070
 8009cac:	40020088 	.word	0x40020088
 8009cb0:	400200a0 	.word	0x400200a0
 8009cb4:	400200b8 	.word	0x400200b8
 8009cb8:	40020410 	.word	0x40020410
 8009cbc:	40020428 	.word	0x40020428
 8009cc0:	40020440 	.word	0x40020440
 8009cc4:	40020458 	.word	0x40020458
 8009cc8:	40020470 	.word	0x40020470
 8009ccc:	40020488 	.word	0x40020488
 8009cd0:	400204a0 	.word	0x400204a0
 8009cd4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 80cf 	beq.w	8009e98 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009cfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 80ca 	beq.w	8009e98 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0c:	e853 3f00 	ldrex	r3, [r3]
 8009d10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	461a      	mov	r2, r3
 8009d22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d26:	647b      	str	r3, [r7, #68]	; 0x44
 8009d28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d2e:	e841 2300 	strex	r3, r2, [r1]
 8009d32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e4      	bne.n	8009d04 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3308      	adds	r3, #8
 8009d40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	e853 3f00 	ldrex	r3, [r3]
 8009d48:	623b      	str	r3, [r7, #32]
   return(result);
 8009d4a:	6a3a      	ldr	r2, [r7, #32]
 8009d4c:	4b55      	ldr	r3, [pc, #340]	; (8009ea4 <HAL_UART_IRQHandler+0x770>)
 8009d4e:	4013      	ands	r3, r2
 8009d50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3308      	adds	r3, #8
 8009d5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009d5e:	633a      	str	r2, [r7, #48]	; 0x30
 8009d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d66:	e841 2300 	strex	r3, r2, [r1]
 8009d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1e3      	bne.n	8009d3a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2220      	movs	r2, #32
 8009d76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	e853 3f00 	ldrex	r3, [r3]
 8009d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f023 0310 	bic.w	r3, r3, #16
 8009d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	461a      	mov	r2, r3
 8009da4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009da8:	61fb      	str	r3, [r7, #28]
 8009daa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dac:	69b9      	ldr	r1, [r7, #24]
 8009dae:	69fa      	ldr	r2, [r7, #28]
 8009db0:	e841 2300 	strex	r3, r2, [r1]
 8009db4:	617b      	str	r3, [r7, #20]
   return(result);
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1e4      	bne.n	8009d86 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009dc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f881 	bl	8009ed0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009dce:	e063      	b.n	8009e98 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00e      	beq.n	8009dfa <HAL_UART_IRQHandler+0x6c6>
 8009ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d008      	beq.n	8009dfa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009df0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f001 f841 	bl	800ae7a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009df8:	e051      	b.n	8009e9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d014      	beq.n	8009e30 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d105      	bne.n	8009e1e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d008      	beq.n	8009e30 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d03a      	beq.n	8009e9c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	4798      	blx	r3
    }
    return;
 8009e2e:	e035      	b.n	8009e9c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d009      	beq.n	8009e50 <HAL_UART_IRQHandler+0x71c>
 8009e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d003      	beq.n	8009e50 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 ffeb 	bl	800ae24 <UART_EndTransmit_IT>
    return;
 8009e4e:	e026      	b.n	8009e9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d009      	beq.n	8009e70 <HAL_UART_IRQHandler+0x73c>
 8009e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d003      	beq.n	8009e70 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f001 f81a 	bl	800aea2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e6e:	e016      	b.n	8009e9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d010      	beq.n	8009e9e <HAL_UART_IRQHandler+0x76a>
 8009e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	da0c      	bge.n	8009e9e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f001 f802 	bl	800ae8e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e8a:	e008      	b.n	8009e9e <HAL_UART_IRQHandler+0x76a>
      return;
 8009e8c:	bf00      	nop
 8009e8e:	e006      	b.n	8009e9e <HAL_UART_IRQHandler+0x76a>
    return;
 8009e90:	bf00      	nop
 8009e92:	e004      	b.n	8009e9e <HAL_UART_IRQHandler+0x76a>
      return;
 8009e94:	bf00      	nop
 8009e96:	e002      	b.n	8009e9e <HAL_UART_IRQHandler+0x76a>
      return;
 8009e98:	bf00      	nop
 8009e9a:	e000      	b.n	8009e9e <HAL_UART_IRQHandler+0x76a>
    return;
 8009e9c:	bf00      	nop
  }
}
 8009e9e:	37e8      	adds	r7, #232	; 0xe8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	effffffe 	.word	0xeffffffe

08009ea8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009eec:	b092      	sub	sp, #72	; 0x48
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	689a      	ldr	r2, [r3, #8]
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	431a      	orrs	r2, r3
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	695b      	ldr	r3, [r3, #20]
 8009f06:	431a      	orrs	r2, r3
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	69db      	ldr	r3, [r3, #28]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	4bbe      	ldr	r3, [pc, #760]	; (800a210 <UART_SetConfig+0x328>)
 8009f18:	4013      	ands	r3, r2
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	6812      	ldr	r2, [r2, #0]
 8009f1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f20:	430b      	orrs	r3, r1
 8009f22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	68da      	ldr	r2, [r3, #12]
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	430a      	orrs	r2, r1
 8009f38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4ab3      	ldr	r2, [pc, #716]	; (800a214 <UART_SetConfig+0x32c>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d004      	beq.n	8009f54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f50:	4313      	orrs	r3, r2
 8009f52:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	689a      	ldr	r2, [r3, #8]
 8009f5a:	4baf      	ldr	r3, [pc, #700]	; (800a218 <UART_SetConfig+0x330>)
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	6812      	ldr	r2, [r2, #0]
 8009f62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f64:	430b      	orrs	r3, r1
 8009f66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6e:	f023 010f 	bic.w	r1, r3, #15
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4aa6      	ldr	r2, [pc, #664]	; (800a21c <UART_SetConfig+0x334>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d177      	bne.n	800a078 <UART_SetConfig+0x190>
 8009f88:	4ba5      	ldr	r3, [pc, #660]	; (800a220 <UART_SetConfig+0x338>)
 8009f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f90:	2b28      	cmp	r3, #40	; 0x28
 8009f92:	d86d      	bhi.n	800a070 <UART_SetConfig+0x188>
 8009f94:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <UART_SetConfig+0xb4>)
 8009f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9a:	bf00      	nop
 8009f9c:	0800a041 	.word	0x0800a041
 8009fa0:	0800a071 	.word	0x0800a071
 8009fa4:	0800a071 	.word	0x0800a071
 8009fa8:	0800a071 	.word	0x0800a071
 8009fac:	0800a071 	.word	0x0800a071
 8009fb0:	0800a071 	.word	0x0800a071
 8009fb4:	0800a071 	.word	0x0800a071
 8009fb8:	0800a071 	.word	0x0800a071
 8009fbc:	0800a049 	.word	0x0800a049
 8009fc0:	0800a071 	.word	0x0800a071
 8009fc4:	0800a071 	.word	0x0800a071
 8009fc8:	0800a071 	.word	0x0800a071
 8009fcc:	0800a071 	.word	0x0800a071
 8009fd0:	0800a071 	.word	0x0800a071
 8009fd4:	0800a071 	.word	0x0800a071
 8009fd8:	0800a071 	.word	0x0800a071
 8009fdc:	0800a051 	.word	0x0800a051
 8009fe0:	0800a071 	.word	0x0800a071
 8009fe4:	0800a071 	.word	0x0800a071
 8009fe8:	0800a071 	.word	0x0800a071
 8009fec:	0800a071 	.word	0x0800a071
 8009ff0:	0800a071 	.word	0x0800a071
 8009ff4:	0800a071 	.word	0x0800a071
 8009ff8:	0800a071 	.word	0x0800a071
 8009ffc:	0800a059 	.word	0x0800a059
 800a000:	0800a071 	.word	0x0800a071
 800a004:	0800a071 	.word	0x0800a071
 800a008:	0800a071 	.word	0x0800a071
 800a00c:	0800a071 	.word	0x0800a071
 800a010:	0800a071 	.word	0x0800a071
 800a014:	0800a071 	.word	0x0800a071
 800a018:	0800a071 	.word	0x0800a071
 800a01c:	0800a061 	.word	0x0800a061
 800a020:	0800a071 	.word	0x0800a071
 800a024:	0800a071 	.word	0x0800a071
 800a028:	0800a071 	.word	0x0800a071
 800a02c:	0800a071 	.word	0x0800a071
 800a030:	0800a071 	.word	0x0800a071
 800a034:	0800a071 	.word	0x0800a071
 800a038:	0800a071 	.word	0x0800a071
 800a03c:	0800a069 	.word	0x0800a069
 800a040:	2301      	movs	r3, #1
 800a042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a046:	e222      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a048:	2304      	movs	r3, #4
 800a04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a04e:	e21e      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a050:	2308      	movs	r3, #8
 800a052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a056:	e21a      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a058:	2310      	movs	r3, #16
 800a05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a05e:	e216      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a060:	2320      	movs	r3, #32
 800a062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a066:	e212      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a068:	2340      	movs	r3, #64	; 0x40
 800a06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a06e:	e20e      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a070:	2380      	movs	r3, #128	; 0x80
 800a072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a076:	e20a      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a69      	ldr	r2, [pc, #420]	; (800a224 <UART_SetConfig+0x33c>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d130      	bne.n	800a0e4 <UART_SetConfig+0x1fc>
 800a082:	4b67      	ldr	r3, [pc, #412]	; (800a220 <UART_SetConfig+0x338>)
 800a084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a086:	f003 0307 	and.w	r3, r3, #7
 800a08a:	2b05      	cmp	r3, #5
 800a08c:	d826      	bhi.n	800a0dc <UART_SetConfig+0x1f4>
 800a08e:	a201      	add	r2, pc, #4	; (adr r2, 800a094 <UART_SetConfig+0x1ac>)
 800a090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a094:	0800a0ad 	.word	0x0800a0ad
 800a098:	0800a0b5 	.word	0x0800a0b5
 800a09c:	0800a0bd 	.word	0x0800a0bd
 800a0a0:	0800a0c5 	.word	0x0800a0c5
 800a0a4:	0800a0cd 	.word	0x0800a0cd
 800a0a8:	0800a0d5 	.word	0x0800a0d5
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0b2:	e1ec      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a0b4:	2304      	movs	r3, #4
 800a0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ba:	e1e8      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a0bc:	2308      	movs	r3, #8
 800a0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0c2:	e1e4      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a0c4:	2310      	movs	r3, #16
 800a0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ca:	e1e0      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a0cc:	2320      	movs	r3, #32
 800a0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0d2:	e1dc      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a0d4:	2340      	movs	r3, #64	; 0x40
 800a0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0da:	e1d8      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a0dc:	2380      	movs	r3, #128	; 0x80
 800a0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0e2:	e1d4      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a4f      	ldr	r2, [pc, #316]	; (800a228 <UART_SetConfig+0x340>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d130      	bne.n	800a150 <UART_SetConfig+0x268>
 800a0ee:	4b4c      	ldr	r3, [pc, #304]	; (800a220 <UART_SetConfig+0x338>)
 800a0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f2:	f003 0307 	and.w	r3, r3, #7
 800a0f6:	2b05      	cmp	r3, #5
 800a0f8:	d826      	bhi.n	800a148 <UART_SetConfig+0x260>
 800a0fa:	a201      	add	r2, pc, #4	; (adr r2, 800a100 <UART_SetConfig+0x218>)
 800a0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a100:	0800a119 	.word	0x0800a119
 800a104:	0800a121 	.word	0x0800a121
 800a108:	0800a129 	.word	0x0800a129
 800a10c:	0800a131 	.word	0x0800a131
 800a110:	0800a139 	.word	0x0800a139
 800a114:	0800a141 	.word	0x0800a141
 800a118:	2300      	movs	r3, #0
 800a11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a11e:	e1b6      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a120:	2304      	movs	r3, #4
 800a122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a126:	e1b2      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a128:	2308      	movs	r3, #8
 800a12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a12e:	e1ae      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a130:	2310      	movs	r3, #16
 800a132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a136:	e1aa      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a138:	2320      	movs	r3, #32
 800a13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a13e:	e1a6      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a140:	2340      	movs	r3, #64	; 0x40
 800a142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a146:	e1a2      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a148:	2380      	movs	r3, #128	; 0x80
 800a14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a14e:	e19e      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a35      	ldr	r2, [pc, #212]	; (800a22c <UART_SetConfig+0x344>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d130      	bne.n	800a1bc <UART_SetConfig+0x2d4>
 800a15a:	4b31      	ldr	r3, [pc, #196]	; (800a220 <UART_SetConfig+0x338>)
 800a15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a15e:	f003 0307 	and.w	r3, r3, #7
 800a162:	2b05      	cmp	r3, #5
 800a164:	d826      	bhi.n	800a1b4 <UART_SetConfig+0x2cc>
 800a166:	a201      	add	r2, pc, #4	; (adr r2, 800a16c <UART_SetConfig+0x284>)
 800a168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16c:	0800a185 	.word	0x0800a185
 800a170:	0800a18d 	.word	0x0800a18d
 800a174:	0800a195 	.word	0x0800a195
 800a178:	0800a19d 	.word	0x0800a19d
 800a17c:	0800a1a5 	.word	0x0800a1a5
 800a180:	0800a1ad 	.word	0x0800a1ad
 800a184:	2300      	movs	r3, #0
 800a186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a18a:	e180      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a18c:	2304      	movs	r3, #4
 800a18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a192:	e17c      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a194:	2308      	movs	r3, #8
 800a196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a19a:	e178      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a19c:	2310      	movs	r3, #16
 800a19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1a2:	e174      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a1a4:	2320      	movs	r3, #32
 800a1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1aa:	e170      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a1ac:	2340      	movs	r3, #64	; 0x40
 800a1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1b2:	e16c      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a1b4:	2380      	movs	r3, #128	; 0x80
 800a1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ba:	e168      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a1b      	ldr	r2, [pc, #108]	; (800a230 <UART_SetConfig+0x348>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d142      	bne.n	800a24c <UART_SetConfig+0x364>
 800a1c6:	4b16      	ldr	r3, [pc, #88]	; (800a220 <UART_SetConfig+0x338>)
 800a1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ca:	f003 0307 	and.w	r3, r3, #7
 800a1ce:	2b05      	cmp	r3, #5
 800a1d0:	d838      	bhi.n	800a244 <UART_SetConfig+0x35c>
 800a1d2:	a201      	add	r2, pc, #4	; (adr r2, 800a1d8 <UART_SetConfig+0x2f0>)
 800a1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d8:	0800a1f1 	.word	0x0800a1f1
 800a1dc:	0800a1f9 	.word	0x0800a1f9
 800a1e0:	0800a201 	.word	0x0800a201
 800a1e4:	0800a209 	.word	0x0800a209
 800a1e8:	0800a235 	.word	0x0800a235
 800a1ec:	0800a23d 	.word	0x0800a23d
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1f6:	e14a      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a1f8:	2304      	movs	r3, #4
 800a1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1fe:	e146      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a200:	2308      	movs	r3, #8
 800a202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a206:	e142      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a208:	2310      	movs	r3, #16
 800a20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a20e:	e13e      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a210:	cfff69f3 	.word	0xcfff69f3
 800a214:	58000c00 	.word	0x58000c00
 800a218:	11fff4ff 	.word	0x11fff4ff
 800a21c:	40011000 	.word	0x40011000
 800a220:	58024400 	.word	0x58024400
 800a224:	40004400 	.word	0x40004400
 800a228:	40004800 	.word	0x40004800
 800a22c:	40004c00 	.word	0x40004c00
 800a230:	40005000 	.word	0x40005000
 800a234:	2320      	movs	r3, #32
 800a236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a23a:	e128      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a23c:	2340      	movs	r3, #64	; 0x40
 800a23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a242:	e124      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a244:	2380      	movs	r3, #128	; 0x80
 800a246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a24a:	e120      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4acb      	ldr	r2, [pc, #812]	; (800a580 <UART_SetConfig+0x698>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d176      	bne.n	800a344 <UART_SetConfig+0x45c>
 800a256:	4bcb      	ldr	r3, [pc, #812]	; (800a584 <UART_SetConfig+0x69c>)
 800a258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a25a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a25e:	2b28      	cmp	r3, #40	; 0x28
 800a260:	d86c      	bhi.n	800a33c <UART_SetConfig+0x454>
 800a262:	a201      	add	r2, pc, #4	; (adr r2, 800a268 <UART_SetConfig+0x380>)
 800a264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a268:	0800a30d 	.word	0x0800a30d
 800a26c:	0800a33d 	.word	0x0800a33d
 800a270:	0800a33d 	.word	0x0800a33d
 800a274:	0800a33d 	.word	0x0800a33d
 800a278:	0800a33d 	.word	0x0800a33d
 800a27c:	0800a33d 	.word	0x0800a33d
 800a280:	0800a33d 	.word	0x0800a33d
 800a284:	0800a33d 	.word	0x0800a33d
 800a288:	0800a315 	.word	0x0800a315
 800a28c:	0800a33d 	.word	0x0800a33d
 800a290:	0800a33d 	.word	0x0800a33d
 800a294:	0800a33d 	.word	0x0800a33d
 800a298:	0800a33d 	.word	0x0800a33d
 800a29c:	0800a33d 	.word	0x0800a33d
 800a2a0:	0800a33d 	.word	0x0800a33d
 800a2a4:	0800a33d 	.word	0x0800a33d
 800a2a8:	0800a31d 	.word	0x0800a31d
 800a2ac:	0800a33d 	.word	0x0800a33d
 800a2b0:	0800a33d 	.word	0x0800a33d
 800a2b4:	0800a33d 	.word	0x0800a33d
 800a2b8:	0800a33d 	.word	0x0800a33d
 800a2bc:	0800a33d 	.word	0x0800a33d
 800a2c0:	0800a33d 	.word	0x0800a33d
 800a2c4:	0800a33d 	.word	0x0800a33d
 800a2c8:	0800a325 	.word	0x0800a325
 800a2cc:	0800a33d 	.word	0x0800a33d
 800a2d0:	0800a33d 	.word	0x0800a33d
 800a2d4:	0800a33d 	.word	0x0800a33d
 800a2d8:	0800a33d 	.word	0x0800a33d
 800a2dc:	0800a33d 	.word	0x0800a33d
 800a2e0:	0800a33d 	.word	0x0800a33d
 800a2e4:	0800a33d 	.word	0x0800a33d
 800a2e8:	0800a32d 	.word	0x0800a32d
 800a2ec:	0800a33d 	.word	0x0800a33d
 800a2f0:	0800a33d 	.word	0x0800a33d
 800a2f4:	0800a33d 	.word	0x0800a33d
 800a2f8:	0800a33d 	.word	0x0800a33d
 800a2fc:	0800a33d 	.word	0x0800a33d
 800a300:	0800a33d 	.word	0x0800a33d
 800a304:	0800a33d 	.word	0x0800a33d
 800a308:	0800a335 	.word	0x0800a335
 800a30c:	2301      	movs	r3, #1
 800a30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a312:	e0bc      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a314:	2304      	movs	r3, #4
 800a316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31a:	e0b8      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a31c:	2308      	movs	r3, #8
 800a31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a322:	e0b4      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a324:	2310      	movs	r3, #16
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a32a:	e0b0      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a32c:	2320      	movs	r3, #32
 800a32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a332:	e0ac      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a334:	2340      	movs	r3, #64	; 0x40
 800a336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a33a:	e0a8      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a33c:	2380      	movs	r3, #128	; 0x80
 800a33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a342:	e0a4      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a8f      	ldr	r2, [pc, #572]	; (800a588 <UART_SetConfig+0x6a0>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d130      	bne.n	800a3b0 <UART_SetConfig+0x4c8>
 800a34e:	4b8d      	ldr	r3, [pc, #564]	; (800a584 <UART_SetConfig+0x69c>)
 800a350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a352:	f003 0307 	and.w	r3, r3, #7
 800a356:	2b05      	cmp	r3, #5
 800a358:	d826      	bhi.n	800a3a8 <UART_SetConfig+0x4c0>
 800a35a:	a201      	add	r2, pc, #4	; (adr r2, 800a360 <UART_SetConfig+0x478>)
 800a35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a360:	0800a379 	.word	0x0800a379
 800a364:	0800a381 	.word	0x0800a381
 800a368:	0800a389 	.word	0x0800a389
 800a36c:	0800a391 	.word	0x0800a391
 800a370:	0800a399 	.word	0x0800a399
 800a374:	0800a3a1 	.word	0x0800a3a1
 800a378:	2300      	movs	r3, #0
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a37e:	e086      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a380:	2304      	movs	r3, #4
 800a382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a386:	e082      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a388:	2308      	movs	r3, #8
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38e:	e07e      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a390:	2310      	movs	r3, #16
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a396:	e07a      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a398:	2320      	movs	r3, #32
 800a39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a39e:	e076      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a3a0:	2340      	movs	r3, #64	; 0x40
 800a3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3a6:	e072      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a3a8:	2380      	movs	r3, #128	; 0x80
 800a3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ae:	e06e      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a75      	ldr	r2, [pc, #468]	; (800a58c <UART_SetConfig+0x6a4>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d130      	bne.n	800a41c <UART_SetConfig+0x534>
 800a3ba:	4b72      	ldr	r3, [pc, #456]	; (800a584 <UART_SetConfig+0x69c>)
 800a3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3be:	f003 0307 	and.w	r3, r3, #7
 800a3c2:	2b05      	cmp	r3, #5
 800a3c4:	d826      	bhi.n	800a414 <UART_SetConfig+0x52c>
 800a3c6:	a201      	add	r2, pc, #4	; (adr r2, 800a3cc <UART_SetConfig+0x4e4>)
 800a3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3cc:	0800a3e5 	.word	0x0800a3e5
 800a3d0:	0800a3ed 	.word	0x0800a3ed
 800a3d4:	0800a3f5 	.word	0x0800a3f5
 800a3d8:	0800a3fd 	.word	0x0800a3fd
 800a3dc:	0800a405 	.word	0x0800a405
 800a3e0:	0800a40d 	.word	0x0800a40d
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ea:	e050      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a3ec:	2304      	movs	r3, #4
 800a3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3f2:	e04c      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a3f4:	2308      	movs	r3, #8
 800a3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3fa:	e048      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a3fc:	2310      	movs	r3, #16
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a402:	e044      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a404:	2320      	movs	r3, #32
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a40a:	e040      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a40c:	2340      	movs	r3, #64	; 0x40
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a412:	e03c      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a414:	2380      	movs	r3, #128	; 0x80
 800a416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a41a:	e038      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a5b      	ldr	r2, [pc, #364]	; (800a590 <UART_SetConfig+0x6a8>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d130      	bne.n	800a488 <UART_SetConfig+0x5a0>
 800a426:	4b57      	ldr	r3, [pc, #348]	; (800a584 <UART_SetConfig+0x69c>)
 800a428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a42a:	f003 0307 	and.w	r3, r3, #7
 800a42e:	2b05      	cmp	r3, #5
 800a430:	d826      	bhi.n	800a480 <UART_SetConfig+0x598>
 800a432:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <UART_SetConfig+0x550>)
 800a434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a438:	0800a451 	.word	0x0800a451
 800a43c:	0800a459 	.word	0x0800a459
 800a440:	0800a461 	.word	0x0800a461
 800a444:	0800a469 	.word	0x0800a469
 800a448:	0800a471 	.word	0x0800a471
 800a44c:	0800a479 	.word	0x0800a479
 800a450:	2302      	movs	r3, #2
 800a452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a456:	e01a      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a458:	2304      	movs	r3, #4
 800a45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a45e:	e016      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a460:	2308      	movs	r3, #8
 800a462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a466:	e012      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a468:	2310      	movs	r3, #16
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a46e:	e00e      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a470:	2320      	movs	r3, #32
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a476:	e00a      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a478:	2340      	movs	r3, #64	; 0x40
 800a47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a47e:	e006      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a480:	2380      	movs	r3, #128	; 0x80
 800a482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a486:	e002      	b.n	800a48e <UART_SetConfig+0x5a6>
 800a488:	2380      	movs	r3, #128	; 0x80
 800a48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a3f      	ldr	r2, [pc, #252]	; (800a590 <UART_SetConfig+0x6a8>)
 800a494:	4293      	cmp	r3, r2
 800a496:	f040 80f8 	bne.w	800a68a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a49a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a49e:	2b20      	cmp	r3, #32
 800a4a0:	dc46      	bgt.n	800a530 <UART_SetConfig+0x648>
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	f2c0 8082 	blt.w	800a5ac <UART_SetConfig+0x6c4>
 800a4a8:	3b02      	subs	r3, #2
 800a4aa:	2b1e      	cmp	r3, #30
 800a4ac:	d87e      	bhi.n	800a5ac <UART_SetConfig+0x6c4>
 800a4ae:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <UART_SetConfig+0x5cc>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a537 	.word	0x0800a537
 800a4b8:	0800a5ad 	.word	0x0800a5ad
 800a4bc:	0800a53f 	.word	0x0800a53f
 800a4c0:	0800a5ad 	.word	0x0800a5ad
 800a4c4:	0800a5ad 	.word	0x0800a5ad
 800a4c8:	0800a5ad 	.word	0x0800a5ad
 800a4cc:	0800a54f 	.word	0x0800a54f
 800a4d0:	0800a5ad 	.word	0x0800a5ad
 800a4d4:	0800a5ad 	.word	0x0800a5ad
 800a4d8:	0800a5ad 	.word	0x0800a5ad
 800a4dc:	0800a5ad 	.word	0x0800a5ad
 800a4e0:	0800a5ad 	.word	0x0800a5ad
 800a4e4:	0800a5ad 	.word	0x0800a5ad
 800a4e8:	0800a5ad 	.word	0x0800a5ad
 800a4ec:	0800a55f 	.word	0x0800a55f
 800a4f0:	0800a5ad 	.word	0x0800a5ad
 800a4f4:	0800a5ad 	.word	0x0800a5ad
 800a4f8:	0800a5ad 	.word	0x0800a5ad
 800a4fc:	0800a5ad 	.word	0x0800a5ad
 800a500:	0800a5ad 	.word	0x0800a5ad
 800a504:	0800a5ad 	.word	0x0800a5ad
 800a508:	0800a5ad 	.word	0x0800a5ad
 800a50c:	0800a5ad 	.word	0x0800a5ad
 800a510:	0800a5ad 	.word	0x0800a5ad
 800a514:	0800a5ad 	.word	0x0800a5ad
 800a518:	0800a5ad 	.word	0x0800a5ad
 800a51c:	0800a5ad 	.word	0x0800a5ad
 800a520:	0800a5ad 	.word	0x0800a5ad
 800a524:	0800a5ad 	.word	0x0800a5ad
 800a528:	0800a5ad 	.word	0x0800a5ad
 800a52c:	0800a59f 	.word	0x0800a59f
 800a530:	2b40      	cmp	r3, #64	; 0x40
 800a532:	d037      	beq.n	800a5a4 <UART_SetConfig+0x6bc>
 800a534:	e03a      	b.n	800a5ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a536:	f7fc ff85 	bl	8007444 <HAL_RCCEx_GetD3PCLK1Freq>
 800a53a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a53c:	e03c      	b.n	800a5b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a53e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a542:	4618      	mov	r0, r3
 800a544:	f7fc ff94 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a54c:	e034      	b.n	800a5b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a54e:	f107 0318 	add.w	r3, r7, #24
 800a552:	4618      	mov	r0, r3
 800a554:	f7fd f8e0 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a55c:	e02c      	b.n	800a5b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a55e:	4b09      	ldr	r3, [pc, #36]	; (800a584 <UART_SetConfig+0x69c>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 0320 	and.w	r3, r3, #32
 800a566:	2b00      	cmp	r3, #0
 800a568:	d016      	beq.n	800a598 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a56a:	4b06      	ldr	r3, [pc, #24]	; (800a584 <UART_SetConfig+0x69c>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	08db      	lsrs	r3, r3, #3
 800a570:	f003 0303 	and.w	r3, r3, #3
 800a574:	4a07      	ldr	r2, [pc, #28]	; (800a594 <UART_SetConfig+0x6ac>)
 800a576:	fa22 f303 	lsr.w	r3, r2, r3
 800a57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a57c:	e01c      	b.n	800a5b8 <UART_SetConfig+0x6d0>
 800a57e:	bf00      	nop
 800a580:	40011400 	.word	0x40011400
 800a584:	58024400 	.word	0x58024400
 800a588:	40007800 	.word	0x40007800
 800a58c:	40007c00 	.word	0x40007c00
 800a590:	58000c00 	.word	0x58000c00
 800a594:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a598:	4b9d      	ldr	r3, [pc, #628]	; (800a810 <UART_SetConfig+0x928>)
 800a59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a59c:	e00c      	b.n	800a5b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a59e:	4b9d      	ldr	r3, [pc, #628]	; (800a814 <UART_SetConfig+0x92c>)
 800a5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5a2:	e009      	b.n	800a5b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5aa:	e005      	b.n	800a5b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a5b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f000 81de 	beq.w	800a97c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	4a94      	ldr	r2, [pc, #592]	; (800a818 <UART_SetConfig+0x930>)
 800a5c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5d2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	005b      	lsls	r3, r3, #1
 800a5dc:	4413      	add	r3, r2
 800a5de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d305      	bcc.n	800a5f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d903      	bls.n	800a5f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a5f6:	e1c1      	b.n	800a97c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	60bb      	str	r3, [r7, #8]
 800a5fe:	60fa      	str	r2, [r7, #12]
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a604:	4a84      	ldr	r2, [pc, #528]	; (800a818 <UART_SetConfig+0x930>)
 800a606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	2200      	movs	r2, #0
 800a60e:	603b      	str	r3, [r7, #0]
 800a610:	607a      	str	r2, [r7, #4]
 800a612:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a616:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a61a:	f7f5 fe5d 	bl	80002d8 <__aeabi_uldivmod>
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	4610      	mov	r0, r2
 800a624:	4619      	mov	r1, r3
 800a626:	f04f 0200 	mov.w	r2, #0
 800a62a:	f04f 0300 	mov.w	r3, #0
 800a62e:	020b      	lsls	r3, r1, #8
 800a630:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a634:	0202      	lsls	r2, r0, #8
 800a636:	6979      	ldr	r1, [r7, #20]
 800a638:	6849      	ldr	r1, [r1, #4]
 800a63a:	0849      	lsrs	r1, r1, #1
 800a63c:	2000      	movs	r0, #0
 800a63e:	460c      	mov	r4, r1
 800a640:	4605      	mov	r5, r0
 800a642:	eb12 0804 	adds.w	r8, r2, r4
 800a646:	eb43 0905 	adc.w	r9, r3, r5
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	469a      	mov	sl, r3
 800a652:	4693      	mov	fp, r2
 800a654:	4652      	mov	r2, sl
 800a656:	465b      	mov	r3, fp
 800a658:	4640      	mov	r0, r8
 800a65a:	4649      	mov	r1, r9
 800a65c:	f7f5 fe3c 	bl	80002d8 <__aeabi_uldivmod>
 800a660:	4602      	mov	r2, r0
 800a662:	460b      	mov	r3, r1
 800a664:	4613      	mov	r3, r2
 800a666:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a66e:	d308      	bcc.n	800a682 <UART_SetConfig+0x79a>
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a676:	d204      	bcs.n	800a682 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a67e:	60da      	str	r2, [r3, #12]
 800a680:	e17c      	b.n	800a97c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a688:	e178      	b.n	800a97c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	69db      	ldr	r3, [r3, #28]
 800a68e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a692:	f040 80c5 	bne.w	800a820 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a696:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a69a:	2b20      	cmp	r3, #32
 800a69c:	dc48      	bgt.n	800a730 <UART_SetConfig+0x848>
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	db7b      	blt.n	800a79a <UART_SetConfig+0x8b2>
 800a6a2:	2b20      	cmp	r3, #32
 800a6a4:	d879      	bhi.n	800a79a <UART_SetConfig+0x8b2>
 800a6a6:	a201      	add	r2, pc, #4	; (adr r2, 800a6ac <UART_SetConfig+0x7c4>)
 800a6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ac:	0800a737 	.word	0x0800a737
 800a6b0:	0800a73f 	.word	0x0800a73f
 800a6b4:	0800a79b 	.word	0x0800a79b
 800a6b8:	0800a79b 	.word	0x0800a79b
 800a6bc:	0800a747 	.word	0x0800a747
 800a6c0:	0800a79b 	.word	0x0800a79b
 800a6c4:	0800a79b 	.word	0x0800a79b
 800a6c8:	0800a79b 	.word	0x0800a79b
 800a6cc:	0800a757 	.word	0x0800a757
 800a6d0:	0800a79b 	.word	0x0800a79b
 800a6d4:	0800a79b 	.word	0x0800a79b
 800a6d8:	0800a79b 	.word	0x0800a79b
 800a6dc:	0800a79b 	.word	0x0800a79b
 800a6e0:	0800a79b 	.word	0x0800a79b
 800a6e4:	0800a79b 	.word	0x0800a79b
 800a6e8:	0800a79b 	.word	0x0800a79b
 800a6ec:	0800a767 	.word	0x0800a767
 800a6f0:	0800a79b 	.word	0x0800a79b
 800a6f4:	0800a79b 	.word	0x0800a79b
 800a6f8:	0800a79b 	.word	0x0800a79b
 800a6fc:	0800a79b 	.word	0x0800a79b
 800a700:	0800a79b 	.word	0x0800a79b
 800a704:	0800a79b 	.word	0x0800a79b
 800a708:	0800a79b 	.word	0x0800a79b
 800a70c:	0800a79b 	.word	0x0800a79b
 800a710:	0800a79b 	.word	0x0800a79b
 800a714:	0800a79b 	.word	0x0800a79b
 800a718:	0800a79b 	.word	0x0800a79b
 800a71c:	0800a79b 	.word	0x0800a79b
 800a720:	0800a79b 	.word	0x0800a79b
 800a724:	0800a79b 	.word	0x0800a79b
 800a728:	0800a79b 	.word	0x0800a79b
 800a72c:	0800a78d 	.word	0x0800a78d
 800a730:	2b40      	cmp	r3, #64	; 0x40
 800a732:	d02e      	beq.n	800a792 <UART_SetConfig+0x8aa>
 800a734:	e031      	b.n	800a79a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a736:	f7fa fecf 	bl	80054d8 <HAL_RCC_GetPCLK1Freq>
 800a73a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a73c:	e033      	b.n	800a7a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a73e:	f7fa fee1 	bl	8005504 <HAL_RCC_GetPCLK2Freq>
 800a742:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a744:	e02f      	b.n	800a7a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fc fe90 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a754:	e027      	b.n	800a7a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a756:	f107 0318 	add.w	r3, r7, #24
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fc ffdc 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a764:	e01f      	b.n	800a7a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a766:	4b2d      	ldr	r3, [pc, #180]	; (800a81c <UART_SetConfig+0x934>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 0320 	and.w	r3, r3, #32
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d009      	beq.n	800a786 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a772:	4b2a      	ldr	r3, [pc, #168]	; (800a81c <UART_SetConfig+0x934>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	08db      	lsrs	r3, r3, #3
 800a778:	f003 0303 	and.w	r3, r3, #3
 800a77c:	4a24      	ldr	r2, [pc, #144]	; (800a810 <UART_SetConfig+0x928>)
 800a77e:	fa22 f303 	lsr.w	r3, r2, r3
 800a782:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a784:	e00f      	b.n	800a7a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a786:	4b22      	ldr	r3, [pc, #136]	; (800a810 <UART_SetConfig+0x928>)
 800a788:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a78a:	e00c      	b.n	800a7a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a78c:	4b21      	ldr	r3, [pc, #132]	; (800a814 <UART_SetConfig+0x92c>)
 800a78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a790:	e009      	b.n	800a7a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a798:	e005      	b.n	800a7a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a79a:	2300      	movs	r3, #0
 800a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a7a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 80e7 	beq.w	800a97c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b2:	4a19      	ldr	r2, [pc, #100]	; (800a818 <UART_SetConfig+0x930>)
 800a7b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7c0:	005a      	lsls	r2, r3, #1
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	085b      	lsrs	r3, r3, #1
 800a7c8:	441a      	add	r2, r3
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d6:	2b0f      	cmp	r3, #15
 800a7d8:	d916      	bls.n	800a808 <UART_SetConfig+0x920>
 800a7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7e0:	d212      	bcs.n	800a808 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	f023 030f 	bic.w	r3, r3, #15
 800a7ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ee:	085b      	lsrs	r3, r3, #1
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	f003 0307 	and.w	r3, r3, #7
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a804:	60da      	str	r2, [r3, #12]
 800a806:	e0b9      	b.n	800a97c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a80e:	e0b5      	b.n	800a97c <UART_SetConfig+0xa94>
 800a810:	03d09000 	.word	0x03d09000
 800a814:	003d0900 	.word	0x003d0900
 800a818:	0800b13c 	.word	0x0800b13c
 800a81c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a820:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a824:	2b20      	cmp	r3, #32
 800a826:	dc49      	bgt.n	800a8bc <UART_SetConfig+0x9d4>
 800a828:	2b00      	cmp	r3, #0
 800a82a:	db7c      	blt.n	800a926 <UART_SetConfig+0xa3e>
 800a82c:	2b20      	cmp	r3, #32
 800a82e:	d87a      	bhi.n	800a926 <UART_SetConfig+0xa3e>
 800a830:	a201      	add	r2, pc, #4	; (adr r2, 800a838 <UART_SetConfig+0x950>)
 800a832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a836:	bf00      	nop
 800a838:	0800a8c3 	.word	0x0800a8c3
 800a83c:	0800a8cb 	.word	0x0800a8cb
 800a840:	0800a927 	.word	0x0800a927
 800a844:	0800a927 	.word	0x0800a927
 800a848:	0800a8d3 	.word	0x0800a8d3
 800a84c:	0800a927 	.word	0x0800a927
 800a850:	0800a927 	.word	0x0800a927
 800a854:	0800a927 	.word	0x0800a927
 800a858:	0800a8e3 	.word	0x0800a8e3
 800a85c:	0800a927 	.word	0x0800a927
 800a860:	0800a927 	.word	0x0800a927
 800a864:	0800a927 	.word	0x0800a927
 800a868:	0800a927 	.word	0x0800a927
 800a86c:	0800a927 	.word	0x0800a927
 800a870:	0800a927 	.word	0x0800a927
 800a874:	0800a927 	.word	0x0800a927
 800a878:	0800a8f3 	.word	0x0800a8f3
 800a87c:	0800a927 	.word	0x0800a927
 800a880:	0800a927 	.word	0x0800a927
 800a884:	0800a927 	.word	0x0800a927
 800a888:	0800a927 	.word	0x0800a927
 800a88c:	0800a927 	.word	0x0800a927
 800a890:	0800a927 	.word	0x0800a927
 800a894:	0800a927 	.word	0x0800a927
 800a898:	0800a927 	.word	0x0800a927
 800a89c:	0800a927 	.word	0x0800a927
 800a8a0:	0800a927 	.word	0x0800a927
 800a8a4:	0800a927 	.word	0x0800a927
 800a8a8:	0800a927 	.word	0x0800a927
 800a8ac:	0800a927 	.word	0x0800a927
 800a8b0:	0800a927 	.word	0x0800a927
 800a8b4:	0800a927 	.word	0x0800a927
 800a8b8:	0800a919 	.word	0x0800a919
 800a8bc:	2b40      	cmp	r3, #64	; 0x40
 800a8be:	d02e      	beq.n	800a91e <UART_SetConfig+0xa36>
 800a8c0:	e031      	b.n	800a926 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8c2:	f7fa fe09 	bl	80054d8 <HAL_RCC_GetPCLK1Freq>
 800a8c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8c8:	e033      	b.n	800a932 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8ca:	f7fa fe1b 	bl	8005504 <HAL_RCC_GetPCLK2Freq>
 800a8ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8d0:	e02f      	b.n	800a932 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fc fdca 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e0:	e027      	b.n	800a932 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8e2:	f107 0318 	add.w	r3, r7, #24
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fc ff16 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8f0:	e01f      	b.n	800a932 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8f2:	4b2d      	ldr	r3, [pc, #180]	; (800a9a8 <UART_SetConfig+0xac0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0320 	and.w	r3, r3, #32
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d009      	beq.n	800a912 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8fe:	4b2a      	ldr	r3, [pc, #168]	; (800a9a8 <UART_SetConfig+0xac0>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	08db      	lsrs	r3, r3, #3
 800a904:	f003 0303 	and.w	r3, r3, #3
 800a908:	4a28      	ldr	r2, [pc, #160]	; (800a9ac <UART_SetConfig+0xac4>)
 800a90a:	fa22 f303 	lsr.w	r3, r2, r3
 800a90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a910:	e00f      	b.n	800a932 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a912:	4b26      	ldr	r3, [pc, #152]	; (800a9ac <UART_SetConfig+0xac4>)
 800a914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a916:	e00c      	b.n	800a932 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a918:	4b25      	ldr	r3, [pc, #148]	; (800a9b0 <UART_SetConfig+0xac8>)
 800a91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a91c:	e009      	b.n	800a932 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a91e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a924:	e005      	b.n	800a932 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a926:	2300      	movs	r3, #0
 800a928:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a930:	bf00      	nop
    }

    if (pclk != 0U)
 800a932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a934:	2b00      	cmp	r3, #0
 800a936:	d021      	beq.n	800a97c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93c:	4a1d      	ldr	r2, [pc, #116]	; (800a9b4 <UART_SetConfig+0xacc>)
 800a93e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a942:	461a      	mov	r2, r3
 800a944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a946:	fbb3 f2f2 	udiv	r2, r3, r2
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	085b      	lsrs	r3, r3, #1
 800a950:	441a      	add	r2, r3
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	fbb2 f3f3 	udiv	r3, r2, r3
 800a95a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	2b0f      	cmp	r3, #15
 800a960:	d909      	bls.n	800a976 <UART_SetConfig+0xa8e>
 800a962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a968:	d205      	bcs.n	800a976 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	60da      	str	r2, [r3, #12]
 800a974:	e002      	b.n	800a97c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	2201      	movs	r2, #1
 800a980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	2201      	movs	r2, #1
 800a988:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	2200      	movs	r2, #0
 800a990:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	2200      	movs	r2, #0
 800a996:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a998:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3748      	adds	r7, #72	; 0x48
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9a6:	bf00      	nop
 800a9a8:	58024400 	.word	0x58024400
 800a9ac:	03d09000 	.word	0x03d09000
 800a9b0:	003d0900 	.word	0x003d0900
 800a9b4:	0800b13c 	.word	0x0800b13c

0800a9b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c4:	f003 0308 	and.w	r3, r3, #8
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00a      	beq.n	800a9e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00a      	beq.n	800aa04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	430a      	orrs	r2, r1
 800aa02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa08:	f003 0302 	and.w	r3, r3, #2
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00a      	beq.n	800aa26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	430a      	orrs	r2, r1
 800aa24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2a:	f003 0304 	and.w	r3, r3, #4
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00a      	beq.n	800aa48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	430a      	orrs	r2, r1
 800aa46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4c:	f003 0310 	and.w	r3, r3, #16
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00a      	beq.n	800aa6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	430a      	orrs	r2, r1
 800aa68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6e:	f003 0320 	and.w	r3, r3, #32
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00a      	beq.n	800aa8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	430a      	orrs	r2, r1
 800aa8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d01a      	beq.n	800aace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aab6:	d10a      	bne.n	800aace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	430a      	orrs	r2, r1
 800aacc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00a      	beq.n	800aaf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	430a      	orrs	r2, r1
 800aaee:	605a      	str	r2, [r3, #4]
  }
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b098      	sub	sp, #96	; 0x60
 800ab00:	af02      	add	r7, sp, #8
 800ab02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab0c:	f7f7 f8de 	bl	8001ccc <HAL_GetTick>
 800ab10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 0308 	and.w	r3, r3, #8
 800ab1c:	2b08      	cmp	r3, #8
 800ab1e:	d12f      	bne.n	800ab80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 f88e 	bl	800ac50 <UART_WaitOnFlagUntilTimeout>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d022      	beq.n	800ab80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab42:	e853 3f00 	ldrex	r3, [r3]
 800ab46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab4e:	653b      	str	r3, [r7, #80]	; 0x50
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	461a      	mov	r2, r3
 800ab56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab58:	647b      	str	r3, [r7, #68]	; 0x44
 800ab5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab60:	e841 2300 	strex	r3, r2, [r1]
 800ab64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1e6      	bne.n	800ab3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2220      	movs	r2, #32
 800ab70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	e063      	b.n	800ac48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 0304 	and.w	r3, r3, #4
 800ab8a:	2b04      	cmp	r3, #4
 800ab8c:	d149      	bne.n	800ac22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab96:	2200      	movs	r2, #0
 800ab98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f857 	bl	800ac50 <UART_WaitOnFlagUntilTimeout>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d03c      	beq.n	800ac22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb0:	e853 3f00 	ldrex	r3, [r3]
 800abb4:	623b      	str	r3, [r7, #32]
   return(result);
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abc6:	633b      	str	r3, [r7, #48]	; 0x30
 800abc8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abce:	e841 2300 	strex	r3, r2, [r1]
 800abd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1e6      	bne.n	800aba8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3308      	adds	r3, #8
 800abe0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	e853 3f00 	ldrex	r3, [r3]
 800abe8:	60fb      	str	r3, [r7, #12]
   return(result);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f023 0301 	bic.w	r3, r3, #1
 800abf0:	64bb      	str	r3, [r7, #72]	; 0x48
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3308      	adds	r3, #8
 800abf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abfa:	61fa      	str	r2, [r7, #28]
 800abfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfe:	69b9      	ldr	r1, [r7, #24]
 800ac00:	69fa      	ldr	r2, [r7, #28]
 800ac02:	e841 2300 	strex	r3, r2, [r1]
 800ac06:	617b      	str	r3, [r7, #20]
   return(result);
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1e5      	bne.n	800abda <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2220      	movs	r2, #32
 800ac12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac1e:	2303      	movs	r3, #3
 800ac20:	e012      	b.n	800ac48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2220      	movs	r2, #32
 800ac26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2220      	movs	r2, #32
 800ac2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3758      	adds	r7, #88	; 0x58
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	603b      	str	r3, [r7, #0]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac60:	e04f      	b.n	800ad02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac68:	d04b      	beq.n	800ad02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac6a:	f7f7 f82f 	bl	8001ccc <HAL_GetTick>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	69ba      	ldr	r2, [r7, #24]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d302      	bcc.n	800ac80 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d101      	bne.n	800ac84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac80:	2303      	movs	r3, #3
 800ac82:	e04e      	b.n	800ad22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0304 	and.w	r3, r3, #4
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d037      	beq.n	800ad02 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2b80      	cmp	r3, #128	; 0x80
 800ac96:	d034      	beq.n	800ad02 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	2b40      	cmp	r3, #64	; 0x40
 800ac9c:	d031      	beq.n	800ad02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	69db      	ldr	r3, [r3, #28]
 800aca4:	f003 0308 	and.w	r3, r3, #8
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d110      	bne.n	800acce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2208      	movs	r2, #8
 800acb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f000 f839 	bl	800ad2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2208      	movs	r2, #8
 800acbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e029      	b.n	800ad22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	69db      	ldr	r3, [r3, #28]
 800acd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acdc:	d111      	bne.n	800ad02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ace6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f000 f81f 	bl	800ad2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2220      	movs	r2, #32
 800acf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e00f      	b.n	800ad22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	69da      	ldr	r2, [r3, #28]
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	bf0c      	ite	eq
 800ad12:	2301      	moveq	r3, #1
 800ad14:	2300      	movne	r3, #0
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	461a      	mov	r2, r3
 800ad1a:	79fb      	ldrb	r3, [r7, #7]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d0a0      	beq.n	800ac62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
	...

0800ad2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b095      	sub	sp, #84	; 0x54
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3c:	e853 3f00 	ldrex	r3, [r3]
 800ad40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad48:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad52:	643b      	str	r3, [r7, #64]	; 0x40
 800ad54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad5a:	e841 2300 	strex	r3, r2, [r1]
 800ad5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1e6      	bne.n	800ad34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3308      	adds	r3, #8
 800ad6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6e:	6a3b      	ldr	r3, [r7, #32]
 800ad70:	e853 3f00 	ldrex	r3, [r3]
 800ad74:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad76:	69fa      	ldr	r2, [r7, #28]
 800ad78:	4b1e      	ldr	r3, [pc, #120]	; (800adf4 <UART_EndRxTransfer+0xc8>)
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3308      	adds	r3, #8
 800ad84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad86:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad8e:	e841 2300 	strex	r3, r2, [r1]
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1e5      	bne.n	800ad66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d118      	bne.n	800add4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	e853 3f00 	ldrex	r3, [r3]
 800adae:	60bb      	str	r3, [r7, #8]
   return(result);
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	f023 0310 	bic.w	r3, r3, #16
 800adb6:	647b      	str	r3, [r7, #68]	; 0x44
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	461a      	mov	r2, r3
 800adbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adc0:	61bb      	str	r3, [r7, #24]
 800adc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc4:	6979      	ldr	r1, [r7, #20]
 800adc6:	69ba      	ldr	r2, [r7, #24]
 800adc8:	e841 2300 	strex	r3, r2, [r1]
 800adcc:	613b      	str	r3, [r7, #16]
   return(result);
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1e6      	bne.n	800ada2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2220      	movs	r2, #32
 800add8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ade8:	bf00      	nop
 800adea:	3754      	adds	r7, #84	; 0x54
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	effffffe 	.word	0xeffffffe

0800adf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f7ff f850 	bl	8009ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae1c:	bf00      	nop
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b088      	sub	sp, #32
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	e853 3f00 	ldrex	r3, [r3]
 800ae38:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae40:	61fb      	str	r3, [r7, #28]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	461a      	mov	r2, r3
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	61bb      	str	r3, [r7, #24]
 800ae4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4e:	6979      	ldr	r1, [r7, #20]
 800ae50:	69ba      	ldr	r2, [r7, #24]
 800ae52:	e841 2300 	strex	r3, r2, [r1]
 800ae56:	613b      	str	r3, [r7, #16]
   return(result);
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1e6      	bne.n	800ae2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2220      	movs	r2, #32
 800ae62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7ff f81b 	bl	8009ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae72:	bf00      	nop
 800ae74:	3720      	adds	r7, #32
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b083      	sub	sp, #12
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae82:	bf00      	nop
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	b083      	sub	sp, #12
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae96:	bf00      	nop
 800ae98:	370c      	adds	r7, #12
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aea2:	b480      	push	{r7}
 800aea4:	b083      	sub	sp, #12
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aeaa:	bf00      	nop
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr

0800aeb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aeb6:	b480      	push	{r7}
 800aeb8:	b085      	sub	sp, #20
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d101      	bne.n	800aecc <HAL_UARTEx_DisableFifoMode+0x16>
 800aec8:	2302      	movs	r3, #2
 800aeca:	e027      	b.n	800af1c <HAL_UARTEx_DisableFifoMode+0x66>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2224      	movs	r2, #36	; 0x24
 800aed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f022 0201 	bic.w	r2, r2, #1
 800aef2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aefa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2220      	movs	r2, #32
 800af0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d101      	bne.n	800af40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af3c:	2302      	movs	r3, #2
 800af3e:	e02d      	b.n	800af9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2224      	movs	r2, #36	; 0x24
 800af4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f022 0201 	bic.w	r2, r2, #1
 800af66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	430a      	orrs	r2, r1
 800af7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f84f 	bl	800b020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2220      	movs	r2, #32
 800af8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d101      	bne.n	800afbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afb8:	2302      	movs	r3, #2
 800afba:	e02d      	b.n	800b018 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2224      	movs	r2, #36	; 0x24
 800afc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f022 0201 	bic.w	r2, r2, #1
 800afe2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	430a      	orrs	r2, r1
 800aff6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f811 	bl	800b020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2220      	movs	r2, #32
 800b00a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d108      	bne.n	800b042 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b040:	e031      	b.n	800b0a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b042:	2310      	movs	r3, #16
 800b044:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b046:	2310      	movs	r3, #16
 800b048:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	0e5b      	lsrs	r3, r3, #25
 800b052:	b2db      	uxtb	r3, r3
 800b054:	f003 0307 	and.w	r3, r3, #7
 800b058:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	0f5b      	lsrs	r3, r3, #29
 800b062:	b2db      	uxtb	r3, r3
 800b064:	f003 0307 	and.w	r3, r3, #7
 800b068:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b06a:	7bbb      	ldrb	r3, [r7, #14]
 800b06c:	7b3a      	ldrb	r2, [r7, #12]
 800b06e:	4911      	ldr	r1, [pc, #68]	; (800b0b4 <UARTEx_SetNbDataToProcess+0x94>)
 800b070:	5c8a      	ldrb	r2, [r1, r2]
 800b072:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b076:	7b3a      	ldrb	r2, [r7, #12]
 800b078:	490f      	ldr	r1, [pc, #60]	; (800b0b8 <UARTEx_SetNbDataToProcess+0x98>)
 800b07a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b07c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b080:	b29a      	uxth	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	7b7a      	ldrb	r2, [r7, #13]
 800b08c:	4909      	ldr	r1, [pc, #36]	; (800b0b4 <UARTEx_SetNbDataToProcess+0x94>)
 800b08e:	5c8a      	ldrb	r2, [r1, r2]
 800b090:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b094:	7b7a      	ldrb	r2, [r7, #13]
 800b096:	4908      	ldr	r1, [pc, #32]	; (800b0b8 <UARTEx_SetNbDataToProcess+0x98>)
 800b098:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b09a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b0a6:	bf00      	nop
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	0800b154 	.word	0x0800b154
 800b0b8:	0800b15c 	.word	0x0800b15c

0800b0bc <memset>:
 800b0bc:	4402      	add	r2, r0
 800b0be:	4603      	mov	r3, r0
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d100      	bne.n	800b0c6 <memset+0xa>
 800b0c4:	4770      	bx	lr
 800b0c6:	f803 1b01 	strb.w	r1, [r3], #1
 800b0ca:	e7f9      	b.n	800b0c0 <memset+0x4>

0800b0cc <__libc_init_array>:
 800b0cc:	b570      	push	{r4, r5, r6, lr}
 800b0ce:	4d0d      	ldr	r5, [pc, #52]	; (800b104 <__libc_init_array+0x38>)
 800b0d0:	4c0d      	ldr	r4, [pc, #52]	; (800b108 <__libc_init_array+0x3c>)
 800b0d2:	1b64      	subs	r4, r4, r5
 800b0d4:	10a4      	asrs	r4, r4, #2
 800b0d6:	2600      	movs	r6, #0
 800b0d8:	42a6      	cmp	r6, r4
 800b0da:	d109      	bne.n	800b0f0 <__libc_init_array+0x24>
 800b0dc:	4d0b      	ldr	r5, [pc, #44]	; (800b10c <__libc_init_array+0x40>)
 800b0de:	4c0c      	ldr	r4, [pc, #48]	; (800b110 <__libc_init_array+0x44>)
 800b0e0:	f000 f818 	bl	800b114 <_init>
 800b0e4:	1b64      	subs	r4, r4, r5
 800b0e6:	10a4      	asrs	r4, r4, #2
 800b0e8:	2600      	movs	r6, #0
 800b0ea:	42a6      	cmp	r6, r4
 800b0ec:	d105      	bne.n	800b0fa <__libc_init_array+0x2e>
 800b0ee:	bd70      	pop	{r4, r5, r6, pc}
 800b0f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0f4:	4798      	blx	r3
 800b0f6:	3601      	adds	r6, #1
 800b0f8:	e7ee      	b.n	800b0d8 <__libc_init_array+0xc>
 800b0fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0fe:	4798      	blx	r3
 800b100:	3601      	adds	r6, #1
 800b102:	e7f2      	b.n	800b0ea <__libc_init_array+0x1e>
 800b104:	0800b16c 	.word	0x0800b16c
 800b108:	0800b16c 	.word	0x0800b16c
 800b10c:	0800b16c 	.word	0x0800b16c
 800b110:	0800b170 	.word	0x0800b170

0800b114 <_init>:
 800b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b116:	bf00      	nop
 800b118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11a:	bc08      	pop	{r3}
 800b11c:	469e      	mov	lr, r3
 800b11e:	4770      	bx	lr

0800b120 <_fini>:
 800b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b122:	bf00      	nop
 800b124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b126:	bc08      	pop	{r3}
 800b128:	469e      	mov	lr, r3
 800b12a:	4770      	bx	lr
