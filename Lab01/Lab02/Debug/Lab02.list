
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a24  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006cbc  08006cbc  00016cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006cf4  08006cf4  00016cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006cfc  08006cfc  00016cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006d00  08006d00  00016d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  24000000  08006d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000110  24000020  08006d24  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000130  08006d24  00020130  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014aa1  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002310  00000000  00000000  00034b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000fb8  00000000  00000000  00036e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000c59  00000000  00000000  00037e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036ad6  00000000  00000000  00038a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000159d8  00000000  00000000  0006f52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00162093  00000000  00000000  00084f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000433c  00000000  00000000  001e6f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  001eb2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006ca4 	.word	0x08006ca4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	08006ca4 	.word	0x08006ca4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	0000      	movs	r0, r0
	...

080005d8 <HAL_TIM_PWM_PulseFinishedCallback>:
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_SET);
		}
	}
}

void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef *htim){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	 if (htim == &htim2)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a23      	ldr	r2, [pc, #140]	; (8000670 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d139      	bne.n	800065c <HAL_TIM_PWM_PulseFinishedCallback+0x84>
	 {
		 // The following function is used for calibrate
		 // setToCenter();
		 uint32_t currentTime = HAL_GetTick();
 80005e8:	f000 fcfc 	bl	8000fe4 <HAL_GetTick>
 80005ec:	6178      	str	r0, [r7, #20]
		 uint32_t elapseTime = currentTime - lastTime;
 80005ee:	4b21      	ldr	r3, [pc, #132]	; (8000674 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	697a      	ldr	r2, [r7, #20]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	613b      	str	r3, [r7, #16]
		 if(curR < Rs){
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	429a      	cmp	r2, r3
 8000602:	d228      	bcs.n	8000656 <HAL_TIM_PWM_PulseFinishedCallback+0x7e>
			 curR = curR + ((Rs - R0) * elapseTime) / constantT;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	fb03 f202 	mul.w	r2, r3, r2
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	fbb2 f2f3 	udiv	r2, r2, r3
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4413      	add	r3, r2
 8000622:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8000624:	6013      	str	r3, [r2, #0]
			 uint32_t newPeriod = 64e6 / curR;
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	ee07 3a90 	vmov	s15, r3
 800062e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000632:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000668 <HAL_TIM_PWM_PulseFinishedCallback+0x90>
 8000636:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800063a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800063e:	ee17 3a90 	vmov	r3, s15
 8000642:	60fb      	str	r3, [r7, #12]
			 TIM2->ARR = newPeriod;
 8000644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	62d3      	str	r3, [r2, #44]	; 0x2c
			 TIM2->CCR4 = newPeriod / 2;
 800064c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	085b      	lsrs	r3, r3, #1
 8000654:	6413      	str	r3, [r2, #64]	; 0x40
		 }
		 lastTime = currentTime;
 8000656:	4a07      	ldr	r2, [pc, #28]	; (8000674 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	6013      	str	r3, [r2, #0]
	 }
}
 800065c:	bf00      	nop
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	f3af 8000 	nop.w
 8000668:	00000000 	.word	0x00000000
 800066c:	418e8480 	.word	0x418e8480
 8000670:	2400003c 	.word	0x2400003c
 8000674:	24000128 	.word	0x24000128
 8000678:	2400000c 	.word	0x2400000c
 800067c:	24000008 	.word	0x24000008
 8000680:	24000004 	.word	0x24000004
 8000684:	24000000 	.word	0x24000000

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fc23 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f87f 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 f9a9 	bl	80009ec <MX_GPIO_Init>
  MX_TIM2_Init();
 800069a:	f000 f8e5 	bl	8000868 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800069e:	f000 f959 	bl	8000954 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a8:	4832      	ldr	r0, [pc, #200]	; (8000774 <main+0xec>)
 80006aa:	f000 ffaf 	bl	800160c <HAL_GPIO_WritePin>


  // Maximum: 9000, minimum: 60000
   uint16_t period = 60000;
 80006ae:	f64e 2360 	movw	r3, #60000	; 0xea60
 80006b2:	80fb      	strh	r3, [r7, #6]
   TIM2->ARR = period; // first period
 80006b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	62d3      	str	r3, [r2, #44]	; 0x2c
   TIM2->CCR4 = period / 2; // first duty cycle (50%)
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	085b      	lsrs	r3, r3, #1
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006c6:	641a      	str	r2, [r3, #64]	; 0x40
   HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ce:	482a      	ldr	r0, [pc, #168]	; (8000778 <main+0xf0>)
 80006d0:	f000 ff9c 	bl	800160c <HAL_GPIO_WritePin>
   HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_4);
 80006d4:	210c      	movs	r1, #12
 80006d6:	4829      	ldr	r0, [pc, #164]	; (800077c <main+0xf4>)
 80006d8:	f004 f85a 	bl	8004790 <HAL_TIM_PWM_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t leftState = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11);
 80006dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e0:	4827      	ldr	r0, [pc, #156]	; (8000780 <main+0xf8>)
 80006e2:	f000 ff7b 	bl	80015dc <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	717b      	strb	r3, [r7, #5]
	  uint8_t rightState = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3);
 80006ea:	2108      	movs	r1, #8
 80006ec:	4825      	ldr	r0, [pc, #148]	; (8000784 <main+0xfc>)
 80006ee:	f000 ff75 	bl	80015dc <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	713b      	strb	r3, [r7, #4]

	  if(!leftState || !rightState){
 80006f6:	797b      	ldrb	r3, [r7, #5]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <main+0x7a>
 80006fc:	793b      	ldrb	r3, [r7, #4]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d134      	bne.n	800076c <main+0xe4>
		  // Increase the count of current loop
		  loop_num++;
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <main+0x100>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <main+0x100>)
 800070c:	701a      	strb	r2, [r3, #0]
		  if(loop_num == 2)	total_pulses = pulseCount / 2;
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <main+0x100>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d104      	bne.n	8000720 <main+0x98>
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <main+0x104>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	085b      	lsrs	r3, r3, #1
 800071c:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <main+0x108>)
 800071e:	6013      	str	r3, [r2, #0]
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4); // Stop PWM
 8000720:	210c      	movs	r1, #12
 8000722:	4816      	ldr	r0, [pc, #88]	; (800077c <main+0xf4>)
 8000724:	f003 ff9e 	bl	8004664 <HAL_TIM_PWM_Stop>

		  GPIO_PinState curDirection = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10);
 8000728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072c:	4811      	ldr	r0, [pc, #68]	; (8000774 <main+0xec>)
 800072e:	f000 ff55 	bl	80015dc <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	70fb      	strb	r3, [r7, #3]
		  GPIO_PinState newDirection = (curDirection == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	2b01      	cmp	r3, #1
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	70bb      	strb	r3, [r7, #2]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, newDirection);
 8000744:	78bb      	ldrb	r3, [r7, #2]
 8000746:	461a      	mov	r2, r3
 8000748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074c:	4809      	ldr	r0, [pc, #36]	; (8000774 <main+0xec>)
 800074e:	f000 ff5d 	bl	800160c <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000752:	2064      	movs	r0, #100	; 0x64
 8000754:	f000 fc52 	bl	8000ffc <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <main+0xf0>)
 8000760:	f000 ff54 	bl	800160c <HAL_GPIO_WritePin>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000764:	210c      	movs	r1, #12
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <main+0xf4>)
 8000768:	f003 fe6e 	bl	8004448 <HAL_TIM_PWM_Start>

	  }
	  HAL_Delay(100);
 800076c:	2064      	movs	r0, #100	; 0x64
 800076e:	f000 fc45 	bl	8000ffc <HAL_Delay>
  {
 8000772:	e7b3      	b.n	80006dc <main+0x54>
 8000774:	58020c00 	.word	0x58020c00
 8000778:	58021800 	.word	0x58021800
 800077c:	2400003c 	.word	0x2400003c
 8000780:	58021000 	.word	0x58021000
 8000784:	58021400 	.word	0x58021400
 8000788:	24000124 	.word	0x24000124
 800078c:	24000120 	.word	0x24000120
 8000790:	2400011c 	.word	0x2400011c

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	; 0x70
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	224c      	movs	r2, #76	; 0x4c
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f006 fa52 	bl	8006c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2220      	movs	r2, #32
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 fa4c 	bl	8006c4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b4:	2002      	movs	r0, #2
 80007b6:	f000 ff43 	bl	8001640 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b28      	ldr	r3, [pc, #160]	; (8000860 <SystemClock_Config+0xcc>)
 80007c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c2:	4a27      	ldr	r2, [pc, #156]	; (8000860 <SystemClock_Config+0xcc>)
 80007c4:	f023 0301 	bic.w	r3, r3, #1
 80007c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <SystemClock_Config+0xcc>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <SystemClock_Config+0xd0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <SystemClock_Config+0xd0>)
 80007de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <SystemClock_Config+0xd0>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f0:	bf00      	nop
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <SystemClock_Config+0xd0>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007fe:	d1f8      	bne.n	80007f2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000804:	2301      	movs	r3, #1
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000808:	2340      	movs	r3, #64	; 0x40
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800080c:	2300      	movs	r3, #0
 800080e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000814:	4618      	mov	r0, r3
 8000816:	f000 ff4d 	bl	80016b4 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000820:	f000 f98c 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	233f      	movs	r3, #63	; 0x3f
 8000826:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000838:	2340      	movs	r3, #64	; 0x40
 800083a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2101      	movs	r1, #1
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fb8d 	bl	8001f68 <HAL_RCC_ClockConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000854:	f000 f972 	bl	8000b3c <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	3770      	adds	r7, #112	; 0x70
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	58000400 	.word	0x58000400
 8000864:	58024800 	.word	0x58024800

08000868 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08e      	sub	sp, #56	; 0x38
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
 8000896:	615a      	str	r2, [r3, #20]
 8000898:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800089a:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <MX_TIM2_Init+0xe8>)
 800089c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400 -1;
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008b0:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80008b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b6:	4b26      	ldr	r3, [pc, #152]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008bc:	4b24      	ldr	r3, [pc, #144]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c2:	4823      	ldr	r0, [pc, #140]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008c4:	f003 fd08 	bl	80042d8 <HAL_TIM_Base_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008ce:	f000 f935 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008dc:	4619      	mov	r1, r3
 80008de:	481c      	ldr	r0, [pc, #112]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008e0:	f004 facc 	bl	8004e7c <HAL_TIM_ConfigClockSource>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008ea:	f000 f927 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008ee:	4818      	ldr	r0, [pc, #96]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008f0:	f003 fd49 	bl	8004386 <HAL_TIM_PWM_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008fa:	f000 f91f 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4810      	ldr	r0, [pc, #64]	; (8000950 <MX_TIM2_Init+0xe8>)
 800090e:	f005 f815 	bl	800593c <HAL_TIMEx_MasterConfigSynchronization>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000918:	f000 f910 	bl	8000b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091c:	2360      	movs	r3, #96	; 0x60
 800091e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	220c      	movs	r2, #12
 8000930:	4619      	mov	r1, r3
 8000932:	4807      	ldr	r0, [pc, #28]	; (8000950 <MX_TIM2_Init+0xe8>)
 8000934:	f004 f98e 	bl	8004c54 <HAL_TIM_PWM_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800093e:	f000 f8fd 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <MX_TIM2_Init+0xe8>)
 8000944:	f000 f940 	bl	8000bc8 <HAL_TIM_MspPostInit>

}
 8000948:	bf00      	nop
 800094a:	3738      	adds	r7, #56	; 0x38
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2400003c 	.word	0x2400003c

08000954 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <MX_USART3_UART_Init+0x94>)
 800095c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800099c:	4811      	ldr	r0, [pc, #68]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 800099e:	f005 f879 	bl	8005a94 <HAL_UART_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009a8:	f000 f8c8 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ac:	2100      	movs	r1, #0
 80009ae:	480d      	ldr	r0, [pc, #52]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 80009b0:	f006 f881 	bl	8006ab6 <HAL_UARTEx_SetTxFifoThreshold>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009ba:	f000 f8bf 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009be:	2100      	movs	r1, #0
 80009c0:	4808      	ldr	r0, [pc, #32]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 80009c2:	f006 f8b6 	bl	8006b32 <HAL_UARTEx_SetRxFifoThreshold>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009cc:	f000 f8b6 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_USART3_UART_Init+0x90>)
 80009d2:	f006 f837 	bl	8006a44 <HAL_UARTEx_DisableFifoMode>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009dc:	f000 f8ae 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	24000088 	.word	0x24000088
 80009e8:	40004800 	.word	0x40004800

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a02:	4b49      	ldr	r3, [pc, #292]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	4a47      	ldr	r2, [pc, #284]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a0a:	f043 0320 	orr.w	r3, r3, #32
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a12:	4b45      	ldr	r3, [pc, #276]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a18:	f003 0320 	and.w	r3, r3, #32
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a26:	4a40      	ldr	r2, [pc, #256]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a30:	4b3d      	ldr	r3, [pc, #244]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3e:	4b3a      	ldr	r3, [pc, #232]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	4a38      	ldr	r2, [pc, #224]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4e:	4b36      	ldr	r3, [pc, #216]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	f003 0310 	and.w	r3, r3, #16
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5c:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	4a31      	ldr	r2, [pc, #196]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6c:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	4a29      	ldr	r2, [pc, #164]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a9e:	4823      	ldr	r0, [pc, #140]	; (8000b2c <MX_GPIO_Init+0x140>)
 8000aa0:	f000 fdb4 	bl	800160c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aaa:	4821      	ldr	r0, [pc, #132]	; (8000b30 <MX_GPIO_Init+0x144>)
 8000aac:	f000 fdae 	bl	800160c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481c      	ldr	r0, [pc, #112]	; (8000b34 <MX_GPIO_Init+0x148>)
 8000ac4:	f000 fbda 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ac8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4816      	ldr	r0, [pc, #88]	; (8000b38 <MX_GPIO_Init+0x14c>)
 8000ade:	f000 fbcd 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <MX_GPIO_Init+0x140>)
 8000afc:	f000 fbbe 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_GPIO_Init+0x144>)
 8000b1a:	f000 fbaf 	bl	800127c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	; 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	58024400 	.word	0x58024400
 8000b2c:	58020c00 	.word	0x58020c00
 8000b30:	58021800 	.word	0x58021800
 8000b34:	58021400 	.word	0x58021400
 8000b38:	58021000 	.word	0x58021000

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_MspInit+0x30>)
 8000b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b54:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x30>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x30>)
 8000b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	58024400 	.word	0x58024400

08000b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b8c:	d116      	bne.n	8000bbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <HAL_TIM_Base_MspInit+0x48>)
 8000b90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b94:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <HAL_TIM_Base_MspInit+0x48>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_TIM_Base_MspInit+0x48>)
 8000ba0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201c      	movs	r0, #28
 8000bb2:	f000 fb2e 	bl	8001212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bb6:	201c      	movs	r0, #28
 8000bb8:	f000 fb45 	bl	8001246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	58024400 	.word	0x58024400

08000bc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be8:	d11e      	bne.n	8000c28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_TIM_MspPostInit+0x68>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <HAL_TIM_MspPostInit+0x68>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <HAL_TIM_MspPostInit+0x68>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	4619      	mov	r1, r3
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <HAL_TIM_MspPostInit+0x6c>)
 8000c24:	f000 fb2a 	bl	800127c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	58024400 	.word	0x58024400
 8000c34:	58020000 	.word	0x58020000

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0ba      	sub	sp, #232	; 0xe8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	22c0      	movs	r2, #192	; 0xc0
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f005 fff7 	bl	8006c4c <memset>
  if(huart->Instance==USART3)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a27      	ldr	r2, [pc, #156]	; (8000d00 <HAL_UART_MspInit+0xc8>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d146      	bne.n	8000cf6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c68:	f04f 0202 	mov.w	r2, #2
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fcfe 	bl	8002680 <HAL_RCCEx_PeriphCLKConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c8a:	f7ff ff57 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <HAL_UART_MspInit+0xcc>)
 8000c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c94:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <HAL_UART_MspInit+0xcc>)
 8000c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_UART_MspInit+0xcc>)
 8000ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_UART_MspInit+0xcc>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <HAL_UART_MspInit+0xcc>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_UART_MspInit+0xcc>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_UART_MspInit+0xd0>)
 8000cf2:	f000 fac3 	bl	800127c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	37e8      	adds	r7, #232	; 0xe8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40004800 	.word	0x40004800
 8000d04:	58024400 	.word	0x58024400
 8000d08:	58020c00 	.word	0x58020c00

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f930 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <TIM2_IRQHandler+0x10>)
 8000d66:	f003 fe6d 	bl	8004a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2400003c 	.word	0x2400003c

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d78:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <SystemInit+0xe4>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a36      	ldr	r2, [pc, #216]	; (8000e58 <SystemInit+0xe4>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d88:	4b34      	ldr	r3, [pc, #208]	; (8000e5c <SystemInit+0xe8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 030f 	and.w	r3, r3, #15
 8000d90:	2b06      	cmp	r3, #6
 8000d92:	d807      	bhi.n	8000da4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d94:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <SystemInit+0xe8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f023 030f 	bic.w	r3, r3, #15
 8000d9c:	4a2f      	ldr	r2, [pc, #188]	; (8000e5c <SystemInit+0xe8>)
 8000d9e:	f043 0307 	orr.w	r3, r3, #7
 8000da2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000da4:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <SystemInit+0xec>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a2d      	ldr	r2, [pc, #180]	; (8000e60 <SystemInit+0xec>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <SystemInit+0xec>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <SystemInit+0xec>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4929      	ldr	r1, [pc, #164]	; (8000e60 <SystemInit+0xec>)
 8000dbc:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <SystemInit+0xf0>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <SystemInit+0xe8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d007      	beq.n	8000dde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <SystemInit+0xe8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f023 030f 	bic.w	r3, r3, #15
 8000dd6:	4a21      	ldr	r2, [pc, #132]	; (8000e5c <SystemInit+0xe8>)
 8000dd8:	f043 0307 	orr.w	r3, r3, #7
 8000ddc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <SystemInit+0xec>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <SystemInit+0xec>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <SystemInit+0xec>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <SystemInit+0xec>)
 8000df2:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <SystemInit+0xf4>)
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <SystemInit+0xec>)
 8000df8:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <SystemInit+0xf8>)
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <SystemInit+0xec>)
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <SystemInit+0xfc>)
 8000e00:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <SystemInit+0xec>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <SystemInit+0xec>)
 8000e0a:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <SystemInit+0xfc>)
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <SystemInit+0xec>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <SystemInit+0xec>)
 8000e16:	4a16      	ldr	r2, [pc, #88]	; (8000e70 <SystemInit+0xfc>)
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <SystemInit+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <SystemInit+0xec>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <SystemInit+0xec>)
 8000e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <SystemInit+0xec>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <SystemInit+0x100>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <SystemInit+0x104>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e3e:	d202      	bcs.n	8000e46 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <SystemInit+0x108>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <SystemInit+0x10c>)
 8000e48:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00
 8000e5c:	52002000 	.word	0x52002000
 8000e60:	58024400 	.word	0x58024400
 8000e64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e68:	02020200 	.word	0x02020200
 8000e6c:	01ff0000 	.word	0x01ff0000
 8000e70:	01010280 	.word	0x01010280
 8000e74:	5c001000 	.word	0x5c001000
 8000e78:	ffff0000 	.word	0xffff0000
 8000e7c:	51008108 	.word	0x51008108
 8000e80:	52004000 	.word	0x52004000

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e88:	f7ff ff74 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8e:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	; (8000ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f005 fed3 	bl	8006c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fbe7 	bl	8000688 <main>
  bx  lr
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ebc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ec0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ec4:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8000ec8:	08006d04 	.word	0x08006d04
  ldr r2, =_sbss
 8000ecc:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8000ed0:	24000130 	.word	0x24000130

08000ed4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC3_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ede:	2003      	movs	r0, #3
 8000ee0:	f000 f98c 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ee4:	f001 f9f6 	bl	80022d4 <HAL_RCC_GetSysClockFreq>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_Init+0x68>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	f003 030f 	and.w	r3, r3, #15
 8000ef4:	4913      	ldr	r1, [pc, #76]	; (8000f44 <HAL_Init+0x6c>)
 8000ef6:	5ccb      	ldrb	r3, [r1, r3]
 8000ef8:	f003 031f 	and.w	r3, r3, #31
 8000efc:	fa22 f303 	lsr.w	r3, r2, r3
 8000f00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_Init+0x68>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_Init+0x6c>)
 8000f0c:	5cd3      	ldrb	r3, [r2, r3]
 8000f0e:	f003 031f 	and.w	r3, r3, #31
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_Init+0x70>)
 8000f1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <HAL_Init+0x74>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f22:	200f      	movs	r0, #15
 8000f24:	f000 f814 	bl	8000f50 <HAL_InitTick>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e002      	b.n	8000f38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f32:	f7ff fe09 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	58024400 	.word	0x58024400
 8000f44:	08006cbc 	.word	0x08006cbc
 8000f48:	24000014 	.word	0x24000014
 8000f4c:	24000010 	.word	0x24000010

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_InitTick+0x60>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e021      	b.n	8000fa8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_InitTick+0x64>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_InitTick+0x60>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f971 	bl	8001262 <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f000 f93b 	bl	8001212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_InitTick+0x68>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2400001c 	.word	0x2400001c
 8000fb4:	24000010 	.word	0x24000010
 8000fb8:	24000018 	.word	0x24000018

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2400001c 	.word	0x2400001c
 8000fe0:	2400012c 	.word	0x2400012c

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	2400012c 	.word	0x2400012c

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2400001c 	.word	0x2400001c

08001044 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetREVID+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	0c1b      	lsrs	r3, r3, #16
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	5c001000 	.word	0x5c001000

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <__NVIC_SetPriorityGrouping+0x40>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	4313      	orrs	r3, r2
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <__NVIC_SetPriorityGrouping+0x40>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	05fa0000 	.word	0x05fa0000

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db0b      	blt.n	80010ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	4907      	ldr	r1, [pc, #28]	; (80010f8 <__NVIC_EnableIRQ+0x38>)
 80010da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	; (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	; (800114c <__NVIC_SetPriority+0x50>)
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
         );
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c8:	d301      	bcc.n	80011ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00f      	b.n	80011ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <SysTick_Config+0x40>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d6:	210f      	movs	r1, #15
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f7ff ff8e 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <SysTick_Config+0x40>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <SysTick_Config+0x40>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	e000e010 	.word	0xe000e010

080011fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff29 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b086      	sub	sp, #24
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001220:	f7ff ff40 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 8001224:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff ff90 	bl	8001150 <NVIC_EncodePriority>
 8001230:	4602      	mov	r2, r0
 8001232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff5f 	bl	80010fc <__NVIC_SetPriority>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff33 	bl	80010c0 <__NVIC_EnableIRQ>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffa4 	bl	80011b8 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800128a:	4b89      	ldr	r3, [pc, #548]	; (80014b0 <HAL_GPIO_Init+0x234>)
 800128c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800128e:	e194      	b.n	80015ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2101      	movs	r1, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8186 	beq.w	80015b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d005      	beq.n	80012c0 <HAL_GPIO_Init+0x44>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d130      	bne.n	8001322 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f6:	2201      	movs	r2, #1
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	f003 0201 	and.w	r2, r3, #1
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b03      	cmp	r3, #3
 800132c:	d017      	beq.n	800135e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d123      	bne.n	80013b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	08da      	lsrs	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3208      	adds	r2, #8
 8001372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	08da      	lsrs	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3208      	adds	r2, #8
 80013ac:	69b9      	ldr	r1, [r7, #24]
 80013ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0203 	and.w	r2, r3, #3
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 80e0 	beq.w	80015b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f4:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <HAL_GPIO_Init+0x238>)
 80013f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013fa:	4a2e      	ldr	r2, [pc, #184]	; (80014b4 <HAL_GPIO_Init+0x238>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <HAL_GPIO_Init+0x238>)
 8001406:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001412:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <HAL_GPIO_Init+0x23c>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a20      	ldr	r2, [pc, #128]	; (80014bc <HAL_GPIO_Init+0x240>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d052      	beq.n	80014e4 <HAL_GPIO_Init+0x268>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a1f      	ldr	r2, [pc, #124]	; (80014c0 <HAL_GPIO_Init+0x244>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d031      	beq.n	80014aa <HAL_GPIO_Init+0x22e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a1e      	ldr	r2, [pc, #120]	; (80014c4 <HAL_GPIO_Init+0x248>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d02b      	beq.n	80014a6 <HAL_GPIO_Init+0x22a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <HAL_GPIO_Init+0x24c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d025      	beq.n	80014a2 <HAL_GPIO_Init+0x226>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <HAL_GPIO_Init+0x250>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d01f      	beq.n	800149e <HAL_GPIO_Init+0x222>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <HAL_GPIO_Init+0x254>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d019      	beq.n	800149a <HAL_GPIO_Init+0x21e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a1a      	ldr	r2, [pc, #104]	; (80014d4 <HAL_GPIO_Init+0x258>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d013      	beq.n	8001496 <HAL_GPIO_Init+0x21a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <HAL_GPIO_Init+0x25c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00d      	beq.n	8001492 <HAL_GPIO_Init+0x216>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a18      	ldr	r2, [pc, #96]	; (80014dc <HAL_GPIO_Init+0x260>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d007      	beq.n	800148e <HAL_GPIO_Init+0x212>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <HAL_GPIO_Init+0x264>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_GPIO_Init+0x20e>
 8001486:	2309      	movs	r3, #9
 8001488:	e02d      	b.n	80014e6 <HAL_GPIO_Init+0x26a>
 800148a:	230a      	movs	r3, #10
 800148c:	e02b      	b.n	80014e6 <HAL_GPIO_Init+0x26a>
 800148e:	2308      	movs	r3, #8
 8001490:	e029      	b.n	80014e6 <HAL_GPIO_Init+0x26a>
 8001492:	2307      	movs	r3, #7
 8001494:	e027      	b.n	80014e6 <HAL_GPIO_Init+0x26a>
 8001496:	2306      	movs	r3, #6
 8001498:	e025      	b.n	80014e6 <HAL_GPIO_Init+0x26a>
 800149a:	2305      	movs	r3, #5
 800149c:	e023      	b.n	80014e6 <HAL_GPIO_Init+0x26a>
 800149e:	2304      	movs	r3, #4
 80014a0:	e021      	b.n	80014e6 <HAL_GPIO_Init+0x26a>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e01f      	b.n	80014e6 <HAL_GPIO_Init+0x26a>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e01d      	b.n	80014e6 <HAL_GPIO_Init+0x26a>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e01b      	b.n	80014e6 <HAL_GPIO_Init+0x26a>
 80014ae:	bf00      	nop
 80014b0:	58000080 	.word	0x58000080
 80014b4:	58024400 	.word	0x58024400
 80014b8:	58000400 	.word	0x58000400
 80014bc:	58020000 	.word	0x58020000
 80014c0:	58020400 	.word	0x58020400
 80014c4:	58020800 	.word	0x58020800
 80014c8:	58020c00 	.word	0x58020c00
 80014cc:	58021000 	.word	0x58021000
 80014d0:	58021400 	.word	0x58021400
 80014d4:	58021800 	.word	0x58021800
 80014d8:	58021c00 	.word	0x58021c00
 80014dc:	58022000 	.word	0x58022000
 80014e0:	58022400 	.word	0x58022400
 80014e4:	2300      	movs	r3, #0
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	f002 0203 	and.w	r2, r2, #3
 80014ec:	0092      	lsls	r2, r2, #2
 80014ee:	4093      	lsls	r3, r2
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f6:	4938      	ldr	r1, [pc, #224]	; (80015d8 <HAL_GPIO_Init+0x35c>)
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800152a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	3301      	adds	r3, #1
 80015b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	fa22 f303 	lsr.w	r3, r2, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f47f ae63 	bne.w	8001290 <HAL_GPIO_Init+0x14>
  }
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3724      	adds	r7, #36	; 0x24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	58000400 	.word	0x58000400

080015dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e001      	b.n	80015fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
 8001618:	4613      	mov	r3, r2
 800161a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800161c:	787b      	ldrb	r3, [r7, #1]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001628:	e003      	b.n	8001632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	041a      	lsls	r2, r3, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	619a      	str	r2, [r3, #24]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_PWREx_ConfigSupply+0x70>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b04      	cmp	r3, #4
 8001652:	d00a      	beq.n	800166a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <HAL_PWREx_ConfigSupply+0x70>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	d001      	beq.n	8001666 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e01f      	b.n	80016a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	e01d      	b.n	80016a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_PWREx_ConfigSupply+0x70>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f023 0207 	bic.w	r2, r3, #7
 8001672:	490f      	ldr	r1, [pc, #60]	; (80016b0 <HAL_PWREx_ConfigSupply+0x70>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4313      	orrs	r3, r2
 8001678:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800167a:	f7ff fcb3 	bl	8000fe4 <HAL_GetTick>
 800167e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001680:	e009      	b.n	8001696 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001682:	f7ff fcaf 	bl	8000fe4 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001690:	d901      	bls.n	8001696 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e007      	b.n	80016a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_PWREx_ConfigSupply+0x70>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800169e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016a2:	d1ee      	bne.n	8001682 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	58024800 	.word	0x58024800

080016b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	; 0x30
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f000 bc48 	b.w	8001f58 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8088 	beq.w	80017e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d6:	4b99      	ldr	r3, [pc, #612]	; (800193c <HAL_RCC_OscConfig+0x288>)
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016e0:	4b96      	ldr	r3, [pc, #600]	; (800193c <HAL_RCC_OscConfig+0x288>)
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	2b10      	cmp	r3, #16
 80016ea:	d007      	beq.n	80016fc <HAL_RCC_OscConfig+0x48>
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ee:	2b18      	cmp	r3, #24
 80016f0:	d111      	bne.n	8001716 <HAL_RCC_OscConfig+0x62>
 80016f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	4b8f      	ldr	r3, [pc, #572]	; (800193c <HAL_RCC_OscConfig+0x288>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d06d      	beq.n	80017e4 <HAL_RCC_OscConfig+0x130>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d169      	bne.n	80017e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	f000 bc21 	b.w	8001f58 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x7a>
 8001720:	4b86      	ldr	r3, [pc, #536]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a85      	ldr	r2, [pc, #532]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e02e      	b.n	800178c <HAL_RCC_OscConfig+0xd8>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x9c>
 8001736:	4b81      	ldr	r3, [pc, #516]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a80      	ldr	r2, [pc, #512]	; (800193c <HAL_RCC_OscConfig+0x288>)
 800173c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b7e      	ldr	r3, [pc, #504]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a7d      	ldr	r2, [pc, #500]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e01d      	b.n	800178c <HAL_RCC_OscConfig+0xd8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0xc0>
 800175a:	4b78      	ldr	r3, [pc, #480]	; (800193c <HAL_RCC_OscConfig+0x288>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a77      	ldr	r2, [pc, #476]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b75      	ldr	r3, [pc, #468]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a74      	ldr	r2, [pc, #464]	; (800193c <HAL_RCC_OscConfig+0x288>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0xd8>
 8001774:	4b71      	ldr	r3, [pc, #452]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a70      	ldr	r2, [pc, #448]	; (800193c <HAL_RCC_OscConfig+0x288>)
 800177a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b6e      	ldr	r3, [pc, #440]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a6d      	ldr	r2, [pc, #436]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fc26 	bl	8000fe4 <HAL_GetTick>
 8001798:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fc22 	bl	8000fe4 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e3d4      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017ae:	4b63      	ldr	r3, [pc, #396]	; (800193c <HAL_RCC_OscConfig+0x288>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0xe8>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff fc12 	bl	8000fe4 <HAL_GetTick>
 80017c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fc0e 	bl	8000fe4 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e3c0      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017d6:	4b59      	ldr	r3, [pc, #356]	; (800193c <HAL_RCC_OscConfig+0x288>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x110>
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 80ca 	beq.w	8001988 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f4:	4b51      	ldr	r3, [pc, #324]	; (800193c <HAL_RCC_OscConfig+0x288>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017fe:	4b4f      	ldr	r3, [pc, #316]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d007      	beq.n	800181a <HAL_RCC_OscConfig+0x166>
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	2b18      	cmp	r3, #24
 800180e:	d156      	bne.n	80018be <HAL_RCC_OscConfig+0x20a>
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d151      	bne.n	80018be <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800181a:	4b48      	ldr	r3, [pc, #288]	; (800193c <HAL_RCC_OscConfig+0x288>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	2b00      	cmp	r3, #0
 8001824:	d005      	beq.n	8001832 <HAL_RCC_OscConfig+0x17e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e392      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001832:	4b42      	ldr	r3, [pc, #264]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 0219 	bic.w	r2, r3, #25
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	493f      	ldr	r1, [pc, #252]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fbce 	bl	8000fe4 <HAL_GetTick>
 8001848:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184c:	f7ff fbca 	bl	8000fe4 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e37c      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	f7ff fbeb 	bl	8001044 <HAL_GetREVID>
 800186e:	4603      	mov	r3, r0
 8001870:	f241 0203 	movw	r2, #4099	; 0x1003
 8001874:	4293      	cmp	r3, r2
 8001876:	d817      	bhi.n	80018a8 <HAL_RCC_OscConfig+0x1f4>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2b40      	cmp	r3, #64	; 0x40
 800187e:	d108      	bne.n	8001892 <HAL_RCC_OscConfig+0x1de>
 8001880:	4b2e      	ldr	r3, [pc, #184]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001888:	4a2c      	ldr	r2, [pc, #176]	; (800193c <HAL_RCC_OscConfig+0x288>)
 800188a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001890:	e07a      	b.n	8001988 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	031b      	lsls	r3, r3, #12
 80018a0:	4926      	ldr	r1, [pc, #152]	; (800193c <HAL_RCC_OscConfig+0x288>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a6:	e06f      	b.n	8001988 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b24      	ldr	r3, [pc, #144]	; (800193c <HAL_RCC_OscConfig+0x288>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	4921      	ldr	r1, [pc, #132]	; (800193c <HAL_RCC_OscConfig+0x288>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018bc:	e064      	b.n	8001988 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d047      	beq.n	8001956 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_RCC_OscConfig+0x288>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 0219 	bic.w	r2, r3, #25
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	491a      	ldr	r1, [pc, #104]	; (800193c <HAL_RCC_OscConfig+0x288>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fb84 	bl	8000fe4 <HAL_GetTick>
 80018dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff fb80 	bl	8000fe4 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e332      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_OscConfig+0x288>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	f7ff fba1 	bl	8001044 <HAL_GetREVID>
 8001902:	4603      	mov	r3, r0
 8001904:	f241 0203 	movw	r2, #4099	; 0x1003
 8001908:	4293      	cmp	r3, r2
 800190a:	d819      	bhi.n	8001940 <HAL_RCC_OscConfig+0x28c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	2b40      	cmp	r3, #64	; 0x40
 8001912:	d108      	bne.n	8001926 <HAL_RCC_OscConfig+0x272>
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800191c:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_RCC_OscConfig+0x288>)
 800191e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001922:	6053      	str	r3, [r2, #4]
 8001924:	e030      	b.n	8001988 <HAL_RCC_OscConfig+0x2d4>
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	031b      	lsls	r3, r3, #12
 8001934:	4901      	ldr	r1, [pc, #4]	; (800193c <HAL_RCC_OscConfig+0x288>)
 8001936:	4313      	orrs	r3, r2
 8001938:	604b      	str	r3, [r1, #4]
 800193a:	e025      	b.n	8001988 <HAL_RCC_OscConfig+0x2d4>
 800193c:	58024400 	.word	0x58024400
 8001940:	4b9a      	ldr	r3, [pc, #616]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	4997      	ldr	r1, [pc, #604]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
 8001954:	e018      	b.n	8001988 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001956:	4b95      	ldr	r3, [pc, #596]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a94      	ldr	r2, [pc, #592]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 800195c:	f023 0301 	bic.w	r3, r3, #1
 8001960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001962:	f7ff fb3f 	bl	8000fe4 <HAL_GetTick>
 8001966:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196a:	f7ff fb3b 	bl	8000fe4 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e2ed      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800197c:	4b8b      	ldr	r3, [pc, #556]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f0      	bne.n	800196a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80a9 	beq.w	8001ae8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001996:	4b85      	ldr	r3, [pc, #532]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800199e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019a0:	4b82      	ldr	r3, [pc, #520]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d007      	beq.n	80019bc <HAL_RCC_OscConfig+0x308>
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2b18      	cmp	r3, #24
 80019b0:	d13a      	bne.n	8001a28 <HAL_RCC_OscConfig+0x374>
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d135      	bne.n	8001a28 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019bc:	4b7b      	ldr	r3, [pc, #492]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_OscConfig+0x320>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	2b80      	cmp	r3, #128	; 0x80
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e2c1      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019d4:	f7ff fb36 	bl	8001044 <HAL_GetREVID>
 80019d8:	4603      	mov	r3, r0
 80019da:	f241 0203 	movw	r2, #4099	; 0x1003
 80019de:	4293      	cmp	r3, r2
 80019e0:	d817      	bhi.n	8001a12 <HAL_RCC_OscConfig+0x35e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	2b20      	cmp	r3, #32
 80019e8:	d108      	bne.n	80019fc <HAL_RCC_OscConfig+0x348>
 80019ea:	4b70      	ldr	r3, [pc, #448]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80019f2:	4a6e      	ldr	r2, [pc, #440]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 80019f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019fa:	e075      	b.n	8001ae8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019fc:	4b6b      	ldr	r3, [pc, #428]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	069b      	lsls	r3, r3, #26
 8001a0a:	4968      	ldr	r1, [pc, #416]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a10:	e06a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a12:	4b66      	ldr	r3, [pc, #408]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	061b      	lsls	r3, r3, #24
 8001a20:	4962      	ldr	r1, [pc, #392]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a26:	e05f      	b.n	8001ae8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d042      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a30:	4b5e      	ldr	r3, [pc, #376]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a5d      	ldr	r2, [pc, #372]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fad2 	bl	8000fe4 <HAL_GetTick>
 8001a40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a44:	f7ff face 	bl	8000fe4 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e280      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a56:	4b55      	ldr	r3, [pc, #340]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a62:	f7ff faef 	bl	8001044 <HAL_GetREVID>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d817      	bhi.n	8001aa0 <HAL_RCC_OscConfig+0x3ec>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	d108      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3d6>
 8001a78:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a80:	4a4a      	ldr	r2, [pc, #296]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001a82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a86:	6053      	str	r3, [r2, #4]
 8001a88:	e02e      	b.n	8001ae8 <HAL_RCC_OscConfig+0x434>
 8001a8a:	4b48      	ldr	r3, [pc, #288]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	069b      	lsls	r3, r3, #26
 8001a98:	4944      	ldr	r1, [pc, #272]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
 8001a9e:	e023      	b.n	8001ae8 <HAL_RCC_OscConfig+0x434>
 8001aa0:	4b42      	ldr	r3, [pc, #264]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	493f      	ldr	r1, [pc, #252]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60cb      	str	r3, [r1, #12]
 8001ab4:	e018      	b.n	8001ae8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a3c      	ldr	r2, [pc, #240]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fa8f 	bl	8000fe4 <HAL_GetTick>
 8001ac6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001aca:	f7ff fa8b 	bl	8000fe4 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e23d      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001adc:	4b33      	ldr	r3, [pc, #204]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d036      	beq.n	8001b62 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d019      	beq.n	8001b30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afc:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b00:	4a2a      	ldr	r2, [pc, #168]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7ff fa6c 	bl	8000fe4 <HAL_GetTick>
 8001b0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b10:	f7ff fa68 	bl	8000fe4 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e21a      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x45c>
 8001b2e:	e018      	b.n	8001b62 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b34:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fa52 	bl	8000fe4 <HAL_GetTick>
 8001b40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b44:	f7ff fa4e 	bl	8000fe4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e200      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0320 	and.w	r3, r3, #32
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d039      	beq.n	8001be2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d01c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b76:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001b7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b82:	f7ff fa2f 	bl	8000fe4 <HAL_GetTick>
 8001b86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b8a:	f7ff fa2b 	bl	8000fe4 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e1dd      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_RCC_OscConfig+0x4f8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x4d6>
 8001ba8:	e01b      	b.n	8001be2 <HAL_RCC_OscConfig+0x52e>
 8001baa:	bf00      	nop
 8001bac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bb0:	4b9b      	ldr	r3, [pc, #620]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a9a      	ldr	r2, [pc, #616]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fa12 	bl	8000fe4 <HAL_GetTick>
 8001bc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bc4:	f7ff fa0e 	bl	8000fe4 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1c0      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bd6:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8081 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bf0:	4b8c      	ldr	r3, [pc, #560]	; (8001e24 <HAL_RCC_OscConfig+0x770>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a8b      	ldr	r2, [pc, #556]	; (8001e24 <HAL_RCC_OscConfig+0x770>)
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bfc:	f7ff f9f2 	bl	8000fe4 <HAL_GetTick>
 8001c00:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c04:	f7ff f9ee 	bl	8000fe4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e1a0      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c16:	4b83      	ldr	r3, [pc, #524]	; (8001e24 <HAL_RCC_OscConfig+0x770>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d106      	bne.n	8001c38 <HAL_RCC_OscConfig+0x584>
 8001c2a:	4b7d      	ldr	r3, [pc, #500]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2e:	4a7c      	ldr	r2, [pc, #496]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6713      	str	r3, [r2, #112]	; 0x70
 8001c36:	e02d      	b.n	8001c94 <HAL_RCC_OscConfig+0x5e0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10c      	bne.n	8001c5a <HAL_RCC_OscConfig+0x5a6>
 8001c40:	4b77      	ldr	r3, [pc, #476]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	4a76      	ldr	r2, [pc, #472]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4c:	4b74      	ldr	r3, [pc, #464]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	4a73      	ldr	r2, [pc, #460]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001c52:	f023 0304 	bic.w	r3, r3, #4
 8001c56:	6713      	str	r3, [r2, #112]	; 0x70
 8001c58:	e01c      	b.n	8001c94 <HAL_RCC_OscConfig+0x5e0>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x5c8>
 8001c62:	4b6f      	ldr	r3, [pc, #444]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	4a6e      	ldr	r2, [pc, #440]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6e:	4b6c      	ldr	r3, [pc, #432]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	4a6b      	ldr	r2, [pc, #428]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0x5e0>
 8001c7c:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c80:	4a67      	ldr	r2, [pc, #412]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	6713      	str	r3, [r2, #112]	; 0x70
 8001c88:	4b65      	ldr	r3, [pc, #404]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8c:	4a64      	ldr	r2, [pc, #400]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001c8e:	f023 0304 	bic.w	r3, r3, #4
 8001c92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d015      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7ff f9a2 	bl	8000fe4 <HAL_GetTick>
 8001ca0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca4:	f7ff f99e 	bl	8000fe4 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e14e      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cba:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0ee      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x5f0>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7ff f98c 	bl	8000fe4 <HAL_GetTick>
 8001ccc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7ff f988 	bl	8000fe4 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e138      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ce6:	4b4e      	ldr	r3, [pc, #312]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1ee      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 812d 	beq.w	8001f56 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001cfc:	4b48      	ldr	r3, [pc, #288]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d04:	2b18      	cmp	r3, #24
 8001d06:	f000 80bd 	beq.w	8001e84 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	f040 809e 	bne.w	8001e50 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d14:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a41      	ldr	r2, [pc, #260]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff f960 	bl	8000fe4 <HAL_GetTick>
 8001d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7ff f95c 	bl	8000fe4 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e10e      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d3a:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d46:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d4a:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <HAL_RCC_OscConfig+0x774>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	4931      	ldr	r1, [pc, #196]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	628b      	str	r3, [r1, #40]	; 0x28
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	3b01      	subs	r3, #1
 8001d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	025b      	lsls	r3, r3, #9
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	041b      	lsls	r3, r3, #16
 8001d7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	061b      	lsls	r3, r3, #24
 8001d8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d90:	4923      	ldr	r1, [pc, #140]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	4a21      	ldr	r2, [pc, #132]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001da2:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da6:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <HAL_RCC_OscConfig+0x778>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dae:	00d2      	lsls	r2, r2, #3
 8001db0:	491b      	ldr	r1, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	f023 020c 	bic.w	r2, r3, #12
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4917      	ldr	r1, [pc, #92]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	f023 0202 	bic.w	r2, r3, #2
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	4912      	ldr	r1, [pc, #72]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dde:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_RCC_OscConfig+0x76c>)
 8001e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7ff f8e5 	bl	8000fe4 <HAL_GetTick>
 8001e1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e1c:	e011      	b.n	8001e42 <HAL_RCC_OscConfig+0x78e>
 8001e1e:	bf00      	nop
 8001e20:	58024400 	.word	0x58024400
 8001e24:	58024800 	.word	0x58024800
 8001e28:	fffffc0c 	.word	0xfffffc0c
 8001e2c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e30:	f7ff f8d8 	bl	8000fe4 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e08a      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e42:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <HAL_RCC_OscConfig+0x8ac>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x77c>
 8001e4e:	e082      	b.n	8001f56 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e50:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <HAL_RCC_OscConfig+0x8ac>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a42      	ldr	r2, [pc, #264]	; (8001f60 <HAL_RCC_OscConfig+0x8ac>)
 8001e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7ff f8c2 	bl	8000fe4 <HAL_GetTick>
 8001e60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e64:	f7ff f8be 	bl	8000fe4 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e070      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e76:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <HAL_RCC_OscConfig+0x8ac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x7b0>
 8001e82:	e068      	b.n	8001f56 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e84:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <HAL_RCC_OscConfig+0x8ac>)
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e8a:	4b35      	ldr	r3, [pc, #212]	; (8001f60 <HAL_RCC_OscConfig+0x8ac>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d031      	beq.n	8001efc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f003 0203 	and.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d12a      	bne.n	8001efc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d122      	bne.n	8001efc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d11a      	bne.n	8001efc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	0a5b      	lsrs	r3, r3, #9
 8001eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d111      	bne.n	8001efc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	0c1b      	lsrs	r3, r3, #16
 8001edc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d108      	bne.n	8001efc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	0e1b      	lsrs	r3, r3, #24
 8001eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e02b      	b.n	8001f58 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_RCC_OscConfig+0x8ac>)
 8001f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f0a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d01f      	beq.n	8001f56 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_RCC_OscConfig+0x8ac>)
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	4a11      	ldr	r2, [pc, #68]	; (8001f60 <HAL_RCC_OscConfig+0x8ac>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f22:	f7ff f85f 	bl	8000fe4 <HAL_GetTick>
 8001f26:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001f28:	bf00      	nop
 8001f2a:	f7ff f85b 	bl	8000fe4 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d0f9      	beq.n	8001f2a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_RCC_OscConfig+0x8ac>)
 8001f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_RCC_OscConfig+0x8b0>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f42:	00d2      	lsls	r2, r2, #3
 8001f44:	4906      	ldr	r1, [pc, #24]	; (8001f60 <HAL_RCC_OscConfig+0x8ac>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_RCC_OscConfig+0x8ac>)
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_RCC_OscConfig+0x8ac>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3730      	adds	r7, #48	; 0x30
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	58024400 	.word	0x58024400
 8001f64:	ffff0007 	.word	0xffff0007

08001f68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e19c      	b.n	80022b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b8a      	ldr	r3, [pc, #552]	; (80021a8 <HAL_RCC_ClockConfig+0x240>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d910      	bls.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b87      	ldr	r3, [pc, #540]	; (80021a8 <HAL_RCC_ClockConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 020f 	bic.w	r2, r3, #15
 8001f92:	4985      	ldr	r1, [pc, #532]	; (80021a8 <HAL_RCC_ClockConfig+0x240>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b83      	ldr	r3, [pc, #524]	; (80021a8 <HAL_RCC_ClockConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e184      	b.n	80022b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d010      	beq.n	8001fda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	4b7b      	ldr	r3, [pc, #492]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d908      	bls.n	8001fda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fc8:	4b78      	ldr	r3, [pc, #480]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	4975      	ldr	r1, [pc, #468]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d010      	beq.n	8002008 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	4b70      	ldr	r3, [pc, #448]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d908      	bls.n	8002008 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ff6:	4b6d      	ldr	r3, [pc, #436]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	496a      	ldr	r1, [pc, #424]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8002004:	4313      	orrs	r3, r2
 8002006:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	d010      	beq.n	8002036 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699a      	ldr	r2, [r3, #24]
 8002018:	4b64      	ldr	r3, [pc, #400]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002020:	429a      	cmp	r2, r3
 8002022:	d908      	bls.n	8002036 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002024:	4b61      	ldr	r3, [pc, #388]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	495e      	ldr	r1, [pc, #376]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8002032:	4313      	orrs	r3, r2
 8002034:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b00      	cmp	r3, #0
 8002040:	d010      	beq.n	8002064 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69da      	ldr	r2, [r3, #28]
 8002046:	4b59      	ldr	r3, [pc, #356]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800204e:	429a      	cmp	r2, r3
 8002050:	d908      	bls.n	8002064 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002052:	4b56      	ldr	r3, [pc, #344]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4953      	ldr	r1, [pc, #332]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8002060:	4313      	orrs	r3, r2
 8002062:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d010      	beq.n	8002092 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	4b4d      	ldr	r3, [pc, #308]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	429a      	cmp	r2, r3
 800207e:	d908      	bls.n	8002092 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002080:	4b4a      	ldr	r3, [pc, #296]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f023 020f 	bic.w	r2, r3, #15
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4947      	ldr	r1, [pc, #284]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 800208e:	4313      	orrs	r3, r2
 8002090:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d055      	beq.n	800214a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800209e:	4b43      	ldr	r3, [pc, #268]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4940      	ldr	r1, [pc, #256]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d107      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020b8:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d121      	bne.n	8002108 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0f6      	b.n	80022b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020d0:	4b36      	ldr	r3, [pc, #216]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d115      	bne.n	8002108 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0ea      	b.n	80022b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020e8:	4b30      	ldr	r3, [pc, #192]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0de      	b.n	80022b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020f8:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0d6      	b.n	80022b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002108:	4b28      	ldr	r3, [pc, #160]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f023 0207 	bic.w	r2, r3, #7
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4925      	ldr	r1, [pc, #148]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8002116:	4313      	orrs	r3, r2
 8002118:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800211a:	f7fe ff63 	bl	8000fe4 <HAL_GetTick>
 800211e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002120:	e00a      	b.n	8002138 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002122:	f7fe ff5f 	bl	8000fe4 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e0be      	b.n	80022b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002138:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	429a      	cmp	r2, r3
 8002148:	d1eb      	bne.n	8002122 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d010      	beq.n	8002178 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	429a      	cmp	r2, r3
 8002164:	d208      	bcs.n	8002178 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f023 020f 	bic.w	r2, r3, #15
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	490e      	ldr	r1, [pc, #56]	; (80021ac <HAL_RCC_ClockConfig+0x244>)
 8002174:	4313      	orrs	r3, r2
 8002176:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_ClockConfig+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d214      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_RCC_ClockConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 020f 	bic.w	r2, r3, #15
 800218e:	4906      	ldr	r1, [pc, #24]	; (80021a8 <HAL_RCC_ClockConfig+0x240>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <HAL_RCC_ClockConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e086      	b.n	80022b6 <HAL_RCC_ClockConfig+0x34e>
 80021a8:	52002000 	.word	0x52002000
 80021ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d010      	beq.n	80021de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <HAL_RCC_ClockConfig+0x358>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d208      	bcs.n	80021de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021cc:	4b3c      	ldr	r3, [pc, #240]	; (80022c0 <HAL_RCC_ClockConfig+0x358>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	4939      	ldr	r1, [pc, #228]	; (80022c0 <HAL_RCC_ClockConfig+0x358>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d010      	beq.n	800220c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_RCC_ClockConfig+0x358>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d208      	bcs.n	800220c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021fa:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <HAL_RCC_ClockConfig+0x358>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	492e      	ldr	r1, [pc, #184]	; (80022c0 <HAL_RCC_ClockConfig+0x358>)
 8002208:	4313      	orrs	r3, r2
 800220a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	2b00      	cmp	r3, #0
 8002216:	d010      	beq.n	800223a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699a      	ldr	r2, [r3, #24]
 800221c:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <HAL_RCC_ClockConfig+0x358>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002224:	429a      	cmp	r2, r3
 8002226:	d208      	bcs.n	800223a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_RCC_ClockConfig+0x358>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4922      	ldr	r1, [pc, #136]	; (80022c0 <HAL_RCC_ClockConfig+0x358>)
 8002236:	4313      	orrs	r3, r2
 8002238:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	2b00      	cmp	r3, #0
 8002244:	d010      	beq.n	8002268 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_RCC_ClockConfig+0x358>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002252:	429a      	cmp	r2, r3
 8002254:	d208      	bcs.n	8002268 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_RCC_ClockConfig+0x358>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	4917      	ldr	r1, [pc, #92]	; (80022c0 <HAL_RCC_ClockConfig+0x358>)
 8002264:	4313      	orrs	r3, r2
 8002266:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002268:	f000 f834 	bl	80022d4 <HAL_RCC_GetSysClockFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_RCC_ClockConfig+0x358>)
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	4912      	ldr	r1, [pc, #72]	; (80022c4 <HAL_RCC_ClockConfig+0x35c>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
 8002284:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_RCC_ClockConfig+0x358>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <HAL_RCC_ClockConfig+0x35c>)
 8002290:	5cd3      	ldrb	r3, [r2, r3]
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
 800229c:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <HAL_RCC_ClockConfig+0x360>)
 800229e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_RCC_ClockConfig+0x364>)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x368>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fe50 	bl	8000f50 <HAL_InitTick>
 80022b0:	4603      	mov	r3, r0
 80022b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	58024400 	.word	0x58024400
 80022c4:	08006cbc 	.word	0x08006cbc
 80022c8:	24000014 	.word	0x24000014
 80022cc:	24000010 	.word	0x24000010
 80022d0:	24000018 	.word	0x24000018

080022d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022da:	4bb3      	ldr	r3, [pc, #716]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022e2:	2b18      	cmp	r3, #24
 80022e4:	f200 8155 	bhi.w	8002592 <HAL_RCC_GetSysClockFreq+0x2be>
 80022e8:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80022ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ee:	bf00      	nop
 80022f0:	08002355 	.word	0x08002355
 80022f4:	08002593 	.word	0x08002593
 80022f8:	08002593 	.word	0x08002593
 80022fc:	08002593 	.word	0x08002593
 8002300:	08002593 	.word	0x08002593
 8002304:	08002593 	.word	0x08002593
 8002308:	08002593 	.word	0x08002593
 800230c:	08002593 	.word	0x08002593
 8002310:	0800237b 	.word	0x0800237b
 8002314:	08002593 	.word	0x08002593
 8002318:	08002593 	.word	0x08002593
 800231c:	08002593 	.word	0x08002593
 8002320:	08002593 	.word	0x08002593
 8002324:	08002593 	.word	0x08002593
 8002328:	08002593 	.word	0x08002593
 800232c:	08002593 	.word	0x08002593
 8002330:	08002381 	.word	0x08002381
 8002334:	08002593 	.word	0x08002593
 8002338:	08002593 	.word	0x08002593
 800233c:	08002593 	.word	0x08002593
 8002340:	08002593 	.word	0x08002593
 8002344:	08002593 	.word	0x08002593
 8002348:	08002593 	.word	0x08002593
 800234c:	08002593 	.word	0x08002593
 8002350:	08002387 	.word	0x08002387
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002354:	4b94      	ldr	r3, [pc, #592]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d009      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002360:	4b91      	ldr	r3, [pc, #580]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	08db      	lsrs	r3, r3, #3
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	4a90      	ldr	r2, [pc, #576]	; (80025ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002372:	e111      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002374:	4b8d      	ldr	r3, [pc, #564]	; (80025ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002376:	61bb      	str	r3, [r7, #24]
      break;
 8002378:	e10e      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800237a:	4b8d      	ldr	r3, [pc, #564]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800237c:	61bb      	str	r3, [r7, #24]
      break;
 800237e:	e10b      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002380:	4b8c      	ldr	r3, [pc, #560]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002382:	61bb      	str	r3, [r7, #24]
      break;
 8002384:	e108      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002386:	4b88      	ldr	r3, [pc, #544]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002390:	4b85      	ldr	r3, [pc, #532]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800239a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800239c:	4b82      	ldr	r3, [pc, #520]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80023a6:	4b80      	ldr	r3, [pc, #512]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	08db      	lsrs	r3, r3, #3
 80023ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	ee07 3a90 	vmov	s15, r3
 80023ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80e1 	beq.w	800258c <HAL_RCC_GetSysClockFreq+0x2b8>
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	f000 8083 	beq.w	80024d8 <HAL_RCC_GetSysClockFreq+0x204>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	f200 80a1 	bhi.w	800251c <HAL_RCC_GetSysClockFreq+0x248>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x114>
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d056      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x1c0>
 80023e6:	e099      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023e8:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d02d      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023f4:	4b6c      	ldr	r3, [pc, #432]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	08db      	lsrs	r3, r3, #3
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	4a6b      	ldr	r2, [pc, #428]	; (80025ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
 8002404:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	ee07 3a90 	vmov	s15, r3
 800240c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	ee07 3a90 	vmov	s15, r3
 8002416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800241e:	4b62      	ldr	r3, [pc, #392]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800242e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002432:	eddf 5a61 	vldr	s11, [pc, #388]	; 80025b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800243a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800243e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800244e:	e087      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800245a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80025bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800245e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002462:	4b51      	ldr	r3, [pc, #324]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002472:	ed97 6a02 	vldr	s12, [r7, #8]
 8002476:	eddf 5a50 	vldr	s11, [pc, #320]	; 80025b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800247a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800247e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800248a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002492:	e065      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80025c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a6:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ae:	ee07 3a90 	vmov	s15, r3
 80024b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80025b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024d6:	e043      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80025c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80024e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ea:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80024fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80025b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800250a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800250e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002516:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800251a:	e021      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002526:	eddf 6a26 	vldr	s13, [pc, #152]	; 80025c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800252a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800252e:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800253e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002542:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80025b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800254a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800254e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800255e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	0a5b      	lsrs	r3, r3, #9
 8002566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800256a:	3301      	adds	r3, #1
 800256c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	ee07 3a90 	vmov	s15, r3
 8002574:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002578:	edd7 6a07 	vldr	s13, [r7, #28]
 800257c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002584:	ee17 3a90 	vmov	r3, s15
 8002588:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800258a:	e005      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	61bb      	str	r3, [r7, #24]
      break;
 8002590:	e002      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002594:	61bb      	str	r3, [r7, #24]
      break;
 8002596:	bf00      	nop
  }

  return sysclockfreq;
 8002598:	69bb      	ldr	r3, [r7, #24]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3724      	adds	r7, #36	; 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	58024400 	.word	0x58024400
 80025ac:	03d09000 	.word	0x03d09000
 80025b0:	003d0900 	.word	0x003d0900
 80025b4:	017d7840 	.word	0x017d7840
 80025b8:	46000000 	.word	0x46000000
 80025bc:	4c742400 	.word	0x4c742400
 80025c0:	4a742400 	.word	0x4a742400
 80025c4:	4bbebc20 	.word	0x4bbebc20

080025c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80025ce:	f7ff fe81 	bl	80022d4 <HAL_RCC_GetSysClockFreq>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_RCC_GetHCLKFreq+0x50>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	490f      	ldr	r1, [pc, #60]	; (800261c <HAL_RCC_GetHCLKFreq+0x54>)
 80025e0:	5ccb      	ldrb	r3, [r1, r3]
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025ec:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_RCC_GetHCLKFreq+0x50>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	4a09      	ldr	r2, [pc, #36]	; (800261c <HAL_RCC_GetHCLKFreq+0x54>)
 80025f6:	5cd3      	ldrb	r3, [r2, r3]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	4a07      	ldr	r2, [pc, #28]	; (8002620 <HAL_RCC_GetHCLKFreq+0x58>)
 8002604:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002606:	4a07      	ldr	r2, [pc, #28]	; (8002624 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <HAL_RCC_GetHCLKFreq+0x58>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	58024400 	.word	0x58024400
 800261c:	08006cbc 	.word	0x08006cbc
 8002620:	24000014 	.word	0x24000014
 8002624:	24000010 	.word	0x24000010

08002628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800262c:	f7ff ffcc 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4904      	ldr	r1, [pc, #16]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x28>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	58024400 	.word	0x58024400
 8002650:	08006cbc 	.word	0x08006cbc

08002654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002658:	f7ff ffb6 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4904      	ldr	r1, [pc, #16]	; (800267c <HAL_RCC_GetPCLK2Freq+0x28>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	58024400 	.word	0x58024400
 800267c:	08006cbc 	.word	0x08006cbc

08002680 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002684:	b0ca      	sub	sp, #296	; 0x128
 8002686:	af00      	add	r7, sp, #0
 8002688:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800268c:	2300      	movs	r3, #0
 800268e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002692:	2300      	movs	r3, #0
 8002694:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80026a4:	2500      	movs	r5, #0
 80026a6:	ea54 0305 	orrs.w	r3, r4, r5
 80026aa:	d049      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80026ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026b6:	d02f      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80026b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026bc:	d828      	bhi.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026c2:	d01a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026c8:	d822      	bhi.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026d2:	d007      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026d4:	e01c      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d6:	4bb8      	ldr	r3, [pc, #736]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	4ab7      	ldr	r2, [pc, #732]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80026e2:	e01a      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026e8:	3308      	adds	r3, #8
 80026ea:	2102      	movs	r1, #2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f001 fc8f 	bl	8004010 <RCCEx_PLL2_Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80026f8:	e00f      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80026fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026fe:	3328      	adds	r3, #40	; 0x28
 8002700:	2102      	movs	r1, #2
 8002702:	4618      	mov	r0, r3
 8002704:	f001 fd36 	bl	8004174 <RCCEx_PLL3_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800270e:	e004      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002716:	e000      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800271a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10a      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002722:	4ba5      	ldr	r3, [pc, #660]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002726:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800272a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800272e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002730:	4aa1      	ldr	r2, [pc, #644]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002732:	430b      	orrs	r3, r1
 8002734:	6513      	str	r3, [r2, #80]	; 0x50
 8002736:	e003      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002738:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800273c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800274c:	f04f 0900 	mov.w	r9, #0
 8002750:	ea58 0309 	orrs.w	r3, r8, r9
 8002754:	d047      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	2b04      	cmp	r3, #4
 800275e:	d82a      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002760:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	0800277d 	.word	0x0800277d
 800276c:	0800278b 	.word	0x0800278b
 8002770:	080027a1 	.word	0x080027a1
 8002774:	080027bf 	.word	0x080027bf
 8002778:	080027bf 	.word	0x080027bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800277c:	4b8e      	ldr	r3, [pc, #568]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	4a8d      	ldr	r2, [pc, #564]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002788:	e01a      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800278a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800278e:	3308      	adds	r3, #8
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f001 fc3c 	bl	8004010 <RCCEx_PLL2_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800279e:	e00f      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027a4:	3328      	adds	r3, #40	; 0x28
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 fce3 	bl	8004174 <RCCEx_PLL3_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027b4:	e004      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80027bc:	e000      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80027be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027c8:	4b7b      	ldr	r3, [pc, #492]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027cc:	f023 0107 	bic.w	r1, r3, #7
 80027d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	4a78      	ldr	r2, [pc, #480]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027d8:	430b      	orrs	r3, r1
 80027da:	6513      	str	r3, [r2, #80]	; 0x50
 80027dc:	e003      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80027e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ee:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80027f2:	f04f 0b00 	mov.w	fp, #0
 80027f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80027fa:	d04c      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80027fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002806:	d030      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280c:	d829      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800280e:	2bc0      	cmp	r3, #192	; 0xc0
 8002810:	d02d      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002812:	2bc0      	cmp	r3, #192	; 0xc0
 8002814:	d825      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002816:	2b80      	cmp	r3, #128	; 0x80
 8002818:	d018      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800281a:	2b80      	cmp	r3, #128	; 0x80
 800281c:	d821      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002822:	2b40      	cmp	r3, #64	; 0x40
 8002824:	d007      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002826:	e01c      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002828:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	4a62      	ldr	r2, [pc, #392]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800282e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002834:	e01c      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800283a:	3308      	adds	r3, #8
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f001 fbe6 	bl	8004010 <RCCEx_PLL2_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800284a:	e011      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800284c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002850:	3328      	adds	r3, #40	; 0x28
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f001 fc8d 	bl	8004174 <RCCEx_PLL3_Config>
 800285a:	4603      	mov	r3, r0
 800285c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002860:	e006      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002868:	e002      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800286a:	bf00      	nop
 800286c:	e000      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800286e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002870:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10a      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002878:	4b4f      	ldr	r3, [pc, #316]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800287a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	4a4c      	ldr	r2, [pc, #304]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002888:	430b      	orrs	r3, r1
 800288a:	6513      	str	r3, [r2, #80]	; 0x50
 800288c:	e003      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800288e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002892:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80028a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80028ac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80028b0:	460b      	mov	r3, r1
 80028b2:	4313      	orrs	r3, r2
 80028b4:	d053      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80028b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028c2:	d035      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80028c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028c8:	d82e      	bhi.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80028ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028ce:	d031      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80028d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028d4:	d828      	bhi.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80028d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028da:	d01a      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80028dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e0:	d822      	bhi.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80028e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ea:	d007      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80028ec:	e01c      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028ee:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	4a31      	ldr	r2, [pc, #196]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028fa:	e01c      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002900:	3308      	adds	r3, #8
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f001 fb83 	bl	8004010 <RCCEx_PLL2_Config>
 800290a:	4603      	mov	r3, r0
 800290c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002910:	e011      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002916:	3328      	adds	r3, #40	; 0x28
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f001 fc2a 	bl	8004174 <RCCEx_PLL3_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002926:	e006      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800292e:	e002      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002930:	bf00      	nop
 8002932:	e000      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10b      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800293e:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800294a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800294e:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002950:	430b      	orrs	r3, r1
 8002952:	6593      	str	r3, [r2, #88]	; 0x58
 8002954:	e003      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800295a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800295e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002966:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800296a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002974:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002978:	460b      	mov	r3, r1
 800297a:	4313      	orrs	r3, r2
 800297c:	d056      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800297e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002982:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002986:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800298a:	d038      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800298c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002990:	d831      	bhi.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002992:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002996:	d034      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002998:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800299c:	d82b      	bhi.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800299e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029a2:	d01d      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80029a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029a8:	d825      	bhi.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d006      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80029ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80029b4:	e01f      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029b6:	bf00      	nop
 80029b8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029bc:	4ba2      	ldr	r3, [pc, #648]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	4aa1      	ldr	r2, [pc, #644]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029c8:	e01c      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029ce:	3308      	adds	r3, #8
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 fb1c 	bl	8004010 <RCCEx_PLL2_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80029de:	e011      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029e4:	3328      	adds	r3, #40	; 0x28
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 fbc3 	bl	8004174 <RCCEx_PLL3_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029f4:	e006      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80029fc:	e002      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80029fe:	bf00      	nop
 8002a00:	e000      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10b      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a0c:	4b8e      	ldr	r3, [pc, #568]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a10:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a1c:	4a8a      	ldr	r2, [pc, #552]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	6593      	str	r3, [r2, #88]	; 0x58
 8002a22:	e003      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002a38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002a42:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002a46:	460b      	mov	r3, r1
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	d03a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	2b30      	cmp	r3, #48	; 0x30
 8002a54:	d01f      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002a56:	2b30      	cmp	r3, #48	; 0x30
 8002a58:	d819      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d00c      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d815      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d019      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d111      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a6a:	4b77      	ldr	r3, [pc, #476]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	4a76      	ldr	r2, [pc, #472]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002a76:	e011      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	2102      	movs	r1, #2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 fac5 	bl	8004010 <RCCEx_PLL2_Config>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002a8c:	e006      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a94:	e002      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002a96:	bf00      	nop
 8002a98:	e000      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002aa4:	4b68      	ldr	r3, [pc, #416]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	4a65      	ldr	r2, [pc, #404]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ab8:	e003      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002abe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002ace:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002ad8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	d051      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aec:	d035      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002aee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002af2:	d82e      	bhi.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002af4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002af8:	d031      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002afa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002afe:	d828      	bhi.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b04:	d01a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0a:	d822      	bhi.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b14:	d007      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002b16:	e01c      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b18:	4b4b      	ldr	r3, [pc, #300]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	4a4a      	ldr	r2, [pc, #296]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b24:	e01c      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f001 fa6e 	bl	8004010 <RCCEx_PLL2_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b3a:	e011      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b40:	3328      	adds	r3, #40	; 0x28
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f001 fb15 	bl	8004174 <RCCEx_PLL3_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b50:	e006      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b58:	e002      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002b5a:	bf00      	nop
 8002b5c:	e000      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b68:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	4a34      	ldr	r2, [pc, #208]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6513      	str	r3, [r2, #80]	; 0x50
 8002b7c:	e003      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002b92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002b9c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	d056      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb0:	d033      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002bb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb6:	d82c      	bhi.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002bb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bbc:	d02f      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002bbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bc2:	d826      	bhi.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002bc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bc8:	d02b      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002bca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bce:	d820      	bhi.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bd4:	d012      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bda:	d81a      	bhi.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d022      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d115      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bea:	3308      	adds	r3, #8
 8002bec:	2101      	movs	r1, #1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 fa0e 	bl	8004010 <RCCEx_PLL2_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002bfa:	e015      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c00:	3328      	adds	r3, #40	; 0x28
 8002c02:	2101      	movs	r1, #1
 8002c04:	4618      	mov	r0, r3
 8002c06:	f001 fab5 	bl	8004174 <RCCEx_PLL3_Config>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c10:	e00a      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c18:	e006      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c1a:	bf00      	nop
 8002c1c:	e004      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c1e:	bf00      	nop
 8002c20:	e002      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c22:	bf00      	nop
 8002c24:	e000      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10d      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c34:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c3e:	4a02      	ldr	r2, [pc, #8]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c40:	430b      	orrs	r3, r1
 8002c42:	6513      	str	r3, [r2, #80]	; 0x50
 8002c44:	e006      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002c46:	bf00      	nop
 8002c48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002c60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c6a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4313      	orrs	r3, r2
 8002c72:	d055      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c80:	d033      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c86:	d82c      	bhi.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8c:	d02f      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c92:	d826      	bhi.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c98:	d02b      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002c9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c9e:	d820      	bhi.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca4:	d012      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002caa:	d81a      	bhi.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d022      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002cb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cb4:	d115      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cba:	3308      	adds	r3, #8
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f001 f9a6 	bl	8004010 <RCCEx_PLL2_Config>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002cca:	e015      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cd0:	3328      	adds	r3, #40	; 0x28
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 fa4d 	bl	8004174 <RCCEx_PLL3_Config>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ce8:	e006      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002cea:	bf00      	nop
 8002cec:	e004      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002cee:	bf00      	nop
 8002cf0:	e002      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d00:	4ba3      	ldr	r3, [pc, #652]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d10:	4a9f      	ldr	r2, [pc, #636]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d12:	430b      	orrs	r3, r1
 8002d14:	6593      	str	r3, [r2, #88]	; 0x58
 8002d16:	e003      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002d36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	d037      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d4a:	d00e      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d50:	d816      	bhi.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d018      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d5a:	d111      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d5c:	4b8c      	ldr	r3, [pc, #560]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	4a8b      	ldr	r2, [pc, #556]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d68:	e00f      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d6e:	3308      	adds	r3, #8
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 f94c 	bl	8004010 <RCCEx_PLL2_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d7e:	e004      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d86:	e000      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10a      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d92:	4b7f      	ldr	r3, [pc, #508]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d96:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	4a7b      	ldr	r2, [pc, #492]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002da2:	430b      	orrs	r3, r1
 8002da4:	6513      	str	r3, [r2, #80]	; 0x50
 8002da6:	e003      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002dc6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	d039      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d81c      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002dda:	a201      	add	r2, pc, #4	; (adr r2, 8002de0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de0:	08002e1d 	.word	0x08002e1d
 8002de4:	08002df1 	.word	0x08002df1
 8002de8:	08002dff 	.word	0x08002dff
 8002dec:	08002e1d 	.word	0x08002e1d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df0:	4b67      	ldr	r3, [pc, #412]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	4a66      	ldr	r2, [pc, #408]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002dfc:	e00f      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e02:	3308      	adds	r3, #8
 8002e04:	2102      	movs	r1, #2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f001 f902 	bl	8004010 <RCCEx_PLL2_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e12:	e004      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e1a:	e000      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e26:	4b5a      	ldr	r3, [pc, #360]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	f023 0103 	bic.w	r1, r3, #3
 8002e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e34:	4a56      	ldr	r2, [pc, #344]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e36:	430b      	orrs	r3, r1
 8002e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e3a:	e003      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002e50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e54:	2300      	movs	r3, #0
 8002e56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e5a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f000 809f 	beq.w	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e66:	4b4b      	ldr	r3, [pc, #300]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a4a      	ldr	r2, [pc, #296]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e72:	f7fe f8b7 	bl	8000fe4 <HAL_GetTick>
 8002e76:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7c:	f7fe f8b2 	bl	8000fe4 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b64      	cmp	r3, #100	; 0x64
 8002e8a:	d903      	bls.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e92:	e005      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e94:	4b3f      	ldr	r3, [pc, #252]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ed      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d179      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ea8:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002eb4:	4053      	eors	r3, r2
 8002eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d015      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ebe:	4b34      	ldr	r3, [pc, #208]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eca:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	4a30      	ldr	r2, [pc, #192]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed6:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	4a2d      	ldr	r2, [pc, #180]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ee2:	4a2b      	ldr	r2, [pc, #172]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef6:	d118      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe f874 	bl	8000fe4 <HAL_GetTick>
 8002efc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f00:	e00d      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fe f86f 	bl	8000fe4 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d903      	bls.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002f1c:	e005      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0eb      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d129      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f42:	d10e      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f54:	091a      	lsrs	r2, r3, #4
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6113      	str	r3, [r2, #16]
 8002f60:	e005      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002f62:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f6c:	6113      	str	r3, [r2, #16]
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f70:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7e:	4a04      	ldr	r2, [pc, #16]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70
 8002f84:	e00e      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8002f8e:	e009      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002f90:	58024400 	.word	0x58024400
 8002f94:	58024800 	.word	0x58024800
 8002f98:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	f002 0301 	and.w	r3, r2, #1
 8002fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f000 8089 	beq.w	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fcc:	2b28      	cmp	r3, #40	; 0x28
 8002fce:	d86b      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002fd0:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	080030b1 	.word	0x080030b1
 8002fdc:	080030a9 	.word	0x080030a9
 8002fe0:	080030a9 	.word	0x080030a9
 8002fe4:	080030a9 	.word	0x080030a9
 8002fe8:	080030a9 	.word	0x080030a9
 8002fec:	080030a9 	.word	0x080030a9
 8002ff0:	080030a9 	.word	0x080030a9
 8002ff4:	080030a9 	.word	0x080030a9
 8002ff8:	0800307d 	.word	0x0800307d
 8002ffc:	080030a9 	.word	0x080030a9
 8003000:	080030a9 	.word	0x080030a9
 8003004:	080030a9 	.word	0x080030a9
 8003008:	080030a9 	.word	0x080030a9
 800300c:	080030a9 	.word	0x080030a9
 8003010:	080030a9 	.word	0x080030a9
 8003014:	080030a9 	.word	0x080030a9
 8003018:	08003093 	.word	0x08003093
 800301c:	080030a9 	.word	0x080030a9
 8003020:	080030a9 	.word	0x080030a9
 8003024:	080030a9 	.word	0x080030a9
 8003028:	080030a9 	.word	0x080030a9
 800302c:	080030a9 	.word	0x080030a9
 8003030:	080030a9 	.word	0x080030a9
 8003034:	080030a9 	.word	0x080030a9
 8003038:	080030b1 	.word	0x080030b1
 800303c:	080030a9 	.word	0x080030a9
 8003040:	080030a9 	.word	0x080030a9
 8003044:	080030a9 	.word	0x080030a9
 8003048:	080030a9 	.word	0x080030a9
 800304c:	080030a9 	.word	0x080030a9
 8003050:	080030a9 	.word	0x080030a9
 8003054:	080030a9 	.word	0x080030a9
 8003058:	080030b1 	.word	0x080030b1
 800305c:	080030a9 	.word	0x080030a9
 8003060:	080030a9 	.word	0x080030a9
 8003064:	080030a9 	.word	0x080030a9
 8003068:	080030a9 	.word	0x080030a9
 800306c:	080030a9 	.word	0x080030a9
 8003070:	080030a9 	.word	0x080030a9
 8003074:	080030a9 	.word	0x080030a9
 8003078:	080030b1 	.word	0x080030b1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800307c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003080:	3308      	adds	r3, #8
 8003082:	2101      	movs	r1, #1
 8003084:	4618      	mov	r0, r3
 8003086:	f000 ffc3 	bl	8004010 <RCCEx_PLL2_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003090:	e00f      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003096:	3328      	adds	r3, #40	; 0x28
 8003098:	2101      	movs	r1, #1
 800309a:	4618      	mov	r0, r3
 800309c:	f001 f86a 	bl	8004174 <RCCEx_PLL3_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030a6:	e004      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030ae:	e000      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80030b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80030ba:	4bbf      	ldr	r3, [pc, #764]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80030c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c8:	4abb      	ldr	r2, [pc, #748]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030ca:	430b      	orrs	r3, r1
 80030cc:	6553      	str	r3, [r2, #84]	; 0x54
 80030ce:	e003      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80030d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e0:	f002 0302 	and.w	r3, r2, #2
 80030e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030e8:	2300      	movs	r3, #0
 80030ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80030ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80030f2:	460b      	mov	r3, r1
 80030f4:	4313      	orrs	r3, r2
 80030f6:	d041      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80030f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d824      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	08003155 	.word	0x08003155
 800310c:	08003121 	.word	0x08003121
 8003110:	08003137 	.word	0x08003137
 8003114:	08003155 	.word	0x08003155
 8003118:	08003155 	.word	0x08003155
 800311c:	08003155 	.word	0x08003155
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003124:	3308      	adds	r3, #8
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f000 ff71 	bl	8004010 <RCCEx_PLL2_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003134:	e00f      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800313a:	3328      	adds	r3, #40	; 0x28
 800313c:	2101      	movs	r1, #1
 800313e:	4618      	mov	r0, r3
 8003140:	f001 f818 	bl	8004174 <RCCEx_PLL3_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800314a:	e004      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003152:	e000      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800315e:	4b96      	ldr	r3, [pc, #600]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	f023 0107 	bic.w	r1, r3, #7
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800316a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800316c:	4a92      	ldr	r2, [pc, #584]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800316e:	430b      	orrs	r3, r1
 8003170:	6553      	str	r3, [r2, #84]	; 0x54
 8003172:	e003      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003178:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800317c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f002 0304 	and.w	r3, r2, #4
 8003188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003192:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003196:	460b      	mov	r3, r1
 8003198:	4313      	orrs	r3, r2
 800319a:	d044      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800319c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d825      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80031a8:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80031aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ae:	bf00      	nop
 80031b0:	080031fd 	.word	0x080031fd
 80031b4:	080031c9 	.word	0x080031c9
 80031b8:	080031df 	.word	0x080031df
 80031bc:	080031fd 	.word	0x080031fd
 80031c0:	080031fd 	.word	0x080031fd
 80031c4:	080031fd 	.word	0x080031fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031cc:	3308      	adds	r3, #8
 80031ce:	2101      	movs	r1, #1
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 ff1d 	bl	8004010 <RCCEx_PLL2_Config>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80031dc:	e00f      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e2:	3328      	adds	r3, #40	; 0x28
 80031e4:	2101      	movs	r1, #1
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 ffc4 	bl	8004174 <RCCEx_PLL3_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80031f2:	e004      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031fa:	e000      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80031fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10b      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003206:	4b6c      	ldr	r3, [pc, #432]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	f023 0107 	bic.w	r1, r3, #7
 800320e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003216:	4a68      	ldr	r2, [pc, #416]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003218:	430b      	orrs	r3, r1
 800321a:	6593      	str	r3, [r2, #88]	; 0x58
 800321c:	e003      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003222:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	f002 0320 	and.w	r3, r2, #32
 8003232:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003236:	2300      	movs	r3, #0
 8003238:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800323c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003240:	460b      	mov	r3, r1
 8003242:	4313      	orrs	r3, r2
 8003244:	d055      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003252:	d033      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003258:	d82c      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800325a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325e:	d02f      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d826      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003266:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800326a:	d02b      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800326c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003270:	d820      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003276:	d012      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800327c:	d81a      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d022      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003286:	d115      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800328c:	3308      	adds	r3, #8
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f000 febd 	bl	8004010 <RCCEx_PLL2_Config>
 8003296:	4603      	mov	r3, r0
 8003298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800329c:	e015      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800329e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a2:	3328      	adds	r3, #40	; 0x28
 80032a4:	2102      	movs	r1, #2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 ff64 	bl	8004174 <RCCEx_PLL3_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032b2:	e00a      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032ba:	e006      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032bc:	bf00      	nop
 80032be:	e004      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032c0:	bf00      	nop
 80032c2:	e002      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032c4:	bf00      	nop
 80032c6:	e000      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10b      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032d2:	4b39      	ldr	r3, [pc, #228]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80032da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	4a35      	ldr	r2, [pc, #212]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032e4:	430b      	orrs	r3, r1
 80032e6:	6553      	str	r3, [r2, #84]	; 0x54
 80032e8:	e003      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80032f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80032fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003302:	2300      	movs	r3, #0
 8003304:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003308:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800330c:	460b      	mov	r3, r1
 800330e:	4313      	orrs	r3, r2
 8003310:	d058      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003316:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800331a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800331e:	d033      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003320:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003324:	d82c      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332a:	d02f      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800332c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003330:	d826      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003332:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003336:	d02b      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003338:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800333c:	d820      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800333e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003342:	d012      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003348:	d81a      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d022      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d115      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003358:	3308      	adds	r3, #8
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fe57 	bl	8004010 <RCCEx_PLL2_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003368:	e015      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800336e:	3328      	adds	r3, #40	; 0x28
 8003370:	2102      	movs	r1, #2
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fefe 	bl	8004174 <RCCEx_PLL3_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800337e:	e00a      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003386:	e006      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003388:	bf00      	nop
 800338a:	e004      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800338c:	bf00      	nop
 800338e:	e002      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003390:	bf00      	nop
 8003392:	e000      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10e      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80033a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033ae:	4a02      	ldr	r2, [pc, #8]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033b0:	430b      	orrs	r3, r1
 80033b2:	6593      	str	r3, [r2, #88]	; 0x58
 80033b4:	e006      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80033b6:	bf00      	nop
 80033b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80033d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033d4:	2300      	movs	r3, #0
 80033d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80033de:	460b      	mov	r3, r1
 80033e0:	4313      	orrs	r3, r2
 80033e2:	d055      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80033e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033f0:	d033      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80033f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033f6:	d82c      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80033f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fc:	d02f      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80033fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003402:	d826      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003404:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003408:	d02b      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800340a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800340e:	d820      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003414:	d012      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341a:	d81a      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d022      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003424:	d115      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800342a:	3308      	adds	r3, #8
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fdee 	bl	8004010 <RCCEx_PLL2_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800343a:	e015      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800343c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003440:	3328      	adds	r3, #40	; 0x28
 8003442:	2102      	movs	r1, #2
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fe95 	bl	8004174 <RCCEx_PLL3_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003450:	e00a      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003458:	e006      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800345a:	bf00      	nop
 800345c:	e004      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800345e:	bf00      	nop
 8003460:	e002      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003462:	bf00      	nop
 8003464:	e000      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003468:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003470:	4ba1      	ldr	r3, [pc, #644]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003474:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800347c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003480:	4a9d      	ldr	r2, [pc, #628]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003482:	430b      	orrs	r3, r1
 8003484:	6593      	str	r3, [r2, #88]	; 0x58
 8003486:	e003      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800348c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f002 0308 	and.w	r3, r2, #8
 800349c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034a0:	2300      	movs	r3, #0
 80034a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80034aa:	460b      	mov	r3, r1
 80034ac:	4313      	orrs	r3, r2
 80034ae:	d01e      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80034b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c2:	3328      	adds	r3, #40	; 0x28
 80034c4:	2102      	movs	r1, #2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fe54 	bl	8004174 <RCCEx_PLL3_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80034d8:	4b87      	ldr	r3, [pc, #540]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e8:	4a83      	ldr	r2, [pc, #524]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034ea:	430b      	orrs	r3, r1
 80034ec:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	f002 0310 	and.w	r3, r2, #16
 80034fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003504:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003508:	460b      	mov	r3, r1
 800350a:	4313      	orrs	r3, r2
 800350c:	d01e      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800350e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003512:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351a:	d10c      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800351c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003520:	3328      	adds	r3, #40	; 0x28
 8003522:	2102      	movs	r1, #2
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fe25 	bl	8004174 <RCCEx_PLL3_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003536:	4b70      	ldr	r3, [pc, #448]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003546:	4a6c      	ldr	r2, [pc, #432]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003548:	430b      	orrs	r3, r1
 800354a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800354c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003558:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800355c:	2300      	movs	r3, #0
 800355e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003562:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003566:	460b      	mov	r3, r1
 8003568:	4313      	orrs	r3, r2
 800356a:	d03e      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800356c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003570:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003574:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003578:	d022      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800357a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800357e:	d81b      	bhi.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003588:	d00b      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800358a:	e015      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800358c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003590:	3308      	adds	r3, #8
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fd3b 	bl	8004010 <RCCEx_PLL2_Config>
 800359a:	4603      	mov	r3, r0
 800359c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035a0:	e00f      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a6:	3328      	adds	r3, #40	; 0x28
 80035a8:	2102      	movs	r1, #2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fde2 	bl	8004174 <RCCEx_PLL3_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035b6:	e004      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035be:	e000      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80035c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ca:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80035d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035da:	4a47      	ldr	r2, [pc, #284]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035dc:	430b      	orrs	r3, r1
 80035de:	6593      	str	r3, [r2, #88]	; 0x58
 80035e0:	e003      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80035f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80035f8:	2300      	movs	r3, #0
 80035fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003600:	460b      	mov	r3, r1
 8003602:	4313      	orrs	r3, r2
 8003604:	d03b      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003612:	d01f      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003614:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003618:	d818      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800361a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800361e:	d003      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003620:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003624:	d007      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003626:	e011      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003628:	4b33      	ldr	r3, [pc, #204]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	4a32      	ldr	r2, [pc, #200]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003634:	e00f      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800363a:	3328      	adds	r3, #40	; 0x28
 800363c:	2101      	movs	r1, #1
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fd98 	bl	8004174 <RCCEx_PLL3_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800364a:	e004      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003652:	e000      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10b      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800365e:	4b26      	ldr	r3, [pc, #152]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366e:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003670:	430b      	orrs	r3, r1
 8003672:	6553      	str	r3, [r2, #84]	; 0x54
 8003674:	e003      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003676:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800367a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800367e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800368a:	673b      	str	r3, [r7, #112]	; 0x70
 800368c:	2300      	movs	r3, #0
 800368e:	677b      	str	r3, [r7, #116]	; 0x74
 8003690:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003694:	460b      	mov	r3, r1
 8003696:	4313      	orrs	r3, r2
 8003698:	d034      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800369a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800369e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a8:	d007      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80036aa:	e011      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ac:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	4a11      	ldr	r2, [pc, #68]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036b8:	e00e      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036be:	3308      	adds	r3, #8
 80036c0:	2102      	movs	r1, #2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fca4 	bl	8004010 <RCCEx_PLL2_Config>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036ce:	e003      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ee:	4a02      	ldr	r2, [pc, #8]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036f0:	430b      	orrs	r3, r1
 80036f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036f4:	e006      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80036f6:	bf00      	nop
 80036f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003700:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003710:	66bb      	str	r3, [r7, #104]	; 0x68
 8003712:	2300      	movs	r3, #0
 8003714:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003716:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800371a:	460b      	mov	r3, r1
 800371c:	4313      	orrs	r3, r2
 800371e:	d00c      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003724:	3328      	adds	r3, #40	; 0x28
 8003726:	2102      	movs	r1, #2
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fd23 	bl	8004174 <RCCEx_PLL3_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003746:	663b      	str	r3, [r7, #96]	; 0x60
 8003748:	2300      	movs	r3, #0
 800374a:	667b      	str	r3, [r7, #100]	; 0x64
 800374c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003750:	460b      	mov	r3, r1
 8003752:	4313      	orrs	r3, r2
 8003754:	d038      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800375a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800375e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003762:	d018      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003768:	d811      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800376a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800376e:	d014      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003774:	d80b      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d011      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800377a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377e:	d106      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003780:	4bc3      	ldr	r3, [pc, #780]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	4ac2      	ldr	r2, [pc, #776]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800378c:	e008      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003794:	e004      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003796:	bf00      	nop
 8003798:	e002      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800379e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10b      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037a8:	4bb9      	ldr	r3, [pc, #740]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b8:	4ab5      	ldr	r2, [pc, #724]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037ba:	430b      	orrs	r3, r1
 80037bc:	6553      	str	r3, [r2, #84]	; 0x54
 80037be:	e003      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80037d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80037d6:	2300      	movs	r3, #0
 80037d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80037de:	460b      	mov	r3, r1
 80037e0:	4313      	orrs	r3, r2
 80037e2:	d009      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037e4:	4baa      	ldr	r3, [pc, #680]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80037ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f2:	4aa7      	ldr	r2, [pc, #668]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037f4:	430b      	orrs	r3, r1
 80037f6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003804:	653b      	str	r3, [r7, #80]	; 0x50
 8003806:	2300      	movs	r3, #0
 8003808:	657b      	str	r3, [r7, #84]	; 0x54
 800380a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800380e:	460b      	mov	r3, r1
 8003810:	4313      	orrs	r3, r2
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003814:	4b9e      	ldr	r3, [pc, #632]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003820:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003824:	4a9a      	ldr	r2, [pc, #616]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003826:	430b      	orrs	r3, r1
 8003828:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800382a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003836:	64bb      	str	r3, [r7, #72]	; 0x48
 8003838:	2300      	movs	r3, #0
 800383a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800383c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003840:	460b      	mov	r3, r1
 8003842:	4313      	orrs	r3, r2
 8003844:	d009      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003846:	4b92      	ldr	r3, [pc, #584]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003854:	4a8e      	ldr	r2, [pc, #568]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003856:	430b      	orrs	r3, r1
 8003858:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800385a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003866:	643b      	str	r3, [r7, #64]	; 0x40
 8003868:	2300      	movs	r3, #0
 800386a:	647b      	str	r3, [r7, #68]	; 0x44
 800386c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003870:	460b      	mov	r3, r1
 8003872:	4313      	orrs	r3, r2
 8003874:	d00e      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003876:	4b86      	ldr	r3, [pc, #536]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	4a85      	ldr	r2, [pc, #532]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800387c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003880:	6113      	str	r3, [r2, #16]
 8003882:	4b83      	ldr	r3, [pc, #524]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003884:	6919      	ldr	r1, [r3, #16]
 8003886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800388a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800388e:	4a80      	ldr	r2, [pc, #512]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003890:	430b      	orrs	r3, r1
 8003892:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80038a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80038a2:	2300      	movs	r3, #0
 80038a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80038aa:	460b      	mov	r3, r1
 80038ac:	4313      	orrs	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038b0:	4b77      	ldr	r3, [pc, #476]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038be:	4a74      	ldr	r2, [pc, #464]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038c0:	430b      	orrs	r3, r1
 80038c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80038d0:	633b      	str	r3, [r7, #48]	; 0x30
 80038d2:	2300      	movs	r3, #0
 80038d4:	637b      	str	r3, [r7, #52]	; 0x34
 80038d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80038da:	460b      	mov	r3, r1
 80038dc:	4313      	orrs	r3, r2
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038e0:	4b6b      	ldr	r3, [pc, #428]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f0:	4a67      	ldr	r2, [pc, #412]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038f2:	430b      	orrs	r3, r1
 80038f4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	2100      	movs	r1, #0
 8003900:	62b9      	str	r1, [r7, #40]	; 0x28
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003908:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d011      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003916:	3308      	adds	r3, #8
 8003918:	2100      	movs	r1, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fb78 	bl	8004010 <RCCEx_PLL2_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003932:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	2100      	movs	r1, #0
 8003940:	6239      	str	r1, [r7, #32]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
 8003948:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800394c:	460b      	mov	r3, r1
 800394e:	4313      	orrs	r3, r2
 8003950:	d011      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003956:	3308      	adds	r3, #8
 8003958:	2101      	movs	r1, #1
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fb58 	bl	8004010 <RCCEx_PLL2_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003972:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	2100      	movs	r1, #0
 8003980:	61b9      	str	r1, [r7, #24]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800398c:	460b      	mov	r3, r1
 800398e:	4313      	orrs	r3, r2
 8003990:	d011      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003996:	3308      	adds	r3, #8
 8003998:	2102      	movs	r1, #2
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fb38 	bl	8004010 <RCCEx_PLL2_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80039a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	2100      	movs	r1, #0
 80039c0:	6139      	str	r1, [r7, #16]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80039cc:	460b      	mov	r3, r1
 80039ce:	4313      	orrs	r3, r2
 80039d0:	d011      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d6:	3328      	adds	r3, #40	; 0x28
 80039d8:	2100      	movs	r1, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fbca 	bl	8004174 <RCCEx_PLL3_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80039e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80039f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	2100      	movs	r1, #0
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	d011      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a16:	3328      	adds	r3, #40	; 0x28
 8003a18:	2101      	movs	r1, #1
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fbaa 	bl	8004174 <RCCEx_PLL3_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	2100      	movs	r1, #0
 8003a40:	6039      	str	r1, [r7, #0]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	d011      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a56:	3328      	adds	r3, #40	; 0x28
 8003a58:	2102      	movs	r1, #2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fb8a 	bl	8004174 <RCCEx_PLL3_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003a76:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a90:	58024400 	.word	0x58024400

08003a94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003a98:	f7fe fd96 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4904      	ldr	r1, [pc, #16]	; (8003abc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	58024400 	.word	0x58024400
 8003abc:	08006cbc 	.word	0x08006cbc

08003ac0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	; 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ac8:	4ba1      	ldr	r3, [pc, #644]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003ad2:	4b9f      	ldr	r3, [pc, #636]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	0b1b      	lsrs	r3, r3, #12
 8003ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003adc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003ade:	4b9c      	ldr	r3, [pc, #624]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	091b      	lsrs	r3, r3, #4
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003aea:	4b99      	ldr	r3, [pc, #612]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	08db      	lsrs	r3, r3, #3
 8003af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8111 	beq.w	8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	f000 8083 	beq.w	8003c1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	f200 80a1 	bhi.w	8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d056      	beq.n	8003bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003b2a:	e099      	b.n	8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b2c:	4b88      	ldr	r3, [pc, #544]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d02d      	beq.n	8003b94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b38:	4b85      	ldr	r3, [pc, #532]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	08db      	lsrs	r3, r3, #3
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	4a84      	ldr	r2, [pc, #528]	; (8003d54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
 8003b48:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	ee07 3a90 	vmov	s15, r3
 8003b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b62:	4b7b      	ldr	r3, [pc, #492]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003b92:	e087      	b.n	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba6:	4b6a      	ldr	r3, [pc, #424]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bd6:	e065      	b.n	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bea:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bfe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c1a:	e043      	b.n	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2e:	4b48      	ldr	r3, [pc, #288]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c5e:	e021      	b.n	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c72:	4b37      	ldr	r3, [pc, #220]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ca2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003ca4:	4b2a      	ldr	r3, [pc, #168]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	0a5b      	lsrs	r3, r3, #9
 8003caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cca:	ee17 2a90 	vmov	r2, s15
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003cd2:	4b1f      	ldr	r3, [pc, #124]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	0c1b      	lsrs	r3, r3, #16
 8003cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cdc:	ee07 3a90 	vmov	s15, r3
 8003ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf8:	ee17 2a90 	vmov	r2, s15
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003d00:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	0e1b      	lsrs	r3, r3, #24
 8003d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d26:	ee17 2a90 	vmov	r2, s15
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d2e:	e008      	b.n	8003d42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	609a      	str	r2, [r3, #8]
}
 8003d42:	bf00      	nop
 8003d44:	3724      	adds	r7, #36	; 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	58024400 	.word	0x58024400
 8003d54:	03d09000 	.word	0x03d09000
 8003d58:	46000000 	.word	0x46000000
 8003d5c:	4c742400 	.word	0x4c742400
 8003d60:	4a742400 	.word	0x4a742400
 8003d64:	4bbebc20 	.word	0x4bbebc20

08003d68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b089      	sub	sp, #36	; 0x24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d70:	4ba1      	ldr	r3, [pc, #644]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003d7a:	4b9f      	ldr	r3, [pc, #636]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	0d1b      	lsrs	r3, r3, #20
 8003d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d86:	4b9c      	ldr	r3, [pc, #624]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003d92:	4b99      	ldr	r3, [pc, #612]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	08db      	lsrs	r3, r3, #3
 8003d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003daa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8111 	beq.w	8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	f000 8083 	beq.w	8003ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	f200 80a1 	bhi.w	8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d056      	beq.n	8003e80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003dd2:	e099      	b.n	8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dd4:	4b88      	ldr	r3, [pc, #544]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d02d      	beq.n	8003e3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003de0:	4b85      	ldr	r3, [pc, #532]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	08db      	lsrs	r3, r3, #3
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	4a84      	ldr	r2, [pc, #528]	; (8003ffc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
 8003df0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	ee07 3a90 	vmov	s15, r3
 8003df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0a:	4b7b      	ldr	r3, [pc, #492]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e3a:	e087      	b.n	8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004004 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4e:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e7e:	e065      	b.n	8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e92:	4b59      	ldr	r3, [pc, #356]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ea6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ec2:	e043      	b.n	8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800400c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed6:	4b48      	ldr	r3, [pc, #288]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f06:	e021      	b.n	8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1a:	4b37      	ldr	r3, [pc, #220]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	0a5b      	lsrs	r3, r3, #9
 8003f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f72:	ee17 2a90 	vmov	r2, s15
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	0c1b      	lsrs	r3, r3, #16
 8003f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fa0:	ee17 2a90 	vmov	r2, s15
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003fa8:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	0e1b      	lsrs	r3, r3, #24
 8003fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fce:	ee17 2a90 	vmov	r2, s15
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003fd6:	e008      	b.n	8003fea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
}
 8003fea:	bf00      	nop
 8003fec:	3724      	adds	r7, #36	; 0x24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	03d09000 	.word	0x03d09000
 8004000:	46000000 	.word	0x46000000
 8004004:	4c742400 	.word	0x4c742400
 8004008:	4a742400 	.word	0x4a742400
 800400c:	4bbebc20 	.word	0x4bbebc20

08004010 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800401e:	4b53      	ldr	r3, [pc, #332]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b03      	cmp	r3, #3
 8004028:	d101      	bne.n	800402e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e099      	b.n	8004162 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800402e:	4b4f      	ldr	r3, [pc, #316]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a4e      	ldr	r2, [pc, #312]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004034:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403a:	f7fc ffd3 	bl	8000fe4 <HAL_GetTick>
 800403e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004040:	e008      	b.n	8004054 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004042:	f7fc ffcf 	bl	8000fe4 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e086      	b.n	8004162 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004054:	4b45      	ldr	r3, [pc, #276]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f0      	bne.n	8004042 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004060:	4b42      	ldr	r3, [pc, #264]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	031b      	lsls	r3, r3, #12
 800406e:	493f      	ldr	r1, [pc, #252]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004070:	4313      	orrs	r3, r2
 8004072:	628b      	str	r3, [r1, #40]	; 0x28
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	3b01      	subs	r3, #1
 800407a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	3b01      	subs	r3, #1
 8004084:	025b      	lsls	r3, r3, #9
 8004086:	b29b      	uxth	r3, r3
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	3b01      	subs	r3, #1
 8004090:	041b      	lsls	r3, r3, #16
 8004092:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	3b01      	subs	r3, #1
 800409e:	061b      	lsls	r3, r3, #24
 80040a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040a4:	4931      	ldr	r1, [pc, #196]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80040aa:	4b30      	ldr	r3, [pc, #192]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	492d      	ldr	r1, [pc, #180]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80040bc:	4b2b      	ldr	r3, [pc, #172]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	f023 0220 	bic.w	r2, r3, #32
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	4928      	ldr	r1, [pc, #160]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80040ce:	4b27      	ldr	r3, [pc, #156]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	4a26      	ldr	r2, [pc, #152]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040d4:	f023 0310 	bic.w	r3, r3, #16
 80040d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80040da:	4b24      	ldr	r3, [pc, #144]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <RCCEx_PLL2_Config+0x160>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	69d2      	ldr	r2, [r2, #28]
 80040e6:	00d2      	lsls	r2, r2, #3
 80040e8:	4920      	ldr	r1, [pc, #128]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80040ee:	4b1f      	ldr	r3, [pc, #124]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	4a1e      	ldr	r2, [pc, #120]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 80040f4:	f043 0310 	orr.w	r3, r3, #16
 80040f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d106      	bne.n	800410e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	4a19      	ldr	r2, [pc, #100]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004106:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800410a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800410c:	e00f      	b.n	800412e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d106      	bne.n	8004122 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004114:	4b15      	ldr	r3, [pc, #84]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	4a14      	ldr	r2, [pc, #80]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 800411a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800411e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004120:	e005      	b.n	800412e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	4a11      	ldr	r2, [pc, #68]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800412c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800412e:	4b0f      	ldr	r3, [pc, #60]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a0e      	ldr	r2, [pc, #56]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004134:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413a:	f7fc ff53 	bl	8000fe4 <HAL_GetTick>
 800413e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004140:	e008      	b.n	8004154 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004142:	f7fc ff4f 	bl	8000fe4 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e006      	b.n	8004162 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <RCCEx_PLL2_Config+0x15c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004160:	7bfb      	ldrb	r3, [r7, #15]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	58024400 	.word	0x58024400
 8004170:	ffff0007 	.word	0xffff0007

08004174 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004182:	4b53      	ldr	r3, [pc, #332]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b03      	cmp	r3, #3
 800418c:	d101      	bne.n	8004192 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e099      	b.n	80042c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004192:	4b4f      	ldr	r3, [pc, #316]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a4e      	ldr	r2, [pc, #312]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419e:	f7fc ff21 	bl	8000fe4 <HAL_GetTick>
 80041a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041a4:	e008      	b.n	80041b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041a6:	f7fc ff1d 	bl	8000fe4 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e086      	b.n	80042c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041b8:	4b45      	ldr	r3, [pc, #276]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f0      	bne.n	80041a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041c4:	4b42      	ldr	r3, [pc, #264]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	051b      	lsls	r3, r3, #20
 80041d2:	493f      	ldr	r1, [pc, #252]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	628b      	str	r3, [r1, #40]	; 0x28
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	3b01      	subs	r3, #1
 80041de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	025b      	lsls	r3, r3, #9
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	041b      	lsls	r3, r3, #16
 80041f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	3b01      	subs	r3, #1
 8004202:	061b      	lsls	r3, r3, #24
 8004204:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004208:	4931      	ldr	r1, [pc, #196]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800420e:	4b30      	ldr	r3, [pc, #192]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	492d      	ldr	r1, [pc, #180]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800421c:	4313      	orrs	r3, r2
 800421e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004220:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	4928      	ldr	r1, [pc, #160]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004232:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800423c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800423e:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004242:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <RCCEx_PLL3_Config+0x160>)
 8004244:	4013      	ands	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	69d2      	ldr	r2, [r2, #28]
 800424a:	00d2      	lsls	r2, r2, #3
 800424c:	4920      	ldr	r1, [pc, #128]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004252:	4b1f      	ldr	r3, [pc, #124]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	4a1e      	ldr	r2, [pc, #120]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d106      	bne.n	8004272 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004264:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800426a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800426e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004270:	e00f      	b.n	8004292 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d106      	bne.n	8004286 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004278:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	4a14      	ldr	r2, [pc, #80]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800427e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004284:	e005      	b.n	8004292 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 800428c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004290:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 8004298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429e:	f7fc fea1 	bl	8000fe4 <HAL_GetTick>
 80042a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042a4:	e008      	b.n	80042b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80042a6:	f7fc fe9d 	bl	8000fe4 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e006      	b.n	80042c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <RCCEx_PLL3_Config+0x15c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	58024400 	.word	0x58024400
 80042d4:	ffff0007 	.word	0xffff0007

080042d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e049      	b.n	800437e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fc fc3c 	bl	8000b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f000 fed0 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e049      	b.n	800442c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f841 	bl	8004434 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3304      	adds	r3, #4
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f000 fe79 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d109      	bne.n	800446c <HAL_TIM_PWM_Start+0x24>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b01      	cmp	r3, #1
 8004462:	bf14      	ite	ne
 8004464:	2301      	movne	r3, #1
 8004466:	2300      	moveq	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e03c      	b.n	80044e6 <HAL_TIM_PWM_Start+0x9e>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b04      	cmp	r3, #4
 8004470:	d109      	bne.n	8004486 <HAL_TIM_PWM_Start+0x3e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b01      	cmp	r3, #1
 800447c:	bf14      	ite	ne
 800447e:	2301      	movne	r3, #1
 8004480:	2300      	moveq	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	e02f      	b.n	80044e6 <HAL_TIM_PWM_Start+0x9e>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d109      	bne.n	80044a0 <HAL_TIM_PWM_Start+0x58>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	bf14      	ite	ne
 8004498:	2301      	movne	r3, #1
 800449a:	2300      	moveq	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	e022      	b.n	80044e6 <HAL_TIM_PWM_Start+0x9e>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b0c      	cmp	r3, #12
 80044a4:	d109      	bne.n	80044ba <HAL_TIM_PWM_Start+0x72>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	bf14      	ite	ne
 80044b2:	2301      	movne	r3, #1
 80044b4:	2300      	moveq	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	e015      	b.n	80044e6 <HAL_TIM_PWM_Start+0x9e>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d109      	bne.n	80044d4 <HAL_TIM_PWM_Start+0x8c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	bf14      	ite	ne
 80044cc:	2301      	movne	r3, #1
 80044ce:	2300      	moveq	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	e008      	b.n	80044e6 <HAL_TIM_PWM_Start+0x9e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	bf14      	ite	ne
 80044e0:	2301      	movne	r3, #1
 80044e2:	2300      	moveq	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0a1      	b.n	8004632 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <HAL_TIM_PWM_Start+0xb6>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044fc:	e023      	b.n	8004546 <HAL_TIM_PWM_Start+0xfe>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d104      	bne.n	800450e <HAL_TIM_PWM_Start+0xc6>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800450c:	e01b      	b.n	8004546 <HAL_TIM_PWM_Start+0xfe>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b08      	cmp	r3, #8
 8004512:	d104      	bne.n	800451e <HAL_TIM_PWM_Start+0xd6>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800451c:	e013      	b.n	8004546 <HAL_TIM_PWM_Start+0xfe>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b0c      	cmp	r3, #12
 8004522:	d104      	bne.n	800452e <HAL_TIM_PWM_Start+0xe6>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800452c:	e00b      	b.n	8004546 <HAL_TIM_PWM_Start+0xfe>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b10      	cmp	r3, #16
 8004532:	d104      	bne.n	800453e <HAL_TIM_PWM_Start+0xf6>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800453c:	e003      	b.n	8004546 <HAL_TIM_PWM_Start+0xfe>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2201      	movs	r2, #1
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f001 f9ce 	bl	80058f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a38      	ldr	r2, [pc, #224]	; (800463c <HAL_TIM_PWM_Start+0x1f4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d013      	beq.n	8004586 <HAL_TIM_PWM_Start+0x13e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a37      	ldr	r2, [pc, #220]	; (8004640 <HAL_TIM_PWM_Start+0x1f8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00e      	beq.n	8004586 <HAL_TIM_PWM_Start+0x13e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a35      	ldr	r2, [pc, #212]	; (8004644 <HAL_TIM_PWM_Start+0x1fc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d009      	beq.n	8004586 <HAL_TIM_PWM_Start+0x13e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a34      	ldr	r2, [pc, #208]	; (8004648 <HAL_TIM_PWM_Start+0x200>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d004      	beq.n	8004586 <HAL_TIM_PWM_Start+0x13e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a32      	ldr	r2, [pc, #200]	; (800464c <HAL_TIM_PWM_Start+0x204>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d101      	bne.n	800458a <HAL_TIM_PWM_Start+0x142>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <HAL_TIM_PWM_Start+0x144>
 800458a:	2300      	movs	r3, #0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d007      	beq.n	80045a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800459e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a25      	ldr	r2, [pc, #148]	; (800463c <HAL_TIM_PWM_Start+0x1f4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d022      	beq.n	80045f0 <HAL_TIM_PWM_Start+0x1a8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b2:	d01d      	beq.n	80045f0 <HAL_TIM_PWM_Start+0x1a8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a25      	ldr	r2, [pc, #148]	; (8004650 <HAL_TIM_PWM_Start+0x208>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d018      	beq.n	80045f0 <HAL_TIM_PWM_Start+0x1a8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a24      	ldr	r2, [pc, #144]	; (8004654 <HAL_TIM_PWM_Start+0x20c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d013      	beq.n	80045f0 <HAL_TIM_PWM_Start+0x1a8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a22      	ldr	r2, [pc, #136]	; (8004658 <HAL_TIM_PWM_Start+0x210>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00e      	beq.n	80045f0 <HAL_TIM_PWM_Start+0x1a8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1a      	ldr	r2, [pc, #104]	; (8004640 <HAL_TIM_PWM_Start+0x1f8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d009      	beq.n	80045f0 <HAL_TIM_PWM_Start+0x1a8>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1e      	ldr	r2, [pc, #120]	; (800465c <HAL_TIM_PWM_Start+0x214>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d004      	beq.n	80045f0 <HAL_TIM_PWM_Start+0x1a8>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a16      	ldr	r2, [pc, #88]	; (8004644 <HAL_TIM_PWM_Start+0x1fc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d115      	bne.n	800461c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <HAL_TIM_PWM_Start+0x218>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b06      	cmp	r3, #6
 8004600:	d015      	beq.n	800462e <HAL_TIM_PWM_Start+0x1e6>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004608:	d011      	beq.n	800462e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0201 	orr.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461a:	e008      	b.n	800462e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	e000      	b.n	8004630 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000
 8004640:	40010400 	.word	0x40010400
 8004644:	40014000 	.word	0x40014000
 8004648:	40014400 	.word	0x40014400
 800464c:	40014800 	.word	0x40014800
 8004650:	40000400 	.word	0x40000400
 8004654:	40000800 	.word	0x40000800
 8004658:	40000c00 	.word	0x40000c00
 800465c:	40001800 	.word	0x40001800
 8004660:	00010007 	.word	0x00010007

08004664 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2200      	movs	r2, #0
 8004674:	6839      	ldr	r1, [r7, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f001 f93a 	bl	80058f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a3e      	ldr	r2, [pc, #248]	; (800477c <HAL_TIM_PWM_Stop+0x118>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_TIM_PWM_Stop+0x4a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a3d      	ldr	r2, [pc, #244]	; (8004780 <HAL_TIM_PWM_Stop+0x11c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00e      	beq.n	80046ae <HAL_TIM_PWM_Stop+0x4a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a3b      	ldr	r2, [pc, #236]	; (8004784 <HAL_TIM_PWM_Stop+0x120>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d009      	beq.n	80046ae <HAL_TIM_PWM_Stop+0x4a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a3a      	ldr	r2, [pc, #232]	; (8004788 <HAL_TIM_PWM_Stop+0x124>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d004      	beq.n	80046ae <HAL_TIM_PWM_Stop+0x4a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a38      	ldr	r2, [pc, #224]	; (800478c <HAL_TIM_PWM_Stop+0x128>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d101      	bne.n	80046b2 <HAL_TIM_PWM_Stop+0x4e>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_TIM_PWM_Stop+0x50>
 80046b2:	2300      	movs	r3, #0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d017      	beq.n	80046e8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6a1a      	ldr	r2, [r3, #32]
 80046be:	f241 1311 	movw	r3, #4369	; 0x1111
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10f      	bne.n	80046e8 <HAL_TIM_PWM_Stop+0x84>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6a1a      	ldr	r2, [r3, #32]
 80046ce:	f240 4344 	movw	r3, #1092	; 0x444
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d107      	bne.n	80046e8 <HAL_TIM_PWM_Stop+0x84>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6a1a      	ldr	r2, [r3, #32]
 80046ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10f      	bne.n	8004718 <HAL_TIM_PWM_Stop+0xb4>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6a1a      	ldr	r2, [r3, #32]
 80046fe:	f240 4344 	movw	r3, #1092	; 0x444
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d107      	bne.n	8004718 <HAL_TIM_PWM_Stop+0xb4>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0201 	bic.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d104      	bne.n	8004728 <HAL_TIM_PWM_Stop+0xc4>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004726:	e023      	b.n	8004770 <HAL_TIM_PWM_Stop+0x10c>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b04      	cmp	r3, #4
 800472c:	d104      	bne.n	8004738 <HAL_TIM_PWM_Stop+0xd4>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004736:	e01b      	b.n	8004770 <HAL_TIM_PWM_Stop+0x10c>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b08      	cmp	r3, #8
 800473c:	d104      	bne.n	8004748 <HAL_TIM_PWM_Stop+0xe4>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004746:	e013      	b.n	8004770 <HAL_TIM_PWM_Stop+0x10c>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d104      	bne.n	8004758 <HAL_TIM_PWM_Stop+0xf4>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004756:	e00b      	b.n	8004770 <HAL_TIM_PWM_Stop+0x10c>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b10      	cmp	r3, #16
 800475c:	d104      	bne.n	8004768 <HAL_TIM_PWM_Stop+0x104>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004766:	e003      	b.n	8004770 <HAL_TIM_PWM_Stop+0x10c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000
 8004780:	40010400 	.word	0x40010400
 8004784:	40014000 	.word	0x40014000
 8004788:	40014400 	.word	0x40014400
 800478c:	40014800 	.word	0x40014800

08004790 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_TIM_PWM_Start_IT+0x28>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e03c      	b.n	8004832 <HAL_TIM_PWM_Start_IT+0xa2>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d109      	bne.n	80047d2 <HAL_TIM_PWM_Start_IT+0x42>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	bf14      	ite	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	2300      	moveq	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	e02f      	b.n	8004832 <HAL_TIM_PWM_Start_IT+0xa2>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d109      	bne.n	80047ec <HAL_TIM_PWM_Start_IT+0x5c>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e022      	b.n	8004832 <HAL_TIM_PWM_Start_IT+0xa2>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b0c      	cmp	r3, #12
 80047f0:	d109      	bne.n	8004806 <HAL_TIM_PWM_Start_IT+0x76>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	bf14      	ite	ne
 80047fe:	2301      	movne	r3, #1
 8004800:	2300      	moveq	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	e015      	b.n	8004832 <HAL_TIM_PWM_Start_IT+0xa2>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b10      	cmp	r3, #16
 800480a:	d109      	bne.n	8004820 <HAL_TIM_PWM_Start_IT+0x90>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	e008      	b.n	8004832 <HAL_TIM_PWM_Start_IT+0xa2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	bf14      	ite	ne
 800482c:	2301      	movne	r3, #1
 800482e:	2300      	moveq	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e0ec      	b.n	8004a14 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Start_IT+0xba>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004848:	e023      	b.n	8004892 <HAL_TIM_PWM_Start_IT+0x102>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b04      	cmp	r3, #4
 800484e:	d104      	bne.n	800485a <HAL_TIM_PWM_Start_IT+0xca>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004858:	e01b      	b.n	8004892 <HAL_TIM_PWM_Start_IT+0x102>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d104      	bne.n	800486a <HAL_TIM_PWM_Start_IT+0xda>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004868:	e013      	b.n	8004892 <HAL_TIM_PWM_Start_IT+0x102>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b0c      	cmp	r3, #12
 800486e:	d104      	bne.n	800487a <HAL_TIM_PWM_Start_IT+0xea>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004878:	e00b      	b.n	8004892 <HAL_TIM_PWM_Start_IT+0x102>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b10      	cmp	r3, #16
 800487e:	d104      	bne.n	800488a <HAL_TIM_PWM_Start_IT+0xfa>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004888:	e003      	b.n	8004892 <HAL_TIM_PWM_Start_IT+0x102>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2202      	movs	r2, #2
 800488e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b0c      	cmp	r3, #12
 8004896:	d841      	bhi.n	800491c <HAL_TIM_PWM_Start_IT+0x18c>
 8004898:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <HAL_TIM_PWM_Start_IT+0x110>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048d5 	.word	0x080048d5
 80048a4:	0800491d 	.word	0x0800491d
 80048a8:	0800491d 	.word	0x0800491d
 80048ac:	0800491d 	.word	0x0800491d
 80048b0:	080048e7 	.word	0x080048e7
 80048b4:	0800491d 	.word	0x0800491d
 80048b8:	0800491d 	.word	0x0800491d
 80048bc:	0800491d 	.word	0x0800491d
 80048c0:	080048f9 	.word	0x080048f9
 80048c4:	0800491d 	.word	0x0800491d
 80048c8:	0800491d 	.word	0x0800491d
 80048cc:	0800491d 	.word	0x0800491d
 80048d0:	0800490b 	.word	0x0800490b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0202 	orr.w	r2, r2, #2
 80048e2:	60da      	str	r2, [r3, #12]
      break;
 80048e4:	e01d      	b.n	8004922 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0204 	orr.w	r2, r2, #4
 80048f4:	60da      	str	r2, [r3, #12]
      break;
 80048f6:	e014      	b.n	8004922 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0208 	orr.w	r2, r2, #8
 8004906:	60da      	str	r2, [r3, #12]
      break;
 8004908:	e00b      	b.n	8004922 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0210 	orr.w	r2, r2, #16
 8004918:	60da      	str	r2, [r3, #12]
      break;
 800491a:	e002      	b.n	8004922 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
      break;
 8004920:	bf00      	nop
  }

  if (status == HAL_OK)
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d174      	bne.n	8004a12 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2201      	movs	r2, #1
 800492e:	6839      	ldr	r1, [r7, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 ffdd 	bl	80058f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a38      	ldr	r2, [pc, #224]	; (8004a1c <HAL_TIM_PWM_Start_IT+0x28c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d013      	beq.n	8004968 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a36      	ldr	r2, [pc, #216]	; (8004a20 <HAL_TIM_PWM_Start_IT+0x290>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00e      	beq.n	8004968 <HAL_TIM_PWM_Start_IT+0x1d8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a35      	ldr	r2, [pc, #212]	; (8004a24 <HAL_TIM_PWM_Start_IT+0x294>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d009      	beq.n	8004968 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a33      	ldr	r2, [pc, #204]	; (8004a28 <HAL_TIM_PWM_Start_IT+0x298>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <HAL_TIM_PWM_Start_IT+0x1d8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a32      	ldr	r2, [pc, #200]	; (8004a2c <HAL_TIM_PWM_Start_IT+0x29c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d101      	bne.n	800496c <HAL_TIM_PWM_Start_IT+0x1dc>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <HAL_TIM_PWM_Start_IT+0x1de>
 800496c:	2300      	movs	r3, #0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d007      	beq.n	8004982 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004980:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a25      	ldr	r2, [pc, #148]	; (8004a1c <HAL_TIM_PWM_Start_IT+0x28c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d022      	beq.n	80049d2 <HAL_TIM_PWM_Start_IT+0x242>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004994:	d01d      	beq.n	80049d2 <HAL_TIM_PWM_Start_IT+0x242>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a25      	ldr	r2, [pc, #148]	; (8004a30 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d018      	beq.n	80049d2 <HAL_TIM_PWM_Start_IT+0x242>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a23      	ldr	r2, [pc, #140]	; (8004a34 <HAL_TIM_PWM_Start_IT+0x2a4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <HAL_TIM_PWM_Start_IT+0x242>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a22      	ldr	r2, [pc, #136]	; (8004a38 <HAL_TIM_PWM_Start_IT+0x2a8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00e      	beq.n	80049d2 <HAL_TIM_PWM_Start_IT+0x242>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <HAL_TIM_PWM_Start_IT+0x290>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d009      	beq.n	80049d2 <HAL_TIM_PWM_Start_IT+0x242>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1e      	ldr	r2, [pc, #120]	; (8004a3c <HAL_TIM_PWM_Start_IT+0x2ac>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_TIM_PWM_Start_IT+0x242>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <HAL_TIM_PWM_Start_IT+0x294>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d115      	bne.n	80049fe <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <HAL_TIM_PWM_Start_IT+0x2b0>)
 80049da:	4013      	ands	r3, r2
 80049dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b06      	cmp	r3, #6
 80049e2:	d015      	beq.n	8004a10 <HAL_TIM_PWM_Start_IT+0x280>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ea:	d011      	beq.n	8004a10 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	e008      	b.n	8004a10 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	e000      	b.n	8004a12 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40010400 	.word	0x40010400
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40014400 	.word	0x40014400
 8004a2c:	40014800 	.word	0x40014800
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	40001800 	.word	0x40001800
 8004a40:	00010007 	.word	0x00010007

08004a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d020      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01b      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0202 	mvn.w	r2, #2
 8004a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fb00 	bl	8005094 <HAL_TIM_IC_CaptureCallback>
 8004a94:	e005      	b.n	8004aa2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 faf2 	bl	8005080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7fb fd9b 	bl	80005d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d020      	beq.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01b      	beq.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0204 	mvn.w	r2, #4
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fada 	bl	8005094 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 facc 	bl	8005080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7fb fd75 	bl	80005d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d020      	beq.n	8004b40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01b      	beq.n	8004b40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0208 	mvn.w	r2, #8
 8004b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2204      	movs	r2, #4
 8004b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fab4 	bl	8005094 <HAL_TIM_IC_CaptureCallback>
 8004b2c:	e005      	b.n	8004b3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 faa6 	bl	8005080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fb fd4f 	bl	80005d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d020      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01b      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0210 	mvn.w	r2, #16
 8004b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2208      	movs	r2, #8
 8004b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fa8e 	bl	8005094 <HAL_TIM_IC_CaptureCallback>
 8004b78:	e005      	b.n	8004b86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fa80 	bl	8005080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7fb fd29 	bl	80005d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00c      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0201 	mvn.w	r2, #1
 8004ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa5e 	bl	800506c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00c      	beq.n	8004bde <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 ff47 	bl	8005a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00c      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 ff3f 	bl	8005a80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00c      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fa41 	bl	80050a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00c      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f06f 0220 	mvn.w	r2, #32
 8004c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 ff07 	bl	8005a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e0ff      	b.n	8004e72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b14      	cmp	r3, #20
 8004c7e:	f200 80f0 	bhi.w	8004e62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c82:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004cdd 	.word	0x08004cdd
 8004c8c:	08004e63 	.word	0x08004e63
 8004c90:	08004e63 	.word	0x08004e63
 8004c94:	08004e63 	.word	0x08004e63
 8004c98:	08004d1d 	.word	0x08004d1d
 8004c9c:	08004e63 	.word	0x08004e63
 8004ca0:	08004e63 	.word	0x08004e63
 8004ca4:	08004e63 	.word	0x08004e63
 8004ca8:	08004d5f 	.word	0x08004d5f
 8004cac:	08004e63 	.word	0x08004e63
 8004cb0:	08004e63 	.word	0x08004e63
 8004cb4:	08004e63 	.word	0x08004e63
 8004cb8:	08004d9f 	.word	0x08004d9f
 8004cbc:	08004e63 	.word	0x08004e63
 8004cc0:	08004e63 	.word	0x08004e63
 8004cc4:	08004e63 	.word	0x08004e63
 8004cc8:	08004de1 	.word	0x08004de1
 8004ccc:	08004e63 	.word	0x08004e63
 8004cd0:	08004e63 	.word	0x08004e63
 8004cd4:	08004e63 	.word	0x08004e63
 8004cd8:	08004e21 	.word	0x08004e21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fa90 	bl	8005208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0208 	orr.w	r2, r2, #8
 8004cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0204 	bic.w	r2, r2, #4
 8004d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6999      	ldr	r1, [r3, #24]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	619a      	str	r2, [r3, #24]
      break;
 8004d1a:	e0a5      	b.n	8004e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68b9      	ldr	r1, [r7, #8]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fb00 	bl	8005328 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699a      	ldr	r2, [r3, #24]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6999      	ldr	r1, [r3, #24]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	021a      	lsls	r2, r3, #8
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	619a      	str	r2, [r3, #24]
      break;
 8004d5c:	e084      	b.n	8004e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fb69 	bl	800543c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69da      	ldr	r2, [r3, #28]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0208 	orr.w	r2, r2, #8
 8004d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0204 	bic.w	r2, r2, #4
 8004d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69d9      	ldr	r1, [r3, #28]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	61da      	str	r2, [r3, #28]
      break;
 8004d9c:	e064      	b.n	8004e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fbd1 	bl	800554c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69da      	ldr	r2, [r3, #28]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69d9      	ldr	r1, [r3, #28]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	021a      	lsls	r2, r3, #8
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	61da      	str	r2, [r3, #28]
      break;
 8004dde:	e043      	b.n	8004e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fc1a 	bl	8005620 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0208 	orr.w	r2, r2, #8
 8004dfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0204 	bic.w	r2, r2, #4
 8004e0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e1e:	e023      	b.n	8004e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fc5e 	bl	80056e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	021a      	lsls	r2, r3, #8
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e60:	e002      	b.n	8004e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	75fb      	strb	r3, [r7, #23]
      break;
 8004e66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop

08004e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_TIM_ConfigClockSource+0x1c>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e0dc      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x1d6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	4b6a      	ldr	r3, [pc, #424]	; (800505c <HAL_TIM_ConfigClockSource+0x1e0>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ebe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a64      	ldr	r2, [pc, #400]	; (8005060 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	f000 80a9 	beq.w	8005026 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ed4:	4a62      	ldr	r2, [pc, #392]	; (8005060 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	f200 80ae 	bhi.w	8005038 <HAL_TIM_ConfigClockSource+0x1bc>
 8004edc:	4a61      	ldr	r2, [pc, #388]	; (8005064 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	f000 80a1 	beq.w	8005026 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ee4:	4a5f      	ldr	r2, [pc, #380]	; (8005064 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	f200 80a6 	bhi.w	8005038 <HAL_TIM_ConfigClockSource+0x1bc>
 8004eec:	4a5e      	ldr	r2, [pc, #376]	; (8005068 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	f000 8099 	beq.w	8005026 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ef4:	4a5c      	ldr	r2, [pc, #368]	; (8005068 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	f200 809e 	bhi.w	8005038 <HAL_TIM_ConfigClockSource+0x1bc>
 8004efc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f00:	f000 8091 	beq.w	8005026 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f08:	f200 8096 	bhi.w	8005038 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f10:	f000 8089 	beq.w	8005026 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f18:	f200 808e 	bhi.w	8005038 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f20:	d03e      	beq.n	8004fa0 <HAL_TIM_ConfigClockSource+0x124>
 8004f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f26:	f200 8087 	bhi.w	8005038 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2e:	f000 8086 	beq.w	800503e <HAL_TIM_ConfigClockSource+0x1c2>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	d87f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f38:	2b70      	cmp	r3, #112	; 0x70
 8004f3a:	d01a      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0xf6>
 8004f3c:	2b70      	cmp	r3, #112	; 0x70
 8004f3e:	d87b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f40:	2b60      	cmp	r3, #96	; 0x60
 8004f42:	d050      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x16a>
 8004f44:	2b60      	cmp	r3, #96	; 0x60
 8004f46:	d877      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f48:	2b50      	cmp	r3, #80	; 0x50
 8004f4a:	d03c      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x14a>
 8004f4c:	2b50      	cmp	r3, #80	; 0x50
 8004f4e:	d873      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f50:	2b40      	cmp	r3, #64	; 0x40
 8004f52:	d058      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x18a>
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d86f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f58:	2b30      	cmp	r3, #48	; 0x30
 8004f5a:	d064      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f5c:	2b30      	cmp	r3, #48	; 0x30
 8004f5e:	d86b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d060      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d867      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d05c      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d05a      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f70:	e062      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f82:	f000 fc95 	bl	80058b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	609a      	str	r2, [r3, #8]
      break;
 8004f9e:	e04f      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fb0:	f000 fc7e 	bl	80058b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fc2:	609a      	str	r2, [r3, #8]
      break;
 8004fc4:	e03c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f000 fbee 	bl	80057b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2150      	movs	r1, #80	; 0x50
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fc48 	bl	8005874 <TIM_ITRx_SetConfig>
      break;
 8004fe4:	e02c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f000 fc0d 	bl	8005812 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2160      	movs	r1, #96	; 0x60
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fc38 	bl	8005874 <TIM_ITRx_SetConfig>
      break;
 8005004:	e01c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005012:	461a      	mov	r2, r3
 8005014:	f000 fbce 	bl	80057b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2140      	movs	r1, #64	; 0x40
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fc28 	bl	8005874 <TIM_ITRx_SetConfig>
      break;
 8005024:	e00c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f000 fc1f 	bl	8005874 <TIM_ITRx_SetConfig>
      break;
 8005036:	e003      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      break;
 800503c:	e000      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800503e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	ffceff88 	.word	0xffceff88
 8005060:	00100040 	.word	0x00100040
 8005064:	00100030 	.word	0x00100030
 8005068:	00100020 	.word	0x00100020

0800506c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a46      	ldr	r2, [pc, #280]	; (80051e8 <TIM_Base_SetConfig+0x12c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050da:	d00f      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a43      	ldr	r2, [pc, #268]	; (80051ec <TIM_Base_SetConfig+0x130>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a42      	ldr	r2, [pc, #264]	; (80051f0 <TIM_Base_SetConfig+0x134>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d007      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a41      	ldr	r2, [pc, #260]	; (80051f4 <TIM_Base_SetConfig+0x138>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a40      	ldr	r2, [pc, #256]	; (80051f8 <TIM_Base_SetConfig+0x13c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d108      	bne.n	800510e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a35      	ldr	r2, [pc, #212]	; (80051e8 <TIM_Base_SetConfig+0x12c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01f      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511c:	d01b      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a32      	ldr	r2, [pc, #200]	; (80051ec <TIM_Base_SetConfig+0x130>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d017      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a31      	ldr	r2, [pc, #196]	; (80051f0 <TIM_Base_SetConfig+0x134>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a30      	ldr	r2, [pc, #192]	; (80051f4 <TIM_Base_SetConfig+0x138>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00f      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2f      	ldr	r2, [pc, #188]	; (80051f8 <TIM_Base_SetConfig+0x13c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00b      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2e      	ldr	r2, [pc, #184]	; (80051fc <TIM_Base_SetConfig+0x140>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d007      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2d      	ldr	r2, [pc, #180]	; (8005200 <TIM_Base_SetConfig+0x144>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2c      	ldr	r2, [pc, #176]	; (8005204 <TIM_Base_SetConfig+0x148>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d108      	bne.n	8005168 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <TIM_Base_SetConfig+0x12c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00f      	beq.n	80051b4 <TIM_Base_SetConfig+0xf8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <TIM_Base_SetConfig+0x13c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00b      	beq.n	80051b4 <TIM_Base_SetConfig+0xf8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a17      	ldr	r2, [pc, #92]	; (80051fc <TIM_Base_SetConfig+0x140>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d007      	beq.n	80051b4 <TIM_Base_SetConfig+0xf8>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a16      	ldr	r2, [pc, #88]	; (8005200 <TIM_Base_SetConfig+0x144>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_Base_SetConfig+0xf8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a15      	ldr	r2, [pc, #84]	; (8005204 <TIM_Base_SetConfig+0x148>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d103      	bne.n	80051bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d105      	bne.n	80051da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f023 0201 	bic.w	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	611a      	str	r2, [r3, #16]
  }
}
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40010400 	.word	0x40010400
 80051fc:	40014000 	.word	0x40014000
 8005200:	40014400 	.word	0x40014400
 8005204:	40014800 	.word	0x40014800

08005208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f023 0201 	bic.w	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4b37      	ldr	r3, [pc, #220]	; (8005310 <TIM_OC1_SetConfig+0x108>)
 8005234:	4013      	ands	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0303 	bic.w	r3, r3, #3
 800523e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 0302 	bic.w	r3, r3, #2
 8005250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a2d      	ldr	r2, [pc, #180]	; (8005314 <TIM_OC1_SetConfig+0x10c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00f      	beq.n	8005284 <TIM_OC1_SetConfig+0x7c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a2c      	ldr	r2, [pc, #176]	; (8005318 <TIM_OC1_SetConfig+0x110>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00b      	beq.n	8005284 <TIM_OC1_SetConfig+0x7c>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a2b      	ldr	r2, [pc, #172]	; (800531c <TIM_OC1_SetConfig+0x114>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d007      	beq.n	8005284 <TIM_OC1_SetConfig+0x7c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a2a      	ldr	r2, [pc, #168]	; (8005320 <TIM_OC1_SetConfig+0x118>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d003      	beq.n	8005284 <TIM_OC1_SetConfig+0x7c>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a29      	ldr	r2, [pc, #164]	; (8005324 <TIM_OC1_SetConfig+0x11c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d10c      	bne.n	800529e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f023 0308 	bic.w	r3, r3, #8
 800528a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f023 0304 	bic.w	r3, r3, #4
 800529c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1c      	ldr	r2, [pc, #112]	; (8005314 <TIM_OC1_SetConfig+0x10c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00f      	beq.n	80052c6 <TIM_OC1_SetConfig+0xbe>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1b      	ldr	r2, [pc, #108]	; (8005318 <TIM_OC1_SetConfig+0x110>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00b      	beq.n	80052c6 <TIM_OC1_SetConfig+0xbe>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a1a      	ldr	r2, [pc, #104]	; (800531c <TIM_OC1_SetConfig+0x114>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d007      	beq.n	80052c6 <TIM_OC1_SetConfig+0xbe>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a19      	ldr	r2, [pc, #100]	; (8005320 <TIM_OC1_SetConfig+0x118>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d003      	beq.n	80052c6 <TIM_OC1_SetConfig+0xbe>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a18      	ldr	r2, [pc, #96]	; (8005324 <TIM_OC1_SetConfig+0x11c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d111      	bne.n	80052ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	621a      	str	r2, [r3, #32]
}
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	fffeff8f 	.word	0xfffeff8f
 8005314:	40010000 	.word	0x40010000
 8005318:	40010400 	.word	0x40010400
 800531c:	40014000 	.word	0x40014000
 8005320:	40014400 	.word	0x40014400
 8005324:	40014800 	.word	0x40014800

08005328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f023 0210 	bic.w	r2, r3, #16
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4b34      	ldr	r3, [pc, #208]	; (8005424 <TIM_OC2_SetConfig+0xfc>)
 8005354:	4013      	ands	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800535e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f023 0320 	bic.w	r3, r3, #32
 8005372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a29      	ldr	r2, [pc, #164]	; (8005428 <TIM_OC2_SetConfig+0x100>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d003      	beq.n	8005390 <TIM_OC2_SetConfig+0x68>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a28      	ldr	r2, [pc, #160]	; (800542c <TIM_OC2_SetConfig+0x104>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d10d      	bne.n	80053ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a1e      	ldr	r2, [pc, #120]	; (8005428 <TIM_OC2_SetConfig+0x100>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00f      	beq.n	80053d4 <TIM_OC2_SetConfig+0xac>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a1d      	ldr	r2, [pc, #116]	; (800542c <TIM_OC2_SetConfig+0x104>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00b      	beq.n	80053d4 <TIM_OC2_SetConfig+0xac>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a1c      	ldr	r2, [pc, #112]	; (8005430 <TIM_OC2_SetConfig+0x108>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d007      	beq.n	80053d4 <TIM_OC2_SetConfig+0xac>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a1b      	ldr	r2, [pc, #108]	; (8005434 <TIM_OC2_SetConfig+0x10c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d003      	beq.n	80053d4 <TIM_OC2_SetConfig+0xac>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a1a      	ldr	r2, [pc, #104]	; (8005438 <TIM_OC2_SetConfig+0x110>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d113      	bne.n	80053fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	621a      	str	r2, [r3, #32]
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	feff8fff 	.word	0xfeff8fff
 8005428:	40010000 	.word	0x40010000
 800542c:	40010400 	.word	0x40010400
 8005430:	40014000 	.word	0x40014000
 8005434:	40014400 	.word	0x40014400
 8005438:	40014800 	.word	0x40014800

0800543c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4b33      	ldr	r3, [pc, #204]	; (8005534 <TIM_OC3_SetConfig+0xf8>)
 8005468:	4013      	ands	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0303 	bic.w	r3, r3, #3
 8005472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	021b      	lsls	r3, r3, #8
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a28      	ldr	r2, [pc, #160]	; (8005538 <TIM_OC3_SetConfig+0xfc>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d003      	beq.n	80054a2 <TIM_OC3_SetConfig+0x66>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a27      	ldr	r2, [pc, #156]	; (800553c <TIM_OC3_SetConfig+0x100>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d10d      	bne.n	80054be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a1d      	ldr	r2, [pc, #116]	; (8005538 <TIM_OC3_SetConfig+0xfc>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00f      	beq.n	80054e6 <TIM_OC3_SetConfig+0xaa>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a1c      	ldr	r2, [pc, #112]	; (800553c <TIM_OC3_SetConfig+0x100>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00b      	beq.n	80054e6 <TIM_OC3_SetConfig+0xaa>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a1b      	ldr	r2, [pc, #108]	; (8005540 <TIM_OC3_SetConfig+0x104>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d007      	beq.n	80054e6 <TIM_OC3_SetConfig+0xaa>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a1a      	ldr	r2, [pc, #104]	; (8005544 <TIM_OC3_SetConfig+0x108>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <TIM_OC3_SetConfig+0xaa>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a19      	ldr	r2, [pc, #100]	; (8005548 <TIM_OC3_SetConfig+0x10c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d113      	bne.n	800550e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	621a      	str	r2, [r3, #32]
}
 8005528:	bf00      	nop
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	fffeff8f 	.word	0xfffeff8f
 8005538:	40010000 	.word	0x40010000
 800553c:	40010400 	.word	0x40010400
 8005540:	40014000 	.word	0x40014000
 8005544:	40014400 	.word	0x40014400
 8005548:	40014800 	.word	0x40014800

0800554c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4b24      	ldr	r3, [pc, #144]	; (8005608 <TIM_OC4_SetConfig+0xbc>)
 8005578:	4013      	ands	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	021b      	lsls	r3, r3, #8
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	031b      	lsls	r3, r3, #12
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a19      	ldr	r2, [pc, #100]	; (800560c <TIM_OC4_SetConfig+0xc0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00f      	beq.n	80055cc <TIM_OC4_SetConfig+0x80>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a18      	ldr	r2, [pc, #96]	; (8005610 <TIM_OC4_SetConfig+0xc4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00b      	beq.n	80055cc <TIM_OC4_SetConfig+0x80>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a17      	ldr	r2, [pc, #92]	; (8005614 <TIM_OC4_SetConfig+0xc8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d007      	beq.n	80055cc <TIM_OC4_SetConfig+0x80>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a16      	ldr	r2, [pc, #88]	; (8005618 <TIM_OC4_SetConfig+0xcc>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d003      	beq.n	80055cc <TIM_OC4_SetConfig+0x80>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a15      	ldr	r2, [pc, #84]	; (800561c <TIM_OC4_SetConfig+0xd0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d109      	bne.n	80055e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	019b      	lsls	r3, r3, #6
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	621a      	str	r2, [r3, #32]
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	feff8fff 	.word	0xfeff8fff
 800560c:	40010000 	.word	0x40010000
 8005610:	40010400 	.word	0x40010400
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400
 800561c:	40014800 	.word	0x40014800

08005620 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4b21      	ldr	r3, [pc, #132]	; (80056d0 <TIM_OC5_SetConfig+0xb0>)
 800564c:	4013      	ands	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005660:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	041b      	lsls	r3, r3, #16
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <TIM_OC5_SetConfig+0xb4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00f      	beq.n	8005696 <TIM_OC5_SetConfig+0x76>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <TIM_OC5_SetConfig+0xb8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00b      	beq.n	8005696 <TIM_OC5_SetConfig+0x76>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a16      	ldr	r2, [pc, #88]	; (80056dc <TIM_OC5_SetConfig+0xbc>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d007      	beq.n	8005696 <TIM_OC5_SetConfig+0x76>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a15      	ldr	r2, [pc, #84]	; (80056e0 <TIM_OC5_SetConfig+0xc0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d003      	beq.n	8005696 <TIM_OC5_SetConfig+0x76>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a14      	ldr	r2, [pc, #80]	; (80056e4 <TIM_OC5_SetConfig+0xc4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d109      	bne.n	80056aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800569c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	621a      	str	r2, [r3, #32]
}
 80056c4:	bf00      	nop
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	fffeff8f 	.word	0xfffeff8f
 80056d4:	40010000 	.word	0x40010000
 80056d8:	40010400 	.word	0x40010400
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40014400 	.word	0x40014400
 80056e4:	40014800 	.word	0x40014800

080056e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4b22      	ldr	r3, [pc, #136]	; (800579c <TIM_OC6_SetConfig+0xb4>)
 8005714:	4013      	ands	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800572a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	051b      	lsls	r3, r3, #20
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a19      	ldr	r2, [pc, #100]	; (80057a0 <TIM_OC6_SetConfig+0xb8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00f      	beq.n	8005760 <TIM_OC6_SetConfig+0x78>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <TIM_OC6_SetConfig+0xbc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00b      	beq.n	8005760 <TIM_OC6_SetConfig+0x78>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <TIM_OC6_SetConfig+0xc0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d007      	beq.n	8005760 <TIM_OC6_SetConfig+0x78>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a16      	ldr	r2, [pc, #88]	; (80057ac <TIM_OC6_SetConfig+0xc4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d003      	beq.n	8005760 <TIM_OC6_SetConfig+0x78>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a15      	ldr	r2, [pc, #84]	; (80057b0 <TIM_OC6_SetConfig+0xc8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d109      	bne.n	8005774 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005766:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	029b      	lsls	r3, r3, #10
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	621a      	str	r2, [r3, #32]
}
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	feff8fff 	.word	0xfeff8fff
 80057a0:	40010000 	.word	0x40010000
 80057a4:	40010400 	.word	0x40010400
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40014400 	.word	0x40014400
 80057b0:	40014800 	.word	0x40014800

080057b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f023 030a 	bic.w	r3, r3, #10
 80057f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005812:	b480      	push	{r7}
 8005814:	b087      	sub	sp, #28
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	f023 0210 	bic.w	r2, r3, #16
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800583c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	031b      	lsls	r3, r3, #12
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800584e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
	...

08005874 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4b09      	ldr	r3, [pc, #36]	; (80058ac <TIM_ITRx_SetConfig+0x38>)
 8005888:	4013      	ands	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4313      	orrs	r3, r2
 8005892:	f043 0307 	orr.w	r3, r3, #7
 8005896:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	609a      	str	r2, [r3, #8]
}
 800589e:	bf00      	nop
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	ffcfff8f 	.word	0xffcfff8f

080058b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	021a      	lsls	r2, r3, #8
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	609a      	str	r2, [r3, #8]
}
 80058e4:	bf00      	nop
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	2201      	movs	r2, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a1a      	ldr	r2, [r3, #32]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	43db      	mvns	r3, r3
 8005912:	401a      	ands	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	fa01 f303 	lsl.w	r3, r1, r3
 8005928:	431a      	orrs	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005950:	2302      	movs	r3, #2
 8005952:	e06d      	b.n	8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a30      	ldr	r2, [pc, #192]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d004      	beq.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d108      	bne.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800598e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a20      	ldr	r2, [pc, #128]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d022      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c6:	d01d      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d018      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a1c      	ldr	r2, [pc, #112]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d013      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1a      	ldr	r2, [pc, #104]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00e      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a15      	ldr	r2, [pc, #84]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d009      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d004      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a15      	ldr	r2, [pc, #84]	; (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d10c      	bne.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	40010000 	.word	0x40010000
 8005a40:	40010400 	.word	0x40010400
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40000c00 	.word	0x40000c00
 8005a50:	40001800 	.word	0x40001800
 8005a54:	40014000 	.word	0x40014000

08005a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e042      	b.n	8005b2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d106      	bne.n	8005abe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7fb f8bd 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2224      	movs	r2, #36	; 0x24
 8005ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0201 	bic.w	r2, r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fd90 	bl	8006604 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f825 	bl	8005b34 <UART_SetConfig>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e01b      	b.n	8005b2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fe0f 	bl	8006748 <UART_CheckIdleState>
 8005b2a:	4603      	mov	r3, r0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b38:	b092      	sub	sp, #72	; 0x48
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4bbe      	ldr	r3, [pc, #760]	; (8005e5c <UART_SetConfig+0x328>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	6812      	ldr	r2, [r2, #0]
 8005b6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4ab3      	ldr	r2, [pc, #716]	; (8005e60 <UART_SetConfig+0x32c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d004      	beq.n	8005ba0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	4baf      	ldr	r3, [pc, #700]	; (8005e64 <UART_SetConfig+0x330>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	6812      	ldr	r2, [r2, #0]
 8005bae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	f023 010f 	bic.w	r1, r3, #15
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4aa6      	ldr	r2, [pc, #664]	; (8005e68 <UART_SetConfig+0x334>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d177      	bne.n	8005cc4 <UART_SetConfig+0x190>
 8005bd4:	4ba5      	ldr	r3, [pc, #660]	; (8005e6c <UART_SetConfig+0x338>)
 8005bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bdc:	2b28      	cmp	r3, #40	; 0x28
 8005bde:	d86d      	bhi.n	8005cbc <UART_SetConfig+0x188>
 8005be0:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <UART_SetConfig+0xb4>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005c8d 	.word	0x08005c8d
 8005bec:	08005cbd 	.word	0x08005cbd
 8005bf0:	08005cbd 	.word	0x08005cbd
 8005bf4:	08005cbd 	.word	0x08005cbd
 8005bf8:	08005cbd 	.word	0x08005cbd
 8005bfc:	08005cbd 	.word	0x08005cbd
 8005c00:	08005cbd 	.word	0x08005cbd
 8005c04:	08005cbd 	.word	0x08005cbd
 8005c08:	08005c95 	.word	0x08005c95
 8005c0c:	08005cbd 	.word	0x08005cbd
 8005c10:	08005cbd 	.word	0x08005cbd
 8005c14:	08005cbd 	.word	0x08005cbd
 8005c18:	08005cbd 	.word	0x08005cbd
 8005c1c:	08005cbd 	.word	0x08005cbd
 8005c20:	08005cbd 	.word	0x08005cbd
 8005c24:	08005cbd 	.word	0x08005cbd
 8005c28:	08005c9d 	.word	0x08005c9d
 8005c2c:	08005cbd 	.word	0x08005cbd
 8005c30:	08005cbd 	.word	0x08005cbd
 8005c34:	08005cbd 	.word	0x08005cbd
 8005c38:	08005cbd 	.word	0x08005cbd
 8005c3c:	08005cbd 	.word	0x08005cbd
 8005c40:	08005cbd 	.word	0x08005cbd
 8005c44:	08005cbd 	.word	0x08005cbd
 8005c48:	08005ca5 	.word	0x08005ca5
 8005c4c:	08005cbd 	.word	0x08005cbd
 8005c50:	08005cbd 	.word	0x08005cbd
 8005c54:	08005cbd 	.word	0x08005cbd
 8005c58:	08005cbd 	.word	0x08005cbd
 8005c5c:	08005cbd 	.word	0x08005cbd
 8005c60:	08005cbd 	.word	0x08005cbd
 8005c64:	08005cbd 	.word	0x08005cbd
 8005c68:	08005cad 	.word	0x08005cad
 8005c6c:	08005cbd 	.word	0x08005cbd
 8005c70:	08005cbd 	.word	0x08005cbd
 8005c74:	08005cbd 	.word	0x08005cbd
 8005c78:	08005cbd 	.word	0x08005cbd
 8005c7c:	08005cbd 	.word	0x08005cbd
 8005c80:	08005cbd 	.word	0x08005cbd
 8005c84:	08005cbd 	.word	0x08005cbd
 8005c88:	08005cb5 	.word	0x08005cb5
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c92:	e222      	b.n	80060da <UART_SetConfig+0x5a6>
 8005c94:	2304      	movs	r3, #4
 8005c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c9a:	e21e      	b.n	80060da <UART_SetConfig+0x5a6>
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ca2:	e21a      	b.n	80060da <UART_SetConfig+0x5a6>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005caa:	e216      	b.n	80060da <UART_SetConfig+0x5a6>
 8005cac:	2320      	movs	r3, #32
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cb2:	e212      	b.n	80060da <UART_SetConfig+0x5a6>
 8005cb4:	2340      	movs	r3, #64	; 0x40
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cba:	e20e      	b.n	80060da <UART_SetConfig+0x5a6>
 8005cbc:	2380      	movs	r3, #128	; 0x80
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc2:	e20a      	b.n	80060da <UART_SetConfig+0x5a6>
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a69      	ldr	r2, [pc, #420]	; (8005e70 <UART_SetConfig+0x33c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d130      	bne.n	8005d30 <UART_SetConfig+0x1fc>
 8005cce:	4b67      	ldr	r3, [pc, #412]	; (8005e6c <UART_SetConfig+0x338>)
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	d826      	bhi.n	8005d28 <UART_SetConfig+0x1f4>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <UART_SetConfig+0x1ac>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005cf9 	.word	0x08005cf9
 8005ce4:	08005d01 	.word	0x08005d01
 8005ce8:	08005d09 	.word	0x08005d09
 8005cec:	08005d11 	.word	0x08005d11
 8005cf0:	08005d19 	.word	0x08005d19
 8005cf4:	08005d21 	.word	0x08005d21
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cfe:	e1ec      	b.n	80060da <UART_SetConfig+0x5a6>
 8005d00:	2304      	movs	r3, #4
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d06:	e1e8      	b.n	80060da <UART_SetConfig+0x5a6>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0e:	e1e4      	b.n	80060da <UART_SetConfig+0x5a6>
 8005d10:	2310      	movs	r3, #16
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d16:	e1e0      	b.n	80060da <UART_SetConfig+0x5a6>
 8005d18:	2320      	movs	r3, #32
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1e:	e1dc      	b.n	80060da <UART_SetConfig+0x5a6>
 8005d20:	2340      	movs	r3, #64	; 0x40
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d26:	e1d8      	b.n	80060da <UART_SetConfig+0x5a6>
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e1d4      	b.n	80060da <UART_SetConfig+0x5a6>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a4f      	ldr	r2, [pc, #316]	; (8005e74 <UART_SetConfig+0x340>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d130      	bne.n	8005d9c <UART_SetConfig+0x268>
 8005d3a:	4b4c      	ldr	r3, [pc, #304]	; (8005e6c <UART_SetConfig+0x338>)
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	2b05      	cmp	r3, #5
 8005d44:	d826      	bhi.n	8005d94 <UART_SetConfig+0x260>
 8005d46:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <UART_SetConfig+0x218>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005d65 	.word	0x08005d65
 8005d50:	08005d6d 	.word	0x08005d6d
 8005d54:	08005d75 	.word	0x08005d75
 8005d58:	08005d7d 	.word	0x08005d7d
 8005d5c:	08005d85 	.word	0x08005d85
 8005d60:	08005d8d 	.word	0x08005d8d
 8005d64:	2300      	movs	r3, #0
 8005d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6a:	e1b6      	b.n	80060da <UART_SetConfig+0x5a6>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d72:	e1b2      	b.n	80060da <UART_SetConfig+0x5a6>
 8005d74:	2308      	movs	r3, #8
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7a:	e1ae      	b.n	80060da <UART_SetConfig+0x5a6>
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d82:	e1aa      	b.n	80060da <UART_SetConfig+0x5a6>
 8005d84:	2320      	movs	r3, #32
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d8a:	e1a6      	b.n	80060da <UART_SetConfig+0x5a6>
 8005d8c:	2340      	movs	r3, #64	; 0x40
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d92:	e1a2      	b.n	80060da <UART_SetConfig+0x5a6>
 8005d94:	2380      	movs	r3, #128	; 0x80
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9a:	e19e      	b.n	80060da <UART_SetConfig+0x5a6>
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a35      	ldr	r2, [pc, #212]	; (8005e78 <UART_SetConfig+0x344>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d130      	bne.n	8005e08 <UART_SetConfig+0x2d4>
 8005da6:	4b31      	ldr	r3, [pc, #196]	; (8005e6c <UART_SetConfig+0x338>)
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	2b05      	cmp	r3, #5
 8005db0:	d826      	bhi.n	8005e00 <UART_SetConfig+0x2cc>
 8005db2:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <UART_SetConfig+0x284>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005dd1 	.word	0x08005dd1
 8005dbc:	08005dd9 	.word	0x08005dd9
 8005dc0:	08005de1 	.word	0x08005de1
 8005dc4:	08005de9 	.word	0x08005de9
 8005dc8:	08005df1 	.word	0x08005df1
 8005dcc:	08005df9 	.word	0x08005df9
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd6:	e180      	b.n	80060da <UART_SetConfig+0x5a6>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dde:	e17c      	b.n	80060da <UART_SetConfig+0x5a6>
 8005de0:	2308      	movs	r3, #8
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de6:	e178      	b.n	80060da <UART_SetConfig+0x5a6>
 8005de8:	2310      	movs	r3, #16
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dee:	e174      	b.n	80060da <UART_SetConfig+0x5a6>
 8005df0:	2320      	movs	r3, #32
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df6:	e170      	b.n	80060da <UART_SetConfig+0x5a6>
 8005df8:	2340      	movs	r3, #64	; 0x40
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfe:	e16c      	b.n	80060da <UART_SetConfig+0x5a6>
 8005e00:	2380      	movs	r3, #128	; 0x80
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e06:	e168      	b.n	80060da <UART_SetConfig+0x5a6>
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1b      	ldr	r2, [pc, #108]	; (8005e7c <UART_SetConfig+0x348>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d142      	bne.n	8005e98 <UART_SetConfig+0x364>
 8005e12:	4b16      	ldr	r3, [pc, #88]	; (8005e6c <UART_SetConfig+0x338>)
 8005e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	2b05      	cmp	r3, #5
 8005e1c:	d838      	bhi.n	8005e90 <UART_SetConfig+0x35c>
 8005e1e:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <UART_SetConfig+0x2f0>)
 8005e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e24:	08005e3d 	.word	0x08005e3d
 8005e28:	08005e45 	.word	0x08005e45
 8005e2c:	08005e4d 	.word	0x08005e4d
 8005e30:	08005e55 	.word	0x08005e55
 8005e34:	08005e81 	.word	0x08005e81
 8005e38:	08005e89 	.word	0x08005e89
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e42:	e14a      	b.n	80060da <UART_SetConfig+0x5a6>
 8005e44:	2304      	movs	r3, #4
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4a:	e146      	b.n	80060da <UART_SetConfig+0x5a6>
 8005e4c:	2308      	movs	r3, #8
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e52:	e142      	b.n	80060da <UART_SetConfig+0x5a6>
 8005e54:	2310      	movs	r3, #16
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5a:	e13e      	b.n	80060da <UART_SetConfig+0x5a6>
 8005e5c:	cfff69f3 	.word	0xcfff69f3
 8005e60:	58000c00 	.word	0x58000c00
 8005e64:	11fff4ff 	.word	0x11fff4ff
 8005e68:	40011000 	.word	0x40011000
 8005e6c:	58024400 	.word	0x58024400
 8005e70:	40004400 	.word	0x40004400
 8005e74:	40004800 	.word	0x40004800
 8005e78:	40004c00 	.word	0x40004c00
 8005e7c:	40005000 	.word	0x40005000
 8005e80:	2320      	movs	r3, #32
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e86:	e128      	b.n	80060da <UART_SetConfig+0x5a6>
 8005e88:	2340      	movs	r3, #64	; 0x40
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e8e:	e124      	b.n	80060da <UART_SetConfig+0x5a6>
 8005e90:	2380      	movs	r3, #128	; 0x80
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e96:	e120      	b.n	80060da <UART_SetConfig+0x5a6>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4acb      	ldr	r2, [pc, #812]	; (80061cc <UART_SetConfig+0x698>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d176      	bne.n	8005f90 <UART_SetConfig+0x45c>
 8005ea2:	4bcb      	ldr	r3, [pc, #812]	; (80061d0 <UART_SetConfig+0x69c>)
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eaa:	2b28      	cmp	r3, #40	; 0x28
 8005eac:	d86c      	bhi.n	8005f88 <UART_SetConfig+0x454>
 8005eae:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <UART_SetConfig+0x380>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005f59 	.word	0x08005f59
 8005eb8:	08005f89 	.word	0x08005f89
 8005ebc:	08005f89 	.word	0x08005f89
 8005ec0:	08005f89 	.word	0x08005f89
 8005ec4:	08005f89 	.word	0x08005f89
 8005ec8:	08005f89 	.word	0x08005f89
 8005ecc:	08005f89 	.word	0x08005f89
 8005ed0:	08005f89 	.word	0x08005f89
 8005ed4:	08005f61 	.word	0x08005f61
 8005ed8:	08005f89 	.word	0x08005f89
 8005edc:	08005f89 	.word	0x08005f89
 8005ee0:	08005f89 	.word	0x08005f89
 8005ee4:	08005f89 	.word	0x08005f89
 8005ee8:	08005f89 	.word	0x08005f89
 8005eec:	08005f89 	.word	0x08005f89
 8005ef0:	08005f89 	.word	0x08005f89
 8005ef4:	08005f69 	.word	0x08005f69
 8005ef8:	08005f89 	.word	0x08005f89
 8005efc:	08005f89 	.word	0x08005f89
 8005f00:	08005f89 	.word	0x08005f89
 8005f04:	08005f89 	.word	0x08005f89
 8005f08:	08005f89 	.word	0x08005f89
 8005f0c:	08005f89 	.word	0x08005f89
 8005f10:	08005f89 	.word	0x08005f89
 8005f14:	08005f71 	.word	0x08005f71
 8005f18:	08005f89 	.word	0x08005f89
 8005f1c:	08005f89 	.word	0x08005f89
 8005f20:	08005f89 	.word	0x08005f89
 8005f24:	08005f89 	.word	0x08005f89
 8005f28:	08005f89 	.word	0x08005f89
 8005f2c:	08005f89 	.word	0x08005f89
 8005f30:	08005f89 	.word	0x08005f89
 8005f34:	08005f79 	.word	0x08005f79
 8005f38:	08005f89 	.word	0x08005f89
 8005f3c:	08005f89 	.word	0x08005f89
 8005f40:	08005f89 	.word	0x08005f89
 8005f44:	08005f89 	.word	0x08005f89
 8005f48:	08005f89 	.word	0x08005f89
 8005f4c:	08005f89 	.word	0x08005f89
 8005f50:	08005f89 	.word	0x08005f89
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	2301      	movs	r3, #1
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5e:	e0bc      	b.n	80060da <UART_SetConfig+0x5a6>
 8005f60:	2304      	movs	r3, #4
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f66:	e0b8      	b.n	80060da <UART_SetConfig+0x5a6>
 8005f68:	2308      	movs	r3, #8
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f6e:	e0b4      	b.n	80060da <UART_SetConfig+0x5a6>
 8005f70:	2310      	movs	r3, #16
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f76:	e0b0      	b.n	80060da <UART_SetConfig+0x5a6>
 8005f78:	2320      	movs	r3, #32
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7e:	e0ac      	b.n	80060da <UART_SetConfig+0x5a6>
 8005f80:	2340      	movs	r3, #64	; 0x40
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f86:	e0a8      	b.n	80060da <UART_SetConfig+0x5a6>
 8005f88:	2380      	movs	r3, #128	; 0x80
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8e:	e0a4      	b.n	80060da <UART_SetConfig+0x5a6>
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a8f      	ldr	r2, [pc, #572]	; (80061d4 <UART_SetConfig+0x6a0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d130      	bne.n	8005ffc <UART_SetConfig+0x4c8>
 8005f9a:	4b8d      	ldr	r3, [pc, #564]	; (80061d0 <UART_SetConfig+0x69c>)
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	2b05      	cmp	r3, #5
 8005fa4:	d826      	bhi.n	8005ff4 <UART_SetConfig+0x4c0>
 8005fa6:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <UART_SetConfig+0x478>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	08005fc5 	.word	0x08005fc5
 8005fb0:	08005fcd 	.word	0x08005fcd
 8005fb4:	08005fd5 	.word	0x08005fd5
 8005fb8:	08005fdd 	.word	0x08005fdd
 8005fbc:	08005fe5 	.word	0x08005fe5
 8005fc0:	08005fed 	.word	0x08005fed
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fca:	e086      	b.n	80060da <UART_SetConfig+0x5a6>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fd2:	e082      	b.n	80060da <UART_SetConfig+0x5a6>
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fda:	e07e      	b.n	80060da <UART_SetConfig+0x5a6>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe2:	e07a      	b.n	80060da <UART_SetConfig+0x5a6>
 8005fe4:	2320      	movs	r3, #32
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fea:	e076      	b.n	80060da <UART_SetConfig+0x5a6>
 8005fec:	2340      	movs	r3, #64	; 0x40
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ff2:	e072      	b.n	80060da <UART_SetConfig+0x5a6>
 8005ff4:	2380      	movs	r3, #128	; 0x80
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffa:	e06e      	b.n	80060da <UART_SetConfig+0x5a6>
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a75      	ldr	r2, [pc, #468]	; (80061d8 <UART_SetConfig+0x6a4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d130      	bne.n	8006068 <UART_SetConfig+0x534>
 8006006:	4b72      	ldr	r3, [pc, #456]	; (80061d0 <UART_SetConfig+0x69c>)
 8006008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	2b05      	cmp	r3, #5
 8006010:	d826      	bhi.n	8006060 <UART_SetConfig+0x52c>
 8006012:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <UART_SetConfig+0x4e4>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	08006031 	.word	0x08006031
 800601c:	08006039 	.word	0x08006039
 8006020:	08006041 	.word	0x08006041
 8006024:	08006049 	.word	0x08006049
 8006028:	08006051 	.word	0x08006051
 800602c:	08006059 	.word	0x08006059
 8006030:	2300      	movs	r3, #0
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006036:	e050      	b.n	80060da <UART_SetConfig+0x5a6>
 8006038:	2304      	movs	r3, #4
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603e:	e04c      	b.n	80060da <UART_SetConfig+0x5a6>
 8006040:	2308      	movs	r3, #8
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006046:	e048      	b.n	80060da <UART_SetConfig+0x5a6>
 8006048:	2310      	movs	r3, #16
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e044      	b.n	80060da <UART_SetConfig+0x5a6>
 8006050:	2320      	movs	r3, #32
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e040      	b.n	80060da <UART_SetConfig+0x5a6>
 8006058:	2340      	movs	r3, #64	; 0x40
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605e:	e03c      	b.n	80060da <UART_SetConfig+0x5a6>
 8006060:	2380      	movs	r3, #128	; 0x80
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e038      	b.n	80060da <UART_SetConfig+0x5a6>
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a5b      	ldr	r2, [pc, #364]	; (80061dc <UART_SetConfig+0x6a8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d130      	bne.n	80060d4 <UART_SetConfig+0x5a0>
 8006072:	4b57      	ldr	r3, [pc, #348]	; (80061d0 <UART_SetConfig+0x69c>)
 8006074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	2b05      	cmp	r3, #5
 800607c:	d826      	bhi.n	80060cc <UART_SetConfig+0x598>
 800607e:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <UART_SetConfig+0x550>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	0800609d 	.word	0x0800609d
 8006088:	080060a5 	.word	0x080060a5
 800608c:	080060ad 	.word	0x080060ad
 8006090:	080060b5 	.word	0x080060b5
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060c5 	.word	0x080060c5
 800609c:	2302      	movs	r3, #2
 800609e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a2:	e01a      	b.n	80060da <UART_SetConfig+0x5a6>
 80060a4:	2304      	movs	r3, #4
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060aa:	e016      	b.n	80060da <UART_SetConfig+0x5a6>
 80060ac:	2308      	movs	r3, #8
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b2:	e012      	b.n	80060da <UART_SetConfig+0x5a6>
 80060b4:	2310      	movs	r3, #16
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ba:	e00e      	b.n	80060da <UART_SetConfig+0x5a6>
 80060bc:	2320      	movs	r3, #32
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c2:	e00a      	b.n	80060da <UART_SetConfig+0x5a6>
 80060c4:	2340      	movs	r3, #64	; 0x40
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ca:	e006      	b.n	80060da <UART_SetConfig+0x5a6>
 80060cc:	2380      	movs	r3, #128	; 0x80
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d2:	e002      	b.n	80060da <UART_SetConfig+0x5a6>
 80060d4:	2380      	movs	r3, #128	; 0x80
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a3f      	ldr	r2, [pc, #252]	; (80061dc <UART_SetConfig+0x6a8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	f040 80f8 	bne.w	80062d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	dc46      	bgt.n	800617c <UART_SetConfig+0x648>
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	f2c0 8082 	blt.w	80061f8 <UART_SetConfig+0x6c4>
 80060f4:	3b02      	subs	r3, #2
 80060f6:	2b1e      	cmp	r3, #30
 80060f8:	d87e      	bhi.n	80061f8 <UART_SetConfig+0x6c4>
 80060fa:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <UART_SetConfig+0x5cc>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	08006183 	.word	0x08006183
 8006104:	080061f9 	.word	0x080061f9
 8006108:	0800618b 	.word	0x0800618b
 800610c:	080061f9 	.word	0x080061f9
 8006110:	080061f9 	.word	0x080061f9
 8006114:	080061f9 	.word	0x080061f9
 8006118:	0800619b 	.word	0x0800619b
 800611c:	080061f9 	.word	0x080061f9
 8006120:	080061f9 	.word	0x080061f9
 8006124:	080061f9 	.word	0x080061f9
 8006128:	080061f9 	.word	0x080061f9
 800612c:	080061f9 	.word	0x080061f9
 8006130:	080061f9 	.word	0x080061f9
 8006134:	080061f9 	.word	0x080061f9
 8006138:	080061ab 	.word	0x080061ab
 800613c:	080061f9 	.word	0x080061f9
 8006140:	080061f9 	.word	0x080061f9
 8006144:	080061f9 	.word	0x080061f9
 8006148:	080061f9 	.word	0x080061f9
 800614c:	080061f9 	.word	0x080061f9
 8006150:	080061f9 	.word	0x080061f9
 8006154:	080061f9 	.word	0x080061f9
 8006158:	080061f9 	.word	0x080061f9
 800615c:	080061f9 	.word	0x080061f9
 8006160:	080061f9 	.word	0x080061f9
 8006164:	080061f9 	.word	0x080061f9
 8006168:	080061f9 	.word	0x080061f9
 800616c:	080061f9 	.word	0x080061f9
 8006170:	080061f9 	.word	0x080061f9
 8006174:	080061f9 	.word	0x080061f9
 8006178:	080061eb 	.word	0x080061eb
 800617c:	2b40      	cmp	r3, #64	; 0x40
 800617e:	d037      	beq.n	80061f0 <UART_SetConfig+0x6bc>
 8006180:	e03a      	b.n	80061f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006182:	f7fd fc87 	bl	8003a94 <HAL_RCCEx_GetD3PCLK1Freq>
 8006186:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006188:	e03c      	b.n	8006204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800618a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800618e:	4618      	mov	r0, r3
 8006190:	f7fd fc96 	bl	8003ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006198:	e034      	b.n	8006204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800619a:	f107 0318 	add.w	r3, r7, #24
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fd fde2 	bl	8003d68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061a8:	e02c      	b.n	8006204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061aa:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <UART_SetConfig+0x69c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d016      	beq.n	80061e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061b6:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <UART_SetConfig+0x69c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	08db      	lsrs	r3, r3, #3
 80061bc:	f003 0303 	and.w	r3, r3, #3
 80061c0:	4a07      	ldr	r2, [pc, #28]	; (80061e0 <UART_SetConfig+0x6ac>)
 80061c2:	fa22 f303 	lsr.w	r3, r2, r3
 80061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061c8:	e01c      	b.n	8006204 <UART_SetConfig+0x6d0>
 80061ca:	bf00      	nop
 80061cc:	40011400 	.word	0x40011400
 80061d0:	58024400 	.word	0x58024400
 80061d4:	40007800 	.word	0x40007800
 80061d8:	40007c00 	.word	0x40007c00
 80061dc:	58000c00 	.word	0x58000c00
 80061e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80061e4:	4b9d      	ldr	r3, [pc, #628]	; (800645c <UART_SetConfig+0x928>)
 80061e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061e8:	e00c      	b.n	8006204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061ea:	4b9d      	ldr	r3, [pc, #628]	; (8006460 <UART_SetConfig+0x92c>)
 80061ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061ee:	e009      	b.n	8006204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061f6:	e005      	b.n	8006204 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006202:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 81de 	beq.w	80065c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	4a94      	ldr	r2, [pc, #592]	; (8006464 <UART_SetConfig+0x930>)
 8006212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006216:	461a      	mov	r2, r3
 8006218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621a:	fbb3 f3f2 	udiv	r3, r3, r2
 800621e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	4613      	mov	r3, r2
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	4413      	add	r3, r2
 800622a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622c:	429a      	cmp	r2, r3
 800622e:	d305      	bcc.n	800623c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006238:	429a      	cmp	r2, r3
 800623a:	d903      	bls.n	8006244 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006242:	e1c1      	b.n	80065c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006246:	2200      	movs	r2, #0
 8006248:	60bb      	str	r3, [r7, #8]
 800624a:	60fa      	str	r2, [r7, #12]
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	4a84      	ldr	r2, [pc, #528]	; (8006464 <UART_SetConfig+0x930>)
 8006252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006256:	b29b      	uxth	r3, r3
 8006258:	2200      	movs	r2, #0
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	607a      	str	r2, [r7, #4]
 800625e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006262:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006266:	f7fa f837 	bl	80002d8 <__aeabi_uldivmod>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	4610      	mov	r0, r2
 8006270:	4619      	mov	r1, r3
 8006272:	f04f 0200 	mov.w	r2, #0
 8006276:	f04f 0300 	mov.w	r3, #0
 800627a:	020b      	lsls	r3, r1, #8
 800627c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006280:	0202      	lsls	r2, r0, #8
 8006282:	6979      	ldr	r1, [r7, #20]
 8006284:	6849      	ldr	r1, [r1, #4]
 8006286:	0849      	lsrs	r1, r1, #1
 8006288:	2000      	movs	r0, #0
 800628a:	460c      	mov	r4, r1
 800628c:	4605      	mov	r5, r0
 800628e:	eb12 0804 	adds.w	r8, r2, r4
 8006292:	eb43 0905 	adc.w	r9, r3, r5
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	469a      	mov	sl, r3
 800629e:	4693      	mov	fp, r2
 80062a0:	4652      	mov	r2, sl
 80062a2:	465b      	mov	r3, fp
 80062a4:	4640      	mov	r0, r8
 80062a6:	4649      	mov	r1, r9
 80062a8:	f7fa f816 	bl	80002d8 <__aeabi_uldivmod>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4613      	mov	r3, r2
 80062b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ba:	d308      	bcc.n	80062ce <UART_SetConfig+0x79a>
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c2:	d204      	bcs.n	80062ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ca:	60da      	str	r2, [r3, #12]
 80062cc:	e17c      	b.n	80065c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80062d4:	e178      	b.n	80065c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062de:	f040 80c5 	bne.w	800646c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80062e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	dc48      	bgt.n	800637c <UART_SetConfig+0x848>
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	db7b      	blt.n	80063e6 <UART_SetConfig+0x8b2>
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d879      	bhi.n	80063e6 <UART_SetConfig+0x8b2>
 80062f2:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <UART_SetConfig+0x7c4>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	08006383 	.word	0x08006383
 80062fc:	0800638b 	.word	0x0800638b
 8006300:	080063e7 	.word	0x080063e7
 8006304:	080063e7 	.word	0x080063e7
 8006308:	08006393 	.word	0x08006393
 800630c:	080063e7 	.word	0x080063e7
 8006310:	080063e7 	.word	0x080063e7
 8006314:	080063e7 	.word	0x080063e7
 8006318:	080063a3 	.word	0x080063a3
 800631c:	080063e7 	.word	0x080063e7
 8006320:	080063e7 	.word	0x080063e7
 8006324:	080063e7 	.word	0x080063e7
 8006328:	080063e7 	.word	0x080063e7
 800632c:	080063e7 	.word	0x080063e7
 8006330:	080063e7 	.word	0x080063e7
 8006334:	080063e7 	.word	0x080063e7
 8006338:	080063b3 	.word	0x080063b3
 800633c:	080063e7 	.word	0x080063e7
 8006340:	080063e7 	.word	0x080063e7
 8006344:	080063e7 	.word	0x080063e7
 8006348:	080063e7 	.word	0x080063e7
 800634c:	080063e7 	.word	0x080063e7
 8006350:	080063e7 	.word	0x080063e7
 8006354:	080063e7 	.word	0x080063e7
 8006358:	080063e7 	.word	0x080063e7
 800635c:	080063e7 	.word	0x080063e7
 8006360:	080063e7 	.word	0x080063e7
 8006364:	080063e7 	.word	0x080063e7
 8006368:	080063e7 	.word	0x080063e7
 800636c:	080063e7 	.word	0x080063e7
 8006370:	080063e7 	.word	0x080063e7
 8006374:	080063e7 	.word	0x080063e7
 8006378:	080063d9 	.word	0x080063d9
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d02e      	beq.n	80063de <UART_SetConfig+0x8aa>
 8006380:	e031      	b.n	80063e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006382:	f7fc f951 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8006386:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006388:	e033      	b.n	80063f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800638a:	f7fc f963 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 800638e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006390:	e02f      	b.n	80063f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006396:	4618      	mov	r0, r3
 8006398:	f7fd fb92 	bl	8003ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063a0:	e027      	b.n	80063f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063a2:	f107 0318 	add.w	r3, r7, #24
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fd fcde 	bl	8003d68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063b0:	e01f      	b.n	80063f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063b2:	4b2d      	ldr	r3, [pc, #180]	; (8006468 <UART_SetConfig+0x934>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d009      	beq.n	80063d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063be:	4b2a      	ldr	r3, [pc, #168]	; (8006468 <UART_SetConfig+0x934>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	08db      	lsrs	r3, r3, #3
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	4a24      	ldr	r2, [pc, #144]	; (800645c <UART_SetConfig+0x928>)
 80063ca:	fa22 f303 	lsr.w	r3, r2, r3
 80063ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063d0:	e00f      	b.n	80063f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063d2:	4b22      	ldr	r3, [pc, #136]	; (800645c <UART_SetConfig+0x928>)
 80063d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063d6:	e00c      	b.n	80063f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063d8:	4b21      	ldr	r3, [pc, #132]	; (8006460 <UART_SetConfig+0x92c>)
 80063da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063dc:	e009      	b.n	80063f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063e4:	e005      	b.n	80063f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80063f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 80e7 	beq.w	80065c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	4a19      	ldr	r2, [pc, #100]	; (8006464 <UART_SetConfig+0x930>)
 8006400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006404:	461a      	mov	r2, r3
 8006406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006408:	fbb3 f3f2 	udiv	r3, r3, r2
 800640c:	005a      	lsls	r2, r3, #1
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	441a      	add	r2, r3
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	fbb2 f3f3 	udiv	r3, r2, r3
 800641e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006422:	2b0f      	cmp	r3, #15
 8006424:	d916      	bls.n	8006454 <UART_SetConfig+0x920>
 8006426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642c:	d212      	bcs.n	8006454 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	b29b      	uxth	r3, r3
 8006432:	f023 030f 	bic.w	r3, r3, #15
 8006436:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	b29b      	uxth	r3, r3
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	b29a      	uxth	r2, r3
 8006444:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006446:	4313      	orrs	r3, r2
 8006448:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006450:	60da      	str	r2, [r3, #12]
 8006452:	e0b9      	b.n	80065c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800645a:	e0b5      	b.n	80065c8 <UART_SetConfig+0xa94>
 800645c:	03d09000 	.word	0x03d09000
 8006460:	003d0900 	.word	0x003d0900
 8006464:	08006ccc 	.word	0x08006ccc
 8006468:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800646c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006470:	2b20      	cmp	r3, #32
 8006472:	dc49      	bgt.n	8006508 <UART_SetConfig+0x9d4>
 8006474:	2b00      	cmp	r3, #0
 8006476:	db7c      	blt.n	8006572 <UART_SetConfig+0xa3e>
 8006478:	2b20      	cmp	r3, #32
 800647a:	d87a      	bhi.n	8006572 <UART_SetConfig+0xa3e>
 800647c:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <UART_SetConfig+0x950>)
 800647e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006482:	bf00      	nop
 8006484:	0800650f 	.word	0x0800650f
 8006488:	08006517 	.word	0x08006517
 800648c:	08006573 	.word	0x08006573
 8006490:	08006573 	.word	0x08006573
 8006494:	0800651f 	.word	0x0800651f
 8006498:	08006573 	.word	0x08006573
 800649c:	08006573 	.word	0x08006573
 80064a0:	08006573 	.word	0x08006573
 80064a4:	0800652f 	.word	0x0800652f
 80064a8:	08006573 	.word	0x08006573
 80064ac:	08006573 	.word	0x08006573
 80064b0:	08006573 	.word	0x08006573
 80064b4:	08006573 	.word	0x08006573
 80064b8:	08006573 	.word	0x08006573
 80064bc:	08006573 	.word	0x08006573
 80064c0:	08006573 	.word	0x08006573
 80064c4:	0800653f 	.word	0x0800653f
 80064c8:	08006573 	.word	0x08006573
 80064cc:	08006573 	.word	0x08006573
 80064d0:	08006573 	.word	0x08006573
 80064d4:	08006573 	.word	0x08006573
 80064d8:	08006573 	.word	0x08006573
 80064dc:	08006573 	.word	0x08006573
 80064e0:	08006573 	.word	0x08006573
 80064e4:	08006573 	.word	0x08006573
 80064e8:	08006573 	.word	0x08006573
 80064ec:	08006573 	.word	0x08006573
 80064f0:	08006573 	.word	0x08006573
 80064f4:	08006573 	.word	0x08006573
 80064f8:	08006573 	.word	0x08006573
 80064fc:	08006573 	.word	0x08006573
 8006500:	08006573 	.word	0x08006573
 8006504:	08006565 	.word	0x08006565
 8006508:	2b40      	cmp	r3, #64	; 0x40
 800650a:	d02e      	beq.n	800656a <UART_SetConfig+0xa36>
 800650c:	e031      	b.n	8006572 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800650e:	f7fc f88b 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8006512:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006514:	e033      	b.n	800657e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006516:	f7fc f89d 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 800651a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800651c:	e02f      	b.n	800657e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800651e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006522:	4618      	mov	r0, r3
 8006524:	f7fd facc 	bl	8003ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800652c:	e027      	b.n	800657e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800652e:	f107 0318 	add.w	r3, r7, #24
 8006532:	4618      	mov	r0, r3
 8006534:	f7fd fc18 	bl	8003d68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800653c:	e01f      	b.n	800657e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800653e:	4b2d      	ldr	r3, [pc, #180]	; (80065f4 <UART_SetConfig+0xac0>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0320 	and.w	r3, r3, #32
 8006546:	2b00      	cmp	r3, #0
 8006548:	d009      	beq.n	800655e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800654a:	4b2a      	ldr	r3, [pc, #168]	; (80065f4 <UART_SetConfig+0xac0>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	08db      	lsrs	r3, r3, #3
 8006550:	f003 0303 	and.w	r3, r3, #3
 8006554:	4a28      	ldr	r2, [pc, #160]	; (80065f8 <UART_SetConfig+0xac4>)
 8006556:	fa22 f303 	lsr.w	r3, r2, r3
 800655a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800655c:	e00f      	b.n	800657e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800655e:	4b26      	ldr	r3, [pc, #152]	; (80065f8 <UART_SetConfig+0xac4>)
 8006560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006562:	e00c      	b.n	800657e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006564:	4b25      	ldr	r3, [pc, #148]	; (80065fc <UART_SetConfig+0xac8>)
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006568:	e009      	b.n	800657e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006570:	e005      	b.n	800657e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800657c:	bf00      	nop
    }

    if (pclk != 0U)
 800657e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006580:	2b00      	cmp	r3, #0
 8006582:	d021      	beq.n	80065c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	4a1d      	ldr	r2, [pc, #116]	; (8006600 <UART_SetConfig+0xacc>)
 800658a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800658e:	461a      	mov	r2, r3
 8006590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006592:	fbb3 f2f2 	udiv	r2, r3, r2
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	085b      	lsrs	r3, r3, #1
 800659c:	441a      	add	r2, r3
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065aa:	2b0f      	cmp	r3, #15
 80065ac:	d909      	bls.n	80065c2 <UART_SetConfig+0xa8e>
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b4:	d205      	bcs.n	80065c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60da      	str	r2, [r3, #12]
 80065c0:	e002      	b.n	80065c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2200      	movs	r2, #0
 80065dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2200      	movs	r2, #0
 80065e2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80065e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3748      	adds	r7, #72	; 0x48
 80065ec:	46bd      	mov	sp, r7
 80065ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065f2:	bf00      	nop
 80065f4:	58024400 	.word	0x58024400
 80065f8:	03d09000 	.word	0x03d09000
 80065fc:	003d0900 	.word	0x003d0900
 8006600:	08006ccc 	.word	0x08006ccc

08006604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00a      	beq.n	8006672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00a      	beq.n	8006694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006698:	f003 0310 	and.w	r3, r3, #16
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01a      	beq.n	800671a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006702:	d10a      	bne.n	800671a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	605a      	str	r2, [r3, #4]
  }
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b098      	sub	sp, #96	; 0x60
 800674c:	af02      	add	r7, sp, #8
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006758:	f7fa fc44 	bl	8000fe4 <HAL_GetTick>
 800675c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0308 	and.w	r3, r3, #8
 8006768:	2b08      	cmp	r3, #8
 800676a:	d12f      	bne.n	80067cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800676c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006774:	2200      	movs	r2, #0
 8006776:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f88e 	bl	800689c <UART_WaitOnFlagUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d022      	beq.n	80067cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800679a:	653b      	str	r3, [r7, #80]	; 0x50
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	461a      	mov	r2, r3
 80067a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a4:	647b      	str	r3, [r7, #68]	; 0x44
 80067a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e6      	bne.n	8006786 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e063      	b.n	8006894 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d149      	bne.n	800686e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067e2:	2200      	movs	r2, #0
 80067e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f857 	bl	800689c <UART_WaitOnFlagUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d03c      	beq.n	800686e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	623b      	str	r3, [r7, #32]
   return(result);
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006808:	64fb      	str	r3, [r7, #76]	; 0x4c
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006812:	633b      	str	r3, [r7, #48]	; 0x30
 8006814:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e6      	bne.n	80067f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3308      	adds	r3, #8
 800682c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	60fb      	str	r3, [r7, #12]
   return(result);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f023 0301 	bic.w	r3, r3, #1
 800683c:	64bb      	str	r3, [r7, #72]	; 0x48
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3308      	adds	r3, #8
 8006844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006846:	61fa      	str	r2, [r7, #28]
 8006848:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	69b9      	ldr	r1, [r7, #24]
 800684c:	69fa      	ldr	r2, [r7, #28]
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	617b      	str	r3, [r7, #20]
   return(result);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e5      	bne.n	8006826 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e012      	b.n	8006894 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3758      	adds	r7, #88	; 0x58
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	4613      	mov	r3, r2
 80068aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ac:	e04f      	b.n	800694e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b4:	d04b      	beq.n	800694e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b6:	f7fa fb95 	bl	8000fe4 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d302      	bcc.n	80068cc <UART_WaitOnFlagUntilTimeout+0x30>
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e04e      	b.n	800696e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d037      	beq.n	800694e <UART_WaitOnFlagUntilTimeout+0xb2>
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b80      	cmp	r3, #128	; 0x80
 80068e2:	d034      	beq.n	800694e <UART_WaitOnFlagUntilTimeout+0xb2>
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b40      	cmp	r3, #64	; 0x40
 80068e8:	d031      	beq.n	800694e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	f003 0308 	and.w	r3, r3, #8
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d110      	bne.n	800691a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2208      	movs	r2, #8
 80068fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f839 	bl	8006978 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2208      	movs	r2, #8
 800690a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e029      	b.n	800696e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006928:	d111      	bne.n	800694e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006932:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 f81f 	bl	8006978 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e00f      	b.n	800696e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69da      	ldr	r2, [r3, #28]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	4013      	ands	r3, r2
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	429a      	cmp	r2, r3
 800695c:	bf0c      	ite	eq
 800695e:	2301      	moveq	r3, #1
 8006960:	2300      	movne	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	461a      	mov	r2, r3
 8006966:	79fb      	ldrb	r3, [r7, #7]
 8006968:	429a      	cmp	r2, r3
 800696a:	d0a0      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006978:	b480      	push	{r7}
 800697a:	b095      	sub	sp, #84	; 0x54
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006994:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699e:	643b      	str	r3, [r7, #64]	; 0x40
 80069a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e6      	bne.n	8006980 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3308      	adds	r3, #8
 80069b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80069c2:	69fa      	ldr	r2, [r7, #28]
 80069c4:	4b1e      	ldr	r3, [pc, #120]	; (8006a40 <UART_EndRxTransfer+0xc8>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3308      	adds	r3, #8
 80069d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1e5      	bne.n	80069b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d118      	bne.n	8006a20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	e853 3f00 	ldrex	r3, [r3]
 80069fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f023 0310 	bic.w	r3, r3, #16
 8006a02:	647b      	str	r3, [r7, #68]	; 0x44
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a0c:	61bb      	str	r3, [r7, #24]
 8006a0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a10:	6979      	ldr	r1, [r7, #20]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	e841 2300 	strex	r3, r2, [r1]
 8006a18:	613b      	str	r3, [r7, #16]
   return(result);
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e6      	bne.n	80069ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006a34:	bf00      	nop
 8006a36:	3754      	adds	r7, #84	; 0x54
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	effffffe 	.word	0xeffffffe

08006a44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_UARTEx_DisableFifoMode+0x16>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e027      	b.n	8006aaa <HAL_UARTEx_DisableFifoMode+0x66>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2224      	movs	r2, #36	; 0x24
 8006a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0201 	bic.w	r2, r2, #1
 8006a80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d101      	bne.n	8006ace <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006aca:	2302      	movs	r3, #2
 8006acc:	e02d      	b.n	8006b2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2224      	movs	r2, #36	; 0x24
 8006ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0201 	bic.w	r2, r2, #1
 8006af4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f850 	bl	8006bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b46:	2302      	movs	r3, #2
 8006b48:	e02d      	b.n	8006ba6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2224      	movs	r2, #36	; 0x24
 8006b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0201 	bic.w	r2, r2, #1
 8006b70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f812 	bl	8006bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2220      	movs	r2, #32
 8006b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d108      	bne.n	8006bd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bd0:	e031      	b.n	8006c36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bd2:	2310      	movs	r3, #16
 8006bd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bd6:	2310      	movs	r3, #16
 8006bd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	0e5b      	lsrs	r3, r3, #25
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	0f5b      	lsrs	r3, r3, #29
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	f003 0307 	and.w	r3, r3, #7
 8006bf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	7b3a      	ldrb	r2, [r7, #12]
 8006bfe:	4911      	ldr	r1, [pc, #68]	; (8006c44 <UARTEx_SetNbDataToProcess+0x94>)
 8006c00:	5c8a      	ldrb	r2, [r1, r2]
 8006c02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c06:	7b3a      	ldrb	r2, [r7, #12]
 8006c08:	490f      	ldr	r1, [pc, #60]	; (8006c48 <UARTEx_SetNbDataToProcess+0x98>)
 8006c0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	7b7a      	ldrb	r2, [r7, #13]
 8006c1c:	4909      	ldr	r1, [pc, #36]	; (8006c44 <UARTEx_SetNbDataToProcess+0x94>)
 8006c1e:	5c8a      	ldrb	r2, [r1, r2]
 8006c20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c24:	7b7a      	ldrb	r2, [r7, #13]
 8006c26:	4908      	ldr	r1, [pc, #32]	; (8006c48 <UARTEx_SetNbDataToProcess+0x98>)
 8006c28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006c36:	bf00      	nop
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	08006ce4 	.word	0x08006ce4
 8006c48:	08006cec 	.word	0x08006cec

08006c4c <memset>:
 8006c4c:	4402      	add	r2, r0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d100      	bne.n	8006c56 <memset+0xa>
 8006c54:	4770      	bx	lr
 8006c56:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5a:	e7f9      	b.n	8006c50 <memset+0x4>

08006c5c <__libc_init_array>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	4d0d      	ldr	r5, [pc, #52]	; (8006c94 <__libc_init_array+0x38>)
 8006c60:	4c0d      	ldr	r4, [pc, #52]	; (8006c98 <__libc_init_array+0x3c>)
 8006c62:	1b64      	subs	r4, r4, r5
 8006c64:	10a4      	asrs	r4, r4, #2
 8006c66:	2600      	movs	r6, #0
 8006c68:	42a6      	cmp	r6, r4
 8006c6a:	d109      	bne.n	8006c80 <__libc_init_array+0x24>
 8006c6c:	4d0b      	ldr	r5, [pc, #44]	; (8006c9c <__libc_init_array+0x40>)
 8006c6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ca0 <__libc_init_array+0x44>)
 8006c70:	f000 f818 	bl	8006ca4 <_init>
 8006c74:	1b64      	subs	r4, r4, r5
 8006c76:	10a4      	asrs	r4, r4, #2
 8006c78:	2600      	movs	r6, #0
 8006c7a:	42a6      	cmp	r6, r4
 8006c7c:	d105      	bne.n	8006c8a <__libc_init_array+0x2e>
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c84:	4798      	blx	r3
 8006c86:	3601      	adds	r6, #1
 8006c88:	e7ee      	b.n	8006c68 <__libc_init_array+0xc>
 8006c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8e:	4798      	blx	r3
 8006c90:	3601      	adds	r6, #1
 8006c92:	e7f2      	b.n	8006c7a <__libc_init_array+0x1e>
 8006c94:	08006cfc 	.word	0x08006cfc
 8006c98:	08006cfc 	.word	0x08006cfc
 8006c9c:	08006cfc 	.word	0x08006cfc
 8006ca0:	08006d00 	.word	0x08006d00

08006ca4 <_init>:
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	bf00      	nop
 8006ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006caa:	bc08      	pop	{r3}
 8006cac:	469e      	mov	lr, r3
 8006cae:	4770      	bx	lr

08006cb0 <_fini>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	bf00      	nop
 8006cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cb6:	bc08      	pop	{r3}
 8006cb8:	469e      	mov	lr, r3
 8006cba:	4770      	bx	lr
